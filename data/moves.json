{
  "10000000voltthunderbolt": {
    "id": "10000000voltthunderbolt",
    "num": 719,
    "accuracy": true,
    "basePower": 195,
    "category": "Special",
    "isNonstandard": "Past",
    "name": "10,000,000 Volt Thunderbolt",
    "pp": 1,
    "priority": 0,
    "flags": {},
    "isZ": "pikashuniumz",
    "critRatio": 3,
    "secondary": null,
    "target": "normal",
    "type": "Electric",
    "contestType": "Cool"
  },
  "absorb": {
    "id": "absorb",
    "inherit": true,
    "pp": 20
  },
  "accelerock": {
    "id": "accelerock",
    "num": 709,
    "accuracy": 100,
    "basePower": 40,
    "category": "Physical",
    "name": "Accelerock",
    "pp": 20,
    "priority": 1,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Rock",
    "contestType": "Cool"
  },
  "acid": {
    "id": "acid",
    "inherit": true,
    "secondary": {
      "chance": 10,
      "boosts": {
        "def": -1
      }
    }
  },
  "acidarmor": {
    "id": "acidarmor",
    "num": 151,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Acid Armor",
    "pp": 20,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "boosts": {
      "def": 2
    },
    "secondary": null,
    "target": "self",
    "type": "Poison",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Tough"
  },
  "aciddownpour": {
    "id": "aciddownpour",
    "num": 628,
    "accuracy": true,
    "basePower": 1,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Acid Downpour",
    "pp": 1,
    "priority": 0,
    "flags": {},
    "isZ": "poisoniumz",
    "secondary": null,
    "target": "normal",
    "type": "Poison",
    "contestType": "Cool"
  },
  "acidspray": {
    "id": "acidspray",
    "num": 491,
    "accuracy": 100,
    "basePower": 40,
    "category": "Special",
    "name": "Acid Spray",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "bullet": 1
    },
    "secondary": {
      "chance": 100,
      "boosts": {
        "spd": -2
      }
    },
    "target": "normal",
    "type": "Poison",
    "contestType": "Beautiful"
  },
  "acrobatics": {
    "id": "acrobatics",
    "num": 512,
    "accuracy": 100,
    "basePower": 55,
    "basePowerCallback": "basePowerCallback(pokemon, target, move) {\n      if (!pokemon.item) {\n        this.debug(\"BP doubled for no item\");\n        return move.basePower * 2;\n      }\n      return move.basePower;\n    }",
    "category": "Physical",
    "name": "Acrobatics",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "distance": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "any",
    "type": "Flying",
    "contestType": "Cool"
  },
  "acupressure": {
    "id": "acupressure",
    "num": 367,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Acupressure",
    "pp": 30,
    "priority": 0,
    "flags": {
      "metronome": 1
    },
    "onHit": "onHit(target) {\n      const stats = [];\n      let stat;\n      for (stat in target.boosts) {\n        if (target.boosts[stat] < 6) {\n          stats.push(stat);\n        }\n      }\n      if (stats.length) {\n        const randomStat = this.sample(stats);\n        const boost = {};\n        boost[randomStat] = 2;\n        this.boost(boost);\n      } else {\n        return false;\n      }\n    }",
    "secondary": null,
    "target": "adjacentAllyOrSelf",
    "type": "Normal",
    "zMove": {
      "effect": "crit2"
    },
    "contestType": "Tough"
  },
  "aerialace": {
    "id": "aerialace",
    "num": 332,
    "accuracy": true,
    "basePower": 60,
    "category": "Physical",
    "name": "Aerial Ace",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "distance": 1,
      "metronome": 1,
      "slicing": 1
    },
    "secondary": null,
    "target": "any",
    "type": "Flying",
    "contestType": "Cool"
  },
  "aeroblast": {
    "id": "aeroblast",
    "inherit": true,
    "critRatio": 3
  },
  "afteryou": {
    "id": "afteryou",
    "num": 495,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "After You",
    "pp": 15,
    "priority": 0,
    "flags": {
      "bypasssub": 1,
      "allyanim": 1
    },
    "onHit": "onHit(target) {\n      if (this.activePerHalf === 1) return false;\n      const action = this.queue.willMove(target);\n      if (action) {\n        this.queue.prioritizeAction(action);\n        this.add(\"-activate\", target, \"move: After You\");\n      } else {\n        return false;\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "zMove": {
      "boost": {
        "spe": 1
      }
    },
    "contestType": "Cute"
  },
  "agility": {
    "id": "agility",
    "num": 97,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Agility",
    "pp": 30,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "boosts": {
      "spe": 2
    },
    "secondary": null,
    "target": "self",
    "type": "Psychic",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Cool"
  },
  "aircutter": {
    "id": "aircutter",
    "num": 314,
    "accuracy": 95,
    "basePower": 60,
    "category": "Special",
    "name": "Air Cutter",
    "pp": 25,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "slicing": 1,
      "wind": 1
    },
    "critRatio": 2,
    "secondary": null,
    "target": "allAdjacentFoes",
    "type": "Flying",
    "contestType": "Cool"
  },
  "airslash": {
    "id": "airslash",
    "num": 403,
    "accuracy": 95,
    "basePower": 75,
    "category": "Special",
    "name": "Air Slash",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "distance": 1,
      "metronome": 1,
      "slicing": 1
    },
    "secondary": {
      "chance": 30,
      "volatileStatus": "flinch"
    },
    "target": "any",
    "type": "Flying",
    "contestType": "Cool"
  },
  "alloutpummeling": {
    "id": "alloutpummeling",
    "num": 624,
    "accuracy": true,
    "basePower": 1,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "All-Out Pummeling",
    "pp": 1,
    "priority": 0,
    "flags": {},
    "isZ": "fightiniumz",
    "secondary": null,
    "target": "normal",
    "type": "Fighting",
    "contestType": "Cool"
  },
  "alluringvoice": {
    "id": "alluringvoice",
    "num": 914,
    "accuracy": 100,
    "basePower": 80,
    "category": "Special",
    "name": "Alluring Voice",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "sound": 1,
      "bypasssub": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 100,
      "onHit": "onHit(target, source, move) {\n        if (target?.statsRaisedThisTurn) {\n          target.addVolatile(\"confusion\", source, move);\n        }\n      }"
    },
    "target": "normal",
    "type": "Fairy"
  },
  "allyswitch": {
    "id": "allyswitch",
    "num": 502,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Ally Switch",
    "pp": 15,
    "priority": 2,
    "flags": {
      "metronome": 1
    },
    "onPrepareHit": "onPrepareHit(pokemon) {\n      return pokemon.addVolatile(\"allyswitch\");\n    }",
    "onHit": "onHit(pokemon) {\n      let success = true;\n      if (this.format.gameType !== \"doubles\" && this.format.gameType !== \"triples\") success = false;\n      if (pokemon.side.active.length === 3 && pokemon.position === 1) success = false;\n      const newPosition = pokemon.position === 0 ? pokemon.side.active.length - 1 : 0;\n      if (!pokemon.side.active[newPosition]) success = false;\n      if (pokemon.side.active[newPosition].fainted) success = false;\n      if (!success) {\n        this.add(\"-fail\", pokemon, \"move: Ally Switch\");\n        this.attrLastMove(\"[still]\");\n        return this.NOT_FAIL;\n      }\n      this.swapPosition(pokemon, newPosition, \"[from] move: Ally Switch\");\n    }",
    "condition": {
      "duration": 2,
      "counterMax": 729,
      "onStart": "onStart() {\n        this.effectState.counter = 3;\n      }",
      "onRestart": "onRestart(pokemon) {\n        const counter = this.effectState.counter || 1;\n        this.debug(`Ally Switch success chance: ${Math.round(100 / counter)}%`);\n        const success = this.randomChance(1, counter);\n        if (!success) {\n          delete pokemon.volatiles[\"allyswitch\"];\n          return false;\n        }\n        if (this.effectState.counter < this.effect.counterMax) {\n          this.effectState.counter *= 3;\n        }\n        this.effectState.duration = 2;\n      }"
    },
    "secondary": null,
    "target": "self",
    "type": "Psychic",
    "zMove": {
      "boost": {
        "spe": 2
      }
    },
    "contestType": "Clever"
  },
  "amnesia": {
    "id": "amnesia",
    "num": 133,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Amnesia",
    "pp": 20,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "boosts": {
      "spd": 2
    },
    "secondary": null,
    "target": "self",
    "type": "Psychic",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Cute"
  },
  "anchorshot": {
    "id": "anchorshot",
    "num": 677,
    "accuracy": 100,
    "basePower": 80,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Anchor Shot",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 100,
      "onHit": "onHit(target, source, move) {\n        if (source.isActive) target.addVolatile(\"trapped\", source, move, \"trapper\");\n      }"
    },
    "target": "normal",
    "type": "Steel",
    "contestType": "Tough"
  },
  "ancientpower": {
    "id": "ancientpower",
    "inherit": true,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    }
  },
  "appleacid": {
    "id": "appleacid",
    "num": 787,
    "accuracy": 100,
    "basePower": 80,
    "category": "Special",
    "name": "Apple Acid",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "secondary": {
      "chance": 100,
      "boosts": {
        "spd": -1
      }
    },
    "target": "normal",
    "type": "Grass"
  },
  "aquacutter": {
    "id": "aquacutter",
    "num": 895,
    "accuracy": 100,
    "basePower": 70,
    "category": "Physical",
    "name": "Aqua Cutter",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "slicing": 1
    },
    "critRatio": 2,
    "secondary": null,
    "target": "normal",
    "type": "Water",
    "contestType": "Cool"
  },
  "aquajet": {
    "id": "aquajet",
    "num": 453,
    "accuracy": 100,
    "basePower": 40,
    "category": "Physical",
    "name": "Aqua Jet",
    "pp": 20,
    "priority": 1,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Water",
    "contestType": "Cool"
  },
  "aquaring": {
    "id": "aquaring",
    "num": 392,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Aqua Ring",
    "pp": 20,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "volatileStatus": "aquaring",
    "condition": {
      "onStart": "onStart(pokemon) {\n        this.add(\"-start\", pokemon, \"Aqua Ring\");\n      }",
      "onResidualOrder": 6,
      "onResidual": "onResidual(pokemon) {\n        this.heal(pokemon.baseMaxhp / 16);\n      }"
    },
    "secondary": null,
    "target": "self",
    "type": "Water",
    "zMove": {
      "boost": {
        "def": 1
      }
    },
    "contestType": "Beautiful"
  },
  "aquastep": {
    "id": "aquastep",
    "num": 872,
    "accuracy": 100,
    "basePower": 80,
    "category": "Physical",
    "name": "Aqua Step",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "dance": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 100,
      "self": {
        "boosts": {
          "spe": 1
        }
      }
    },
    "target": "normal",
    "type": "Water",
    "contestType": "Cool"
  },
  "aquatail": {
    "id": "aquatail",
    "num": 401,
    "accuracy": 90,
    "basePower": 90,
    "category": "Physical",
    "name": "Aqua Tail",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Water",
    "contestType": "Beautiful"
  },
  "armorcannon": {
    "id": "armorcannon",
    "num": 890,
    "accuracy": 100,
    "basePower": 120,
    "category": "Special",
    "name": "Armor Cannon",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "self": {
      "boosts": {
        "def": -1,
        "spd": -1
      }
    },
    "secondary": null,
    "target": "normal",
    "type": "Fire"
  },
  "armthrust": {
    "id": "armthrust",
    "num": 292,
    "accuracy": 100,
    "basePower": 15,
    "category": "Physical",
    "name": "Arm Thrust",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "multihit": [
      2,
      5
    ],
    "secondary": null,
    "target": "normal",
    "type": "Fighting",
    "contestType": "Tough"
  },
  "aromatherapy": {
    "id": "aromatherapy",
    "num": 312,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Aromatherapy",
    "pp": 5,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "distance": 1,
      "metronome": 1
    },
    "onHit": "onHit(target, source, move) {\n      this.add(\"-activate\", source, \"move: Aromatherapy\");\n      let success = false;\n      const allies = [...target.side.pokemon, ...target.side.allySide?.pokemon || []];\n      for (const ally of allies) {\n        if (ally !== source && !this.suppressingAbility(ally)) {\n          if (ally.hasAbility(\"sapsipper\")) {\n            this.add(\"-immune\", ally, \"[from] ability: Sap Sipper\");\n            continue;\n          }\n          if (ally.hasAbility(\"goodasgold\")) {\n            this.add(\"-immune\", ally, \"[from] ability: Good as Gold\");\n            continue;\n          }\n          if (ally.volatiles[\"substitute\"] && !move.infiltrates) continue;\n        }\n        if (ally.cureStatus()) success = true;\n      }\n      return success;\n    }",
    "target": "allyTeam",
    "type": "Grass",
    "zMove": {
      "effect": "heal"
    },
    "contestType": "Clever"
  },
  "aromaticmist": {
    "id": "aromaticmist",
    "num": 597,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Aromatic Mist",
    "pp": 20,
    "priority": 0,
    "flags": {
      "bypasssub": 1,
      "metronome": 1
    },
    "boosts": {
      "spd": 1
    },
    "secondary": null,
    "target": "adjacentAlly",
    "type": "Fairy",
    "zMove": {
      "boost": {
        "spd": 2
      }
    },
    "contestType": "Beautiful"
  },
  "assist": {
    "id": "assist",
    "inherit": true,
    "flags": {
      "metronome": 1,
      "noassist": 1,
      "nosleeptalk": 1
    }
  },
  "assurance": {
    "id": "assurance",
    "num": 372,
    "accuracy": 100,
    "basePower": 60,
    "basePowerCallback": "basePowerCallback(pokemon, target, move) {\n      if (target.hurtThisTurn) {\n        this.debug(\"BP doubled on damaged target\");\n        return move.basePower * 2;\n      }\n      return move.basePower;\n    }",
    "category": "Physical",
    "name": "Assurance",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Dark",
    "contestType": "Clever"
  },
  "astonish": {
    "id": "astonish",
    "inherit": true,
    "basePowerCallback": "basePowerCallback(pokemon, target) {\n      if (target.volatiles[\"minimize\"]) return 60;\n      return 30;\n    }"
  },
  "astralbarrage": {
    "id": "astralbarrage",
    "num": 825,
    "accuracy": 100,
    "basePower": 120,
    "category": "Special",
    "name": "Astral Barrage",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "secondary": null,
    "target": "allAdjacentFoes",
    "type": "Ghost"
  },
  "attackorder": {
    "id": "attackorder",
    "num": 454,
    "accuracy": 100,
    "basePower": 90,
    "category": "Physical",
    "name": "Attack Order",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "critRatio": 2,
    "secondary": null,
    "target": "normal",
    "type": "Bug",
    "contestType": "Clever"
  },
  "attract": {
    "id": "attract",
    "num": 213,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Attract",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "bypasssub": 1,
      "metronome": 1
    },
    "volatileStatus": "attract",
    "condition": {
      "noCopy": true,
      "onStart": "onStart(pokemon, source, effect) {\n        if (!(pokemon.gender === \"M\" && source.gender === \"F\") && !(pokemon.gender === \"F\" && source.gender === \"M\")) {\n          this.debug(\"incompatible gender\");\n          return false;\n        }\n        if (!this.runEvent(\"Attract\", pokemon, source)) {\n          this.debug(\"Attract event failed\");\n          return false;\n        }\n        if (effect.name === \"Cute Charm\") {\n          this.add(\"-start\", pokemon, \"Attract\", \"[from] ability: Cute Charm\", `[of] ${source}`);\n        } else if (effect.name === \"Destiny Knot\") {\n          this.add(\"-start\", pokemon, \"Attract\", \"[from] item: Destiny Knot\", `[of] ${source}`);\n        } else {\n          this.add(\"-start\", pokemon, \"Attract\");\n        }\n      }",
      "onUpdate": "onUpdate(pokemon) {\n        if (this.effectState.source && !this.effectState.source.isActive && pokemon.volatiles[\"attract\"]) {\n          this.debug(`Removing Attract volatile on ${pokemon}`);\n          pokemon.removeVolatile(\"attract\");\n        }\n      }",
      "onBeforeMovePriority": 2,
      "onBeforeMove": "onBeforeMove(pokemon, target, move) {\n        this.add(\"-activate\", pokemon, \"move: Attract\", \"[of] \" + this.effectState.source);\n        if (this.randomChance(1, 2)) {\n          this.add(\"cant\", pokemon, \"Attract\");\n          return false;\n        }\n      }",
      "onEnd": "onEnd(pokemon) {\n        this.add(\"-end\", pokemon, \"Attract\", \"[silent]\");\n      }"
    },
    "onTryImmunity": "onTryImmunity(target, source) {\n      return target.gender === \"M\" && source.gender === \"F\" || target.gender === \"F\" && source.gender === \"M\";\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Cute"
  },
  "aurasphere": {
    "id": "aurasphere",
    "num": 396,
    "accuracy": true,
    "basePower": 80,
    "category": "Special",
    "name": "Aura Sphere",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "distance": 1,
      "metronome": 1,
      "bullet": 1,
      "pulse": 1
    },
    "secondary": null,
    "target": "any",
    "type": "Fighting",
    "contestType": "Beautiful"
  },
  "aurawheel": {
    "id": "aurawheel",
    "num": 783,
    "accuracy": 100,
    "basePower": 110,
    "category": "Physical",
    "name": "Aura Wheel",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "secondary": {
      "chance": 100,
      "self": {
        "boosts": {
          "spe": 1
        }
      }
    },
    "onTry": "onTry(source) {\n      if (source.species.baseSpecies === \"Morpeko\") {\n        return;\n      }\n      this.attrLastMove(\"[still]\");\n      this.add(\"-fail\", source, \"move: Aura Wheel\");\n      this.hint(\"Only a Pokemon whose form is Morpeko or Morpeko-Hangry can use this move.\");\n      return null;\n    }",
    "onModifyType": "onModifyType(move, pokemon) {\n      if (pokemon.species.name === \"Morpeko-Hangry\") {\n        move.type = \"Dark\";\n      } else {\n        move.type = \"Electric\";\n      }\n    }",
    "target": "normal",
    "type": "Electric"
  },
  "aurorabeam": {
    "id": "aurorabeam",
    "num": 62,
    "accuracy": 100,
    "basePower": 65,
    "category": "Special",
    "name": "Aurora Beam",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 10,
      "boosts": {
        "atk": -1
      }
    },
    "target": "normal",
    "type": "Ice",
    "contestType": "Beautiful"
  },
  "auroraveil": {
    "id": "auroraveil",
    "num": 694,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Aurora Veil",
    "pp": 20,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "sideCondition": "auroraveil",
    "onTry": "onTry() {\n      return this.field.isWeather([\"hail\", \"snowscape\"]);\n    }",
    "condition": {
      "duration": 5,
      "durationCallback": "durationCallback(target, source, effect) {\n        if (source?.hasItem(\"lightclay\")) {\n          return 8;\n        }\n        return 5;\n      }",
      "onAnyModifyDamage": "onAnyModifyDamage(damage, source, target, move) {\n        if (target !== source && this.effectState.target.hasAlly(target)) {\n          if (target.side.getSideCondition(\"reflect\") && this.getCategory(move) === \"Physical\" || target.side.getSideCondition(\"lightscreen\") && this.getCategory(move) === \"Special\") {\n            return;\n          }\n          if (!target.getMoveHitData(move).crit && !move.infiltrates) {\n            this.debug(\"Aurora Veil weaken\");\n            if (this.activePerHalf > 1) return this.chainModify([2732, 4096]);\n            return this.chainModify(0.5);\n          }\n        }\n      }",
      "onSideStart": "onSideStart(side) {\n        this.add(\"-sidestart\", side, \"move: Aurora Veil\");\n      }",
      "onSideResidualOrder": 26,
      "onSideResidualSubOrder": 10,
      "onSideEnd": "onSideEnd(side) {\n        this.add(\"-sideend\", side, \"move: Aurora Veil\");\n      }"
    },
    "secondary": null,
    "target": "allySide",
    "type": "Ice",
    "zMove": {
      "boost": {
        "spe": 1
      }
    },
    "contestType": "Beautiful"
  },
  "autotomize": {
    "id": "autotomize",
    "num": 475,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Autotomize",
    "pp": 15,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "onTryHit": "onTryHit(pokemon) {\n      const hasContrary = pokemon.hasAbility(\"contrary\");\n      if (!hasContrary && pokemon.boosts.spe === 6 || hasContrary && pokemon.boosts.spe === -6) {\n        return false;\n      }\n    }",
    "boosts": {
      "spe": 2
    },
    "onHit": "onHit(pokemon) {\n      if (pokemon.weighthg > 1) {\n        pokemon.weighthg = Math.max(1, pokemon.weighthg - 1e3);\n        this.add(\"-start\", pokemon, \"Autotomize\");\n      }\n    }",
    "secondary": null,
    "target": "self",
    "type": "Steel",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Beautiful"
  },
  "avalanche": {
    "id": "avalanche",
    "num": 419,
    "accuracy": 100,
    "basePower": 60,
    "basePowerCallback": "basePowerCallback(pokemon, target, move) {\n      const damagedByTarget = pokemon.attackedBy.some(\n        (p) => p.source === target && p.damage > 0 && p.thisTurn\n      );\n      if (damagedByTarget) {\n        this.debug(`BP doubled for getting hit by ${target}`);\n        return move.basePower * 2;\n      }\n      return move.basePower;\n    }",
    "category": "Physical",
    "name": "Avalanche",
    "pp": 10,
    "priority": -4,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Ice",
    "contestType": "Beautiful"
  },
  "axekick": {
    "id": "axekick",
    "num": 853,
    "accuracy": 90,
    "basePower": 120,
    "category": "Physical",
    "name": "Axe Kick",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "hasCrashDamage": true,
    "onMoveFail": "onMoveFail(target, source, move) {\n      this.damage(source.baseMaxhp / 2, source, source, this.dex.conditions.get(\"High Jump Kick\"));\n    }",
    "secondary": {
      "chance": 30,
      "volatileStatus": "confusion"
    },
    "target": "normal",
    "type": "Fighting"
  },
  "babydolleyes": {
    "id": "babydolleyes",
    "num": 608,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Baby-Doll Eyes",
    "pp": 30,
    "priority": 1,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "allyanim": 1,
      "metronome": 1
    },
    "boosts": {
      "atk": -1
    },
    "secondary": null,
    "target": "normal",
    "type": "Fairy",
    "zMove": {
      "boost": {
        "def": 1
      }
    },
    "contestType": "Cute"
  },
  "baddybad": {
    "id": "baddybad",
    "num": 737,
    "accuracy": 95,
    "basePower": 80,
    "category": "Special",
    "isNonstandard": "LGPE",
    "name": "Baddy Bad",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "self": {
      "sideCondition": "reflect"
    },
    "secondary": null,
    "target": "normal",
    "type": "Dark",
    "contestType": "Clever"
  },
  "banefulbunker": {
    "id": "banefulbunker",
    "num": 661,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Baneful Bunker",
    "pp": 10,
    "priority": 4,
    "flags": {
      "noassist": 1,
      "failcopycat": 1
    },
    "stallingMove": true,
    "volatileStatus": "banefulbunker",
    "onPrepareHit": "onPrepareHit(pokemon) {\n      return !!this.queue.willAct() && this.runEvent(\"StallMove\", pokemon);\n    }",
    "onHit": "onHit(pokemon) {\n      pokemon.addVolatile(\"stall\");\n    }",
    "condition": {
      "duration": 1,
      "onStart": "onStart(target) {\n        this.add(\"-singleturn\", target, \"move: Protect\");\n      }",
      "onTryHitPriority": 3,
      "onTryHit": "onTryHit(target, source, move) {\n        if (!move.flags[\"protect\"]) {\n          if ([\"gmaxoneblow\", \"gmaxrapidflow\"].includes(move.id)) return;\n          if (move.isZ || move.isMax) target.getMoveHitData(move).zBrokeProtect = true;\n          return;\n        }\n        if (move.smartTarget) {\n          move.smartTarget = false;\n        } else {\n          this.add(\"-activate\", target, \"move: Protect\");\n        }\n        const lockedmove = source.getVolatile(\"lockedmove\");\n        if (lockedmove) {\n          if (source.volatiles[\"lockedmove\"].duration === 2) {\n            delete source.volatiles[\"lockedmove\"];\n          }\n        }\n        if (this.checkMoveMakesContact(move, source, target)) {\n          source.trySetStatus(\"psn\", target);\n        }\n        return this.NOT_FAIL;\n      }",
      "onHit": "onHit(target, source, move) {\n        if (move.isZOrMaxPowered && this.checkMoveMakesContact(move, source, target)) {\n          source.trySetStatus(\"psn\", target);\n        }\n      }"
    },
    "secondary": null,
    "target": "self",
    "type": "Poison",
    "zMove": {
      "boost": {
        "def": 1
      }
    },
    "contestType": "Tough"
  },
  "barbbarrage": {
    "id": "barbbarrage",
    "num": 839,
    "accuracy": 100,
    "basePower": 60,
    "category": "Physical",
    "name": "Barb Barrage",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onBasePower": "onBasePower(basePower, pokemon, target) {\n      if (target.status === \"psn\" || target.status === \"tox\") {\n        return this.chainModify(2);\n      }\n    }",
    "secondary": {
      "chance": 50,
      "status": "psn"
    },
    "target": "normal",
    "type": "Poison"
  },
  "barrage": {
    "id": "barrage",
    "num": 140,
    "accuracy": 85,
    "basePower": 15,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Barrage",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "bullet": 1
    },
    "multihit": [
      2,
      5
    ],
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Cute"
  },
  "barrier": {
    "id": "barrier",
    "num": 112,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Barrier",
    "pp": 20,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "boosts": {
      "def": 2
    },
    "secondary": null,
    "target": "self",
    "type": "Psychic",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Cool"
  },
  "batonpass": {
    "id": "batonpass",
    "num": 226,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Baton Pass",
    "pp": 40,
    "priority": 0,
    "flags": {
      "metronome": 1
    },
    "onHit": "onHit(target) {\n      if (!this.canSwitch(target.side) || target.volatiles[\"commanded\"]) {\n        this.attrLastMove(\"[still]\");\n        this.add(\"-fail\", target);\n        return this.NOT_FAIL;\n      }\n    }",
    "self": {
      "onHit": "onHit(source) {\n        source.skipBeforeSwitchOutEventFlag = true;\n      }"
    },
    "selfSwitch": "copyvolatile",
    "secondary": null,
    "target": "self",
    "type": "Normal",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Cute"
  },
  "beakblast": {
    "id": "beakblast",
    "num": 690,
    "accuracy": 100,
    "basePower": 100,
    "category": "Physical",
    "name": "Beak Blast",
    "pp": 15,
    "priority": -3,
    "flags": {
      "protect": 1,
      "failmefirst": 1,
      "nosleeptalk": 1,
      "noassist": 1,
      "failcopycat": 1,
      "failinstruct": 1,
      "bullet": 1
    },
    "priorityChargeCallback": "priorityChargeCallback(pokemon) {\n      pokemon.addVolatile(\"beakblast\");\n    }",
    "condition": {
      "duration": 1,
      "onStart": "onStart(pokemon) {\n        this.add(\"-singleturn\", pokemon, \"move: Beak Blast\");\n      }",
      "onHit": "onHit(target, source, move) {\n        if (this.checkMoveMakesContact(move, source, target)) {\n          source.trySetStatus(\"brn\", target);\n        }\n      }"
    },
    "onAfterMove": "onAfterMove(pokemon) {\n      pokemon.removeVolatile(\"beakblast\");\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Flying",
    "contestType": "Tough"
  },
  "beatup": {
    "id": "beatup",
    "inherit": true,
    "onModifyMove": "onModifyMove(move, pokemon) {\n      pokemon.addVolatile(\"beatup\");\n      move.type = \"???\";\n      move.category = \"Special\";\n      move.allies = pokemon.side.pokemon.filter((ally) => !ally.fainted && !ally.status);\n      move.multihit = move.allies.length;\n    }",
    "condition": {
      "duration": 1,
      "onModifySpAPriority": -101,
      "onModifySpA": "onModifySpA(atk, pokemon, defender, move) {\n        this.event.modifier = 1;\n        return this.dex.species.get(move.allies.shift().set.species).baseStats.atk;\n      }",
      "onFoeModifySpDPriority": -101,
      "onFoeModifySpD": "onFoeModifySpD(def, pokemon) {\n        this.event.modifier = 1;\n        return this.dex.species.get(pokemon.set.species).baseStats.def;\n      }"
    }
  },
  "behemothbash": {
    "id": "behemothbash",
    "num": 782,
    "accuracy": 100,
    "basePower": 100,
    "category": "Physical",
    "name": "Behemoth Bash",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "failcopycat": 1,
      "failmimic": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Steel"
  },
  "behemothblade": {
    "id": "behemothblade",
    "num": 781,
    "accuracy": 100,
    "basePower": 100,
    "category": "Physical",
    "name": "Behemoth Blade",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "failcopycat": 1,
      "failmimic": 1,
      "slicing": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Steel"
  },
  "belch": {
    "id": "belch",
    "num": 562,
    "accuracy": 90,
    "basePower": 120,
    "category": "Special",
    "name": "Belch",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "failmefirst": 1,
      "nosleeptalk": 1,
      "noassist": 1,
      "failcopycat": 1,
      "failmimic": 1,
      "failinstruct": 1
    },
    "onDisableMove": "onDisableMove(pokemon) {\n      if (!pokemon.ateBerry) pokemon.disableMove(\"belch\");\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Poison",
    "contestType": "Tough"
  },
  "bellydrum": {
    "id": "bellydrum",
    "inherit": true,
    "onHit": "onHit(target) {\n      if (target.boosts.atk >= 6) {\n        return false;\n      }\n      if (target.hp <= target.maxhp / 2) {\n        this.boost({ atk: 2 }, null, null, this.dex.conditions.get(\"bellydrum2\"));\n        return false;\n      }\n      this.directDamage(target.maxhp / 2);\n      const originalStage = target.boosts.atk;\n      let currentStage = originalStage;\n      let boosts = 0;\n      let loopStage = 0;\n      while (currentStage < 6) {\n        loopStage = currentStage;\n        currentStage++;\n        if (currentStage < 6) currentStage++;\n        target.boosts.atk = loopStage;\n        if (target.getStat(\"atk\", false, true) < 999) {\n          target.boosts.atk = currentStage;\n          continue;\n        }\n        target.boosts.atk = currentStage - 1;\n        break;\n      }\n      boosts = target.boosts.atk - originalStage;\n      target.boosts.atk = originalStage;\n      this.boost({ atk: boosts });\n    }"
  },
  "bestow": {
    "id": "bestow",
    "num": 516,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Bestow",
    "pp": 15,
    "priority": 0,
    "flags": {
      "mirror": 1,
      "bypasssub": 1,
      "allyanim": 1,
      "noassist": 1,
      "failcopycat": 1
    },
    "onHit": "onHit(target, source, move) {\n      if (target.item) {\n        return false;\n      }\n      const myItem = source.takeItem();\n      if (!myItem) return false;\n      if (!this.singleEvent(\"TakeItem\", myItem, source.itemState, target, source, move, myItem) || !target.setItem(myItem)) {\n        source.item = myItem.id;\n        return false;\n      }\n      this.add(\"-item\", target, myItem.name, \"[from] move: Bestow\", `[of] ${source}`);\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "zMove": {
      "boost": {
        "spe": 2
      }
    },
    "contestType": "Cute"
  },
  "bide": {
    "id": "bide",
    "inherit": true,
    "accuracy": 100,
    "priority": 0,
    "condition": {
      "duration": 3,
      "onLockMove": "bide",
      "onStart": "onStart(pokemon) {\n        this.effectState.totalDamage = 0;\n        this.add(\"-start\", pokemon, \"move: Bide\");\n      }",
      "onDamagePriority": -101,
      "onDamage": "onDamage(damage, target, source, move) {\n        if (!move || move.effectType !== \"Move\" || !source) return;\n        this.effectState.totalDamage += damage;\n        this.effectState.lastDamageSource = source;\n      }",
      "onBeforeMove": "onBeforeMove(pokemon, target, move) {\n        if (this.effectState.duration === 1) {\n          this.add(\"-end\", pokemon, \"move: Bide\");\n          if (!this.effectState.totalDamage) {\n            this.add(\"-fail\", pokemon);\n            return false;\n          }\n          target = this.effectState.lastDamageSource;\n          if (!target) {\n            this.add(\"-fail\", pokemon);\n            return false;\n          }\n          if (!target.isActive) {\n            const possibleTarget = this.getRandomTarget(pokemon, this.dex.moves.get(\"pound\"));\n            if (!possibleTarget) {\n              this.add(\"-miss\", pokemon);\n              return false;\n            }\n            target = possibleTarget;\n          }\n          const moveData = {\n            id: \"bide\",\n            name: \"Bide\",\n            accuracy: 100,\n            damage: this.effectState.totalDamage * 2,\n            category: \"Physical\",\n            priority: 0,\n            flags: { contact: 1, protect: 1 },\n            effectType: \"Move\",\n            type: \"Normal\"\n          };\n          this.actions.tryMoveHit(target, pokemon, moveData);\n          pokemon.removeVolatile(\"bide\");\n          return false;\n        }\n        this.add(\"-activate\", pokemon, \"move: Bide\");\n      }",
      "onMoveAborted": "onMoveAborted(pokemon) {\n        pokemon.removeVolatile(\"bide\");\n      }",
      "onEnd": "onEnd(pokemon) {\n        this.add(\"-end\", pokemon, \"move: Bide\", \"[silent]\");\n      }"
    }
  },
  "bind": {
    "id": "bind",
    "num": 20,
    "accuracy": 85,
    "basePower": 15,
    "category": "Physical",
    "name": "Bind",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "volatileStatus": "partiallytrapped",
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Tough"
  },
  "bite": {
    "id": "bite",
    "num": 44,
    "accuracy": 100,
    "basePower": 60,
    "category": "Physical",
    "name": "Bite",
    "pp": 25,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "bite": 1
    },
    "secondary": {
      "chance": 30,
      "volatileStatus": "flinch"
    },
    "target": "normal",
    "type": "Dark",
    "contestType": "Tough"
  },
  "bitterblade": {
    "id": "bitterblade",
    "num": 891,
    "accuracy": 100,
    "basePower": 90,
    "category": "Physical",
    "name": "Bitter Blade",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "heal": 1,
      "metronome": 1,
      "slicing": 1
    },
    "drain": [
      1,
      2
    ],
    "secondary": null,
    "target": "normal",
    "type": "Fire"
  },
  "bittermalice": {
    "id": "bittermalice",
    "num": 841,
    "accuracy": 100,
    "basePower": 75,
    "category": "Special",
    "name": "Bitter Malice",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 100,
      "boosts": {
        "atk": -1
      }
    },
    "target": "normal",
    "type": "Ghost"
  },
  "blackholeeclipse": {
    "id": "blackholeeclipse",
    "num": 654,
    "accuracy": true,
    "basePower": 1,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Black Hole Eclipse",
    "pp": 1,
    "priority": 0,
    "flags": {},
    "isZ": "darkiniumz",
    "secondary": null,
    "target": "normal",
    "type": "Dark",
    "contestType": "Cool"
  },
  "blastburn": {
    "id": "blastburn",
    "num": 307,
    "accuracy": 90,
    "basePower": 150,
    "category": "Special",
    "name": "Blast Burn",
    "pp": 5,
    "priority": 0,
    "flags": {
      "recharge": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "self": {
      "volatileStatus": "mustrecharge"
    },
    "secondary": null,
    "target": "normal",
    "type": "Fire",
    "contestType": "Beautiful"
  },
  "blazekick": {
    "id": "blazekick",
    "num": 299,
    "accuracy": 90,
    "basePower": 85,
    "category": "Physical",
    "name": "Blaze Kick",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "critRatio": 2,
    "secondary": {
      "chance": 10,
      "status": "brn"
    },
    "target": "normal",
    "type": "Fire",
    "contestType": "Cool"
  },
  "blazingtorque": {
    "id": "blazingtorque",
    "num": 896,
    "accuracy": 100,
    "basePower": 80,
    "category": "Physical",
    "isNonstandard": "Unobtainable",
    "name": "Blazing Torque",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "failencore": 1,
      "failmefirst": 1,
      "nosleeptalk": 1,
      "noassist": 1,
      "failcopycat": 1,
      "failmimic": 1,
      "failinstruct": 1,
      "nosketch": 1
    },
    "secondary": {
      "chance": 30,
      "status": "brn"
    },
    "target": "normal",
    "type": "Fire"
  },
  "bleakwindstorm": {
    "id": "bleakwindstorm",
    "num": 846,
    "accuracy": 80,
    "basePower": 100,
    "category": "Special",
    "name": "Bleakwind Storm",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "wind": 1
    },
    "onModifyMove": "onModifyMove(move, pokemon, target) {\n      if (target && [\"raindance\", \"primordialsea\"].includes(target.effectiveWeather())) {\n        move.accuracy = true;\n      }\n    }",
    "secondary": {
      "chance": 30,
      "boosts": {
        "spe": -1
      }
    },
    "target": "allAdjacentFoes",
    "type": "Flying"
  },
  "blizzard": {
    "id": "blizzard",
    "inherit": true,
    "onModifyMove": "onModifyMove() {\n    }"
  },
  "block": {
    "id": "block",
    "num": 335,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Block",
    "pp": 5,
    "priority": 0,
    "flags": {
      "reflectable": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onHit": "onHit(target, source, move) {\n      return target.addVolatile(\"trapped\", source, move, \"trapper\");\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "zMove": {
      "boost": {
        "def": 1
      }
    },
    "contestType": "Cute"
  },
  "bloodmoon": {
    "id": "bloodmoon",
    "num": 901,
    "accuracy": 100,
    "basePower": 140,
    "category": "Special",
    "name": "Blood Moon",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "cantusetwice": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal"
  },
  "bloomdoom": {
    "id": "bloomdoom",
    "num": 644,
    "accuracy": true,
    "basePower": 1,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Bloom Doom",
    "pp": 1,
    "priority": 0,
    "flags": {},
    "isZ": "grassiumz",
    "secondary": null,
    "target": "normal",
    "type": "Grass",
    "contestType": "Cool"
  },
  "blueflare": {
    "id": "blueflare",
    "num": 551,
    "accuracy": 85,
    "basePower": 130,
    "category": "Special",
    "name": "Blue Flare",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 20,
      "status": "brn"
    },
    "target": "normal",
    "type": "Fire",
    "contestType": "Beautiful"
  },
  "bodypress": {
    "id": "bodypress",
    "num": 776,
    "accuracy": 100,
    "basePower": 80,
    "category": "Physical",
    "name": "Body Press",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1
    },
    "overrideOffensiveStat": "def",
    "secondary": null,
    "target": "normal",
    "type": "Fighting"
  },
  "bodyslam": {
    "id": "bodyslam",
    "num": 34,
    "accuracy": 100,
    "basePower": 85,
    "category": "Physical",
    "name": "Body Slam",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "nonsky": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 30,
      "status": "par"
    },
    "target": "normal",
    "type": "Normal",
    "contestType": "Tough"
  },
  "boltbeak": {
    "id": "boltbeak",
    "num": 754,
    "accuracy": 100,
    "basePower": 85,
    "basePowerCallback": "basePowerCallback(pokemon, target, move) {\n      if (target.newlySwitched || this.queue.willMove(target)) {\n        this.debug(\"Bolt Beak damage boost\");\n        return move.basePower * 2;\n      }\n      this.debug(\"Bolt Beak NOT boosted\");\n      return move.basePower;\n    }",
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Bolt Beak",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Electric"
  },
  "boltstrike": {
    "id": "boltstrike",
    "num": 550,
    "accuracy": 85,
    "basePower": 130,
    "category": "Physical",
    "name": "Bolt Strike",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 20,
      "status": "par"
    },
    "target": "normal",
    "type": "Electric",
    "contestType": "Beautiful"
  },
  "boneclub": {
    "id": "boneclub",
    "num": 125,
    "accuracy": 85,
    "basePower": 65,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Bone Club",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 10,
      "volatileStatus": "flinch"
    },
    "target": "normal",
    "type": "Ground",
    "contestType": "Tough"
  },
  "bonemerang": {
    "id": "bonemerang",
    "num": 155,
    "accuracy": 90,
    "basePower": 50,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Bonemerang",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "multihit": 2,
    "secondary": null,
    "target": "normal",
    "type": "Ground",
    "maxMove": {
      "basePower": 130
    },
    "contestType": "Tough"
  },
  "bonerush": {
    "id": "bonerush",
    "num": 198,
    "accuracy": 90,
    "basePower": 25,
    "category": "Physical",
    "name": "Bone Rush",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "multihit": [
      2,
      5
    ],
    "secondary": null,
    "target": "normal",
    "type": "Ground",
    "zMove": {
      "basePower": 140
    },
    "maxMove": {
      "basePower": 130
    },
    "contestType": "Tough"
  },
  "boomburst": {
    "id": "boomburst",
    "num": 586,
    "accuracy": 100,
    "basePower": 140,
    "category": "Special",
    "name": "Boomburst",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "sound": 1,
      "bypasssub": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "allAdjacent",
    "type": "Normal",
    "contestType": "Tough"
  },
  "bounce": {
    "id": "bounce",
    "num": 340,
    "accuracy": 85,
    "basePower": 85,
    "category": "Physical",
    "name": "Bounce",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "charge": 1,
      "protect": 1,
      "mirror": 1,
      "gravity": 1,
      "distance": 1,
      "metronome": 1,
      "nosleeptalk": 1,
      "noassist": 1,
      "failinstruct": 1
    },
    "onTryMove": "onTryMove(attacker, defender, move) {\n      if (attacker.removeVolatile(move.id)) {\n        return;\n      }\n      this.add(\"-prepare\", attacker, move.name);\n      if (!this.runEvent(\"ChargeMove\", attacker, defender, move)) {\n        return;\n      }\n      attacker.addVolatile(\"twoturnmove\", defender);\n      return null;\n    }",
    "condition": {
      "duration": 2,
      "onInvulnerability": "onInvulnerability(target, source, move) {\n        if ([\"gust\", \"twister\", \"skyuppercut\", \"thunder\", \"hurricane\", \"smackdown\", \"thousandarrows\"].includes(move.id)) {\n          return;\n        }\n        return false;\n      }",
      "onSourceBasePower": "onSourceBasePower(basePower, target, source, move) {\n        if (move.id === \"gust\" || move.id === \"twister\") {\n          return this.chainModify(2);\n        }\n      }"
    },
    "secondary": {
      "chance": 30,
      "status": "par"
    },
    "target": "any",
    "type": "Flying",
    "contestType": "Cute"
  },
  "bouncybubble": {
    "id": "bouncybubble",
    "num": 733,
    "accuracy": 100,
    "basePower": 60,
    "category": "Special",
    "isNonstandard": "LGPE",
    "name": "Bouncy Bubble",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "heal": 1
    },
    "drain": [
      1,
      2
    ],
    "secondary": null,
    "target": "normal",
    "type": "Water",
    "contestType": "Clever"
  },
  "branchpoke": {
    "id": "branchpoke",
    "num": 785,
    "accuracy": 100,
    "basePower": 40,
    "category": "Physical",
    "name": "Branch Poke",
    "pp": 40,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Grass"
  },
  "bravebird": {
    "id": "bravebird",
    "num": 413,
    "accuracy": 100,
    "basePower": 120,
    "category": "Physical",
    "name": "Brave Bird",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "distance": 1,
      "metronome": 1
    },
    "recoil": [
      33,
      100
    ],
    "secondary": null,
    "target": "any",
    "type": "Flying",
    "contestType": "Cool"
  },
  "breakingswipe": {
    "id": "breakingswipe",
    "num": 784,
    "accuracy": 100,
    "basePower": 60,
    "category": "Physical",
    "name": "Breaking Swipe",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1
    },
    "secondary": {
      "chance": 100,
      "boosts": {
        "atk": -1
      }
    },
    "target": "allAdjacentFoes",
    "type": "Dragon"
  },
  "breakneckblitz": {
    "id": "breakneckblitz",
    "num": 622,
    "accuracy": true,
    "basePower": 1,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Breakneck Blitz",
    "pp": 1,
    "priority": 0,
    "flags": {},
    "isZ": "normaliumz",
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Cool"
  },
  "brickbreak": {
    "id": "brickbreak",
    "inherit": true,
    "onTryHit": "onTryHit(target, source) {\n      const foe = source.side.foe;\n      foe.removeSideCondition(\"reflect\");\n      foe.removeSideCondition(\"lightscreen\");\n    }"
  },
  "brine": {
    "id": "brine",
    "num": 362,
    "accuracy": 100,
    "basePower": 65,
    "category": "Special",
    "name": "Brine",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onBasePower": "onBasePower(basePower, pokemon, target) {\n      if (target.hp * 2 <= target.maxhp) {\n        return this.chainModify(2);\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Water",
    "contestType": "Tough"
  },
  "brutalswing": {
    "id": "brutalswing",
    "num": 693,
    "accuracy": 100,
    "basePower": 60,
    "category": "Physical",
    "name": "Brutal Swing",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "allAdjacent",
    "type": "Dark",
    "contestType": "Tough"
  },
  "bubble": {
    "id": "bubble",
    "num": 145,
    "accuracy": 100,
    "basePower": 40,
    "category": "Special",
    "isNonstandard": "Past",
    "name": "Bubble",
    "pp": 30,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 10,
      "boosts": {
        "spe": -1
      }
    },
    "target": "allAdjacentFoes",
    "type": "Water",
    "contestType": "Cute"
  },
  "bubblebeam": {
    "id": "bubblebeam",
    "num": 61,
    "accuracy": 100,
    "basePower": 65,
    "category": "Special",
    "name": "Bubble Beam",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 10,
      "boosts": {
        "spe": -1
      }
    },
    "target": "normal",
    "type": "Water",
    "contestType": "Beautiful"
  },
  "bugbite": {
    "id": "bugbite",
    "num": 450,
    "accuracy": 100,
    "basePower": 60,
    "category": "Physical",
    "name": "Bug Bite",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onHit": "onHit(target, source) {\n      const item = target.getItem();\n      if (source.hp && item.isBerry && target.takeItem(source)) {\n        this.add(\"-enditem\", target, item.name, \"[from] stealeat\", \"[move] Bug Bite\", `[of] ${source}`);\n        if (this.singleEvent(\"Eat\", item, null, source, null, null)) {\n          this.runEvent(\"EatItem\", source, null, null, item);\n          if (item.id === \"leppaberry\") target.staleness = \"external\";\n        }\n        if (item.onEat) source.ateBerry = true;\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Bug",
    "contestType": "Cute"
  },
  "bugbuzz": {
    "id": "bugbuzz",
    "num": 405,
    "accuracy": 100,
    "basePower": 90,
    "category": "Special",
    "name": "Bug Buzz",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "sound": 1,
      "bypasssub": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 10,
      "boosts": {
        "spd": -1
      }
    },
    "target": "normal",
    "type": "Bug",
    "contestType": "Beautiful"
  },
  "bulkup": {
    "id": "bulkup",
    "num": 339,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Bulk Up",
    "pp": 20,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "boosts": {
      "atk": 1,
      "def": 1
    },
    "secondary": null,
    "target": "self",
    "type": "Fighting",
    "zMove": {
      "boost": {
        "atk": 1
      }
    },
    "contestType": "Cool"
  },
  "bulldoze": {
    "id": "bulldoze",
    "num": 523,
    "accuracy": 100,
    "basePower": 60,
    "category": "Physical",
    "name": "Bulldoze",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "nonsky": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 100,
      "boosts": {
        "spe": -1
      }
    },
    "target": "allAdjacent",
    "type": "Ground",
    "contestType": "Tough"
  },
  "bulletpunch": {
    "id": "bulletpunch",
    "num": 418,
    "accuracy": 100,
    "basePower": 40,
    "category": "Physical",
    "name": "Bullet Punch",
    "pp": 30,
    "priority": 1,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "punch": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Steel",
    "contestType": "Tough"
  },
  "bulletseed": {
    "id": "bulletseed",
    "num": 331,
    "accuracy": 100,
    "basePower": 25,
    "category": "Physical",
    "name": "Bullet Seed",
    "pp": 30,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "bullet": 1
    },
    "multihit": [
      2,
      5
    ],
    "secondary": null,
    "target": "normal",
    "type": "Grass",
    "zMove": {
      "basePower": 140
    },
    "maxMove": {
      "basePower": 130
    },
    "contestType": "Cool"
  },
  "burningbulwark": {
    "id": "burningbulwark",
    "num": 908,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Burning Bulwark",
    "pp": 10,
    "priority": 4,
    "flags": {
      "metronome": 1,
      "noassist": 1,
      "failcopycat": 1
    },
    "stallingMove": true,
    "volatileStatus": "burningbulwark",
    "onPrepareHit": "onPrepareHit(pokemon) {\n      return !!this.queue.willAct() && this.runEvent(\"StallMove\", pokemon);\n    }",
    "onHit": "onHit(pokemon) {\n      pokemon.addVolatile(\"stall\");\n    }",
    "condition": {
      "duration": 1,
      "onStart": "onStart(target) {\n        this.add(\"-singleturn\", target, \"move: Protect\");\n      }",
      "onTryHitPriority": 3,
      "onTryHit": "onTryHit(target, source, move) {\n        if (!move.flags[\"protect\"] || move.category === \"Status\") {\n          if ([\"gmaxoneblow\", \"gmaxrapidflow\"].includes(move.id)) return;\n          if (move.isZ || move.isMax) target.getMoveHitData(move).zBrokeProtect = true;\n          return;\n        }\n        if (move.smartTarget) {\n          move.smartTarget = false;\n        } else {\n          this.add(\"-activate\", target, \"move: Protect\");\n        }\n        const lockedmove = source.getVolatile(\"lockedmove\");\n        if (lockedmove) {\n          if (source.volatiles[\"lockedmove\"].duration === 2) {\n            delete source.volatiles[\"lockedmove\"];\n          }\n        }\n        if (this.checkMoveMakesContact(move, source, target)) {\n          source.trySetStatus(\"brn\", target);\n        }\n        return this.NOT_FAIL;\n      }",
      "onHit": "onHit(target, source, move) {\n        if (move.isZOrMaxPowered && this.checkMoveMakesContact(move, source, target)) {\n          source.trySetStatus(\"brn\", target);\n        }\n      }"
    },
    "secondary": null,
    "target": "self",
    "type": "Fire"
  },
  "burningjealousy": {
    "id": "burningjealousy",
    "num": 807,
    "accuracy": 100,
    "basePower": 70,
    "category": "Special",
    "name": "Burning Jealousy",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 100,
      "onHit": "onHit(target, source, move) {\n        if (target?.statsRaisedThisTurn) {\n          target.trySetStatus(\"brn\", source, move);\n        }\n      }"
    },
    "target": "allAdjacentFoes",
    "type": "Fire",
    "contestType": "Tough"
  },
  "burnup": {
    "id": "burnup",
    "num": 682,
    "accuracy": 100,
    "basePower": 130,
    "category": "Special",
    "isNonstandard": "Unobtainable",
    "name": "Burn Up",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "defrost": 1,
      "metronome": 1
    },
    "onTryMove": "onTryMove(pokemon, target, move) {\n      if (pokemon.hasType(\"Fire\")) return;\n      this.add(\"-fail\", pokemon, \"move: Burn Up\");\n      this.attrLastMove(\"[still]\");\n      return null;\n    }",
    "self": {
      "onHit": "onHit(pokemon) {\n        pokemon.setType(pokemon.getTypes(true).map((type) => type === \"Fire\" ? \"???\" : type));\n        this.add(\"-start\", pokemon, \"typechange\", pokemon.getTypes().join(\"/\"), \"[from] move: Burn Up\");\n      }"
    },
    "secondary": null,
    "target": "normal",
    "type": "Fire",
    "contestType": "Clever"
  },
  "buzzybuzz": {
    "id": "buzzybuzz",
    "num": 734,
    "accuracy": 100,
    "basePower": 60,
    "category": "Special",
    "isNonstandard": "LGPE",
    "name": "Buzzy Buzz",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "secondary": {
      "chance": 100,
      "status": "par"
    },
    "target": "normal",
    "type": "Electric",
    "contestType": "Clever"
  },
  "calmmind": {
    "id": "calmmind",
    "num": 347,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Calm Mind",
    "pp": 20,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "boosts": {
      "spa": 1,
      "spd": 1
    },
    "secondary": null,
    "target": "self",
    "type": "Psychic",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Clever"
  },
  "camouflage": {
    "id": "camouflage",
    "num": 293,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Camouflage",
    "pp": 20,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "onHit": "onHit(target) {\n      let newType = \"Normal\";\n      if (this.field.isTerrain(\"electricterrain\")) {\n        newType = \"Electric\";\n      } else if (this.field.isTerrain(\"grassyterrain\")) {\n        newType = \"Grass\";\n      } else if (this.field.isTerrain(\"mistyterrain\")) {\n        newType = \"Fairy\";\n      } else if (this.field.isTerrain(\"psychicterrain\")) {\n        newType = \"Psychic\";\n      }\n      if (target.getTypes().join() === newType || !target.setType(newType)) return false;\n      this.add(\"-start\", target, \"typechange\", newType);\n    }",
    "secondary": null,
    "target": "self",
    "type": "Normal",
    "zMove": {
      "boost": {
        "evasion": 1
      }
    },
    "contestType": "Clever"
  },
  "captivate": {
    "id": "captivate",
    "num": 445,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Captivate",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onTryImmunity": "onTryImmunity(pokemon, source) {\n      return pokemon.gender === \"M\" && source.gender === \"F\" || pokemon.gender === \"F\" && source.gender === \"M\";\n    }",
    "boosts": {
      "spa": -2
    },
    "secondary": null,
    "target": "allAdjacentFoes",
    "type": "Normal",
    "zMove": {
      "boost": {
        "spd": 2
      }
    },
    "contestType": "Cute"
  },
  "catastropika": {
    "id": "catastropika",
    "num": 658,
    "accuracy": true,
    "basePower": 210,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Catastropika",
    "pp": 1,
    "priority": 0,
    "flags": {
      "contact": 1
    },
    "isZ": "pikaniumz",
    "secondary": null,
    "target": "normal",
    "type": "Electric",
    "contestType": "Cool"
  },
  "ceaselessedge": {
    "id": "ceaselessedge",
    "num": 845,
    "accuracy": 90,
    "basePower": 65,
    "category": "Physical",
    "name": "Ceaseless Edge",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "slicing": 1
    },
    "onAfterHit": "onAfterHit(target, source, move) {\n      if (!move.hasSheerForce && source.hp) {\n        for (const side of source.side.foeSidesWithConditions()) {\n          side.addSideCondition(\"spikes\");\n        }\n      }\n    }",
    "onAfterSubDamage": "onAfterSubDamage(damage, target, source, move) {\n      if (!move.hasSheerForce && source.hp) {\n        for (const side of source.side.foeSidesWithConditions()) {\n          side.addSideCondition(\"spikes\");\n        }\n      }\n    }",
    "secondary": {},
    "target": "normal",
    "type": "Dark"
  },
  "celebrate": {
    "id": "celebrate",
    "num": 606,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Celebrate",
    "pp": 40,
    "priority": 0,
    "flags": {
      "nosleeptalk": 1,
      "noassist": 1,
      "failcopycat": 1,
      "failmimic": 1,
      "failinstruct": 1
    },
    "onTryHit": "onTryHit(target, source) {\n      this.add(\"-activate\", target, \"move: Celebrate\");\n    }",
    "secondary": null,
    "target": "self",
    "type": "Normal",
    "zMove": {
      "boost": {
        "atk": 1,
        "def": 1,
        "spa": 1,
        "spd": 1,
        "spe": 1
      }
    },
    "contestType": "Cute"
  },
  "charge": {
    "id": "charge",
    "inherit": true,
    "boosts": null
  },
  "chargebeam": {
    "id": "chargebeam",
    "num": 451,
    "accuracy": 90,
    "basePower": 50,
    "category": "Special",
    "name": "Charge Beam",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 70,
      "self": {
        "boosts": {
          "spa": 1
        }
      }
    },
    "target": "normal",
    "type": "Electric",
    "contestType": "Beautiful"
  },
  "charm": {
    "id": "charm",
    "num": 204,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Charm",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "allyanim": 1,
      "metronome": 1
    },
    "boosts": {
      "atk": -2
    },
    "secondary": null,
    "target": "normal",
    "type": "Fairy",
    "zMove": {
      "boost": {
        "def": 1
      }
    },
    "contestType": "Cute"
  },
  "chatter": {
    "id": "chatter",
    "num": 448,
    "accuracy": 100,
    "basePower": 65,
    "category": "Special",
    "isNonstandard": "Past",
    "name": "Chatter",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "sound": 1,
      "distance": 1,
      "bypasssub": 1,
      "nosleeptalk": 1,
      "noassist": 1,
      "failcopycat": 1,
      "failmimic": 1,
      "failinstruct": 1
    },
    "secondary": {
      "chance": 100,
      "volatileStatus": "confusion"
    },
    "target": "any",
    "type": "Flying",
    "contestType": "Cute"
  },
  "chillingwater": {
    "id": "chillingwater",
    "num": 886,
    "accuracy": 100,
    "basePower": 50,
    "category": "Special",
    "name": "Chilling Water",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "secondary": {
      "chance": 100,
      "boosts": {
        "atk": -1
      }
    },
    "target": "normal",
    "type": "Water",
    "contestType": "Beautiful"
  },
  "chillyreception": {
    "id": "chillyreception",
    "num": 881,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Chilly Reception",
    "pp": 10,
    "priority": 0,
    "flags": {},
    "priorityChargeCallback": "priorityChargeCallback(source) {\n      source.addVolatile(\"chillyreception\");\n    }",
    "weather": "snowscape",
    "selfSwitch": true,
    "secondary": null,
    "condition": {
      "duration": 1,
      "onBeforeMovePriority": 100,
      "onBeforeMove": "onBeforeMove(source, target, move) {\n        if (move.id !== \"chillyreception\") return;\n        this.add(\"-prepare\", source, \"Chilly Reception\", \"[premajor]\");\n      }"
    },
    "target": "all",
    "type": "Ice"
  },
  "chipaway": {
    "id": "chipaway",
    "num": 498,
    "accuracy": 100,
    "basePower": 70,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Chip Away",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "ignoreDefensive": true,
    "ignoreEvasion": true,
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Tough"
  },
  "chloroblast": {
    "id": "chloroblast",
    "num": 835,
    "accuracy": 95,
    "basePower": 150,
    "category": "Special",
    "name": "Chloroblast",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Grass"
  },
  "circlethrow": {
    "id": "circlethrow",
    "num": 509,
    "accuracy": 90,
    "basePower": 60,
    "category": "Physical",
    "name": "Circle Throw",
    "pp": 10,
    "priority": -6,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "noassist": 1,
      "failcopycat": 1
    },
    "forceSwitch": true,
    "target": "normal",
    "type": "Fighting",
    "contestType": "Cool"
  },
  "clamp": {
    "id": "clamp",
    "num": 128,
    "accuracy": 85,
    "basePower": 35,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Clamp",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "volatileStatus": "partiallytrapped",
    "secondary": null,
    "target": "normal",
    "type": "Water",
    "contestType": "Tough"
  },
  "clangingscales": {
    "id": "clangingscales",
    "num": 691,
    "accuracy": 100,
    "basePower": 110,
    "category": "Special",
    "name": "Clanging Scales",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "sound": 1,
      "bypasssub": 1,
      "metronome": 1
    },
    "selfBoost": {
      "boosts": {
        "def": -1
      }
    },
    "secondary": null,
    "target": "allAdjacentFoes",
    "type": "Dragon",
    "contestType": "Tough"
  },
  "clangoroussoul": {
    "id": "clangoroussoul",
    "num": 775,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Clangorous Soul",
    "pp": 5,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "sound": 1,
      "dance": 1
    },
    "onTry": "onTry(source) {\n      if (source.hp <= source.maxhp * 33 / 100 || source.maxhp === 1) return false;\n    }",
    "onTryHit": "onTryHit(pokemon, target, move) {\n      if (!this.boost(move.boosts)) return null;\n      delete move.boosts;\n    }",
    "onHit": "onHit(pokemon) {\n      this.directDamage(pokemon.maxhp * 33 / 100);\n    }",
    "boosts": {
      "atk": 1,
      "def": 1,
      "spa": 1,
      "spd": 1,
      "spe": 1
    },
    "secondary": null,
    "target": "self",
    "type": "Dragon"
  },
  "clangoroussoulblaze": {
    "id": "clangoroussoulblaze",
    "num": 728,
    "accuracy": true,
    "basePower": 185,
    "category": "Special",
    "isNonstandard": "Past",
    "name": "Clangorous Soulblaze",
    "pp": 1,
    "priority": 0,
    "flags": {
      "sound": 1,
      "bypasssub": 1
    },
    "selfBoost": {
      "boosts": {
        "atk": 1,
        "def": 1,
        "spa": 1,
        "spd": 1,
        "spe": 1
      }
    },
    "isZ": "kommoniumz",
    "secondary": {},
    "target": "allAdjacentFoes",
    "type": "Dragon",
    "contestType": "Cool"
  },
  "clearsmog": {
    "id": "clearsmog",
    "num": 499,
    "accuracy": true,
    "basePower": 50,
    "category": "Special",
    "name": "Clear Smog",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onHit": "onHit(target) {\n      target.clearBoosts();\n      this.add(\"-clearboost\", target);\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Poison",
    "contestType": "Beautiful"
  },
  "closecombat": {
    "id": "closecombat",
    "num": 370,
    "accuracy": 100,
    "basePower": 120,
    "category": "Physical",
    "name": "Close Combat",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "self": {
      "boosts": {
        "def": -1,
        "spd": -1
      }
    },
    "secondary": null,
    "target": "normal",
    "type": "Fighting",
    "contestType": "Tough"
  },
  "coaching": {
    "id": "coaching",
    "num": 811,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Coaching",
    "pp": 10,
    "priority": 0,
    "flags": {
      "bypasssub": 1,
      "allyanim": 1,
      "metronome": 1
    },
    "secondary": null,
    "boosts": {
      "atk": 1,
      "def": 1
    },
    "target": "adjacentAlly",
    "type": "Fighting"
  },
  "coil": {
    "id": "coil",
    "num": 489,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Coil",
    "pp": 20,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "boosts": {
      "atk": 1,
      "def": 1,
      "accuracy": 1
    },
    "secondary": null,
    "target": "self",
    "type": "Poison",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Tough"
  },
  "collisioncourse": {
    "id": "collisioncourse",
    "num": 878,
    "accuracy": 100,
    "basePower": 100,
    "category": "Physical",
    "name": "Collision Course",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1
    },
    "onBasePower": "onBasePower(basePower, source, target, move) {\n      if (target.runEffectiveness(move) > 0) {\n        this.debug(`collision course super effective buff`);\n        return this.chainModify([5461, 4096]);\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Fighting",
    "contestType": "Tough"
  },
  "combattorque": {
    "id": "combattorque",
    "num": 899,
    "accuracy": 100,
    "basePower": 100,
    "category": "Physical",
    "isNonstandard": "Unobtainable",
    "name": "Combat Torque",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "failencore": 1,
      "failmefirst": 1,
      "nosleeptalk": 1,
      "noassist": 1,
      "failcopycat": 1,
      "failmimic": 1,
      "failinstruct": 1,
      "nosketch": 1
    },
    "secondary": {
      "chance": 30,
      "status": "par"
    },
    "target": "normal",
    "type": "Fighting"
  },
  "cometpunch": {
    "id": "cometpunch",
    "num": 4,
    "accuracy": 85,
    "basePower": 18,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Comet Punch",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "punch": 1,
      "metronome": 1
    },
    "multihit": [
      2,
      5
    ],
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "maxMove": {
      "basePower": 100
    },
    "contestType": "Tough"
  },
  "comeuppance": {
    "id": "comeuppance",
    "num": 894,
    "accuracy": 100,
    "basePower": 0,
    "damageCallback": "damageCallback(pokemon) {\n      const lastDamagedBy = pokemon.getLastDamagedBy(true);\n      if (lastDamagedBy !== void 0) {\n        return lastDamagedBy.damage * 1.5 || 1;\n      }\n      return 0;\n    }",
    "category": "Physical",
    "name": "Comeuppance",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "failmefirst": 1
    },
    "onTry": "onTry(source) {\n      const lastDamagedBy = source.getLastDamagedBy(true);\n      if (!lastDamagedBy?.thisTurn) return false;\n    }",
    "onModifyTarget": "onModifyTarget(targetRelayVar, source, target, move) {\n      const lastDamagedBy = source.getLastDamagedBy(true);\n      if (lastDamagedBy) {\n        targetRelayVar.target = this.getAtSlot(lastDamagedBy.slot);\n      }\n    }",
    "secondary": null,
    "target": "scripted",
    "type": "Dark",
    "contestType": "Cool"
  },
  "confide": {
    "id": "confide",
    "num": 590,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Confide",
    "pp": 20,
    "priority": 0,
    "flags": {
      "reflectable": 1,
      "mirror": 1,
      "sound": 1,
      "bypasssub": 1,
      "metronome": 1
    },
    "boosts": {
      "spa": -1
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "zMove": {
      "boost": {
        "spd": 1
      }
    },
    "contestType": "Cute"
  },
  "confuseray": {
    "id": "confuseray",
    "num": 109,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Confuse Ray",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "metronome": 1
    },
    "volatileStatus": "confusion",
    "secondary": null,
    "target": "normal",
    "type": "Ghost",
    "zMove": {
      "boost": {
        "spa": 1
      }
    },
    "contestType": "Clever"
  },
  "confusion": {
    "id": "confusion",
    "num": 93,
    "accuracy": 100,
    "basePower": 50,
    "category": "Special",
    "name": "Confusion",
    "pp": 25,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 10,
      "volatileStatus": "confusion"
    },
    "target": "normal",
    "type": "Psychic",
    "contestType": "Clever"
  },
  "constrict": {
    "id": "constrict",
    "num": 132,
    "accuracy": 100,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Constrict",
    "pp": 35,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 10,
      "boosts": {
        "spe": -1
      }
    },
    "target": "normal",
    "type": "Normal",
    "contestType": "Tough"
  },
  "continentalcrush": {
    "id": "continentalcrush",
    "num": 632,
    "accuracy": true,
    "basePower": 1,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Continental Crush",
    "pp": 1,
    "priority": 0,
    "flags": {},
    "isZ": "rockiumz",
    "secondary": null,
    "target": "normal",
    "type": "Rock",
    "contestType": "Cool"
  },
  "conversion": {
    "id": "conversion",
    "inherit": true,
    "onHit": "onHit(target) {\n      const possibleTypes = target.moveSlots.map((moveSlot) => {\n        const move = this.dex.moves.get(moveSlot.id);\n        if (move.id !== \"curse\" && !target.hasType(move.type)) {\n          return move.type;\n        }\n        return \"\";\n      }).filter((type2) => type2);\n      if (!possibleTypes.length) {\n        return false;\n      }\n      const type = this.sample(possibleTypes);\n      if (!target.setType(type)) return false;\n      this.add(\"-start\", target, \"typechange\", type);\n    }"
  },
  "conversion2": {
    "id": "conversion2",
    "num": 176,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Conversion 2",
    "pp": 30,
    "priority": 0,
    "flags": {
      "bypasssub": 1,
      "metronome": 1
    },
    "onHit": "onHit(target, source) {\n      if (!target.lastMoveUsed) {\n        return false;\n      }\n      const possibleTypes = [];\n      const attackType = target.lastMoveUsed.type;\n      for (const typeName of this.dex.types.names()) {\n        if (source.hasType(typeName)) continue;\n        const typeCheck = this.dex.types.get(typeName).damageTaken[attackType];\n        if (typeCheck === 2 || typeCheck === 3) {\n          possibleTypes.push(typeName);\n        }\n      }\n      if (!possibleTypes.length) {\n        return false;\n      }\n      const randomType = this.sample(possibleTypes);\n      if (!source.setType(randomType)) return false;\n      this.add(\"-start\", source, \"typechange\", randomType);\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "zMove": {
      "effect": "heal"
    },
    "contestType": "Beautiful"
  },
  "copycat": {
    "id": "copycat",
    "num": 383,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Copycat",
    "pp": 20,
    "priority": 0,
    "flags": {
      "failencore": 1,
      "nosleeptalk": 1,
      "noassist": 1,
      "failcopycat": 1,
      "failmimic": 1,
      "failinstruct": 1
    },
    "onHit": "onHit(pokemon) {\n      let move = this.lastMove;\n      if (!move) return;\n      if (move.isMax && move.baseMove) move = this.dex.moves.get(move.baseMove);\n      if (move.flags[\"failcopycat\"] || move.isZ || move.isMax) {\n        return false;\n      }\n      this.actions.useMove(move.id, pokemon);\n    }",
    "callsMove": true,
    "secondary": null,
    "target": "self",
    "type": "Normal",
    "zMove": {
      "boost": {
        "accuracy": 1
      }
    },
    "contestType": "Cute"
  },
  "coreenforcer": {
    "id": "coreenforcer",
    "num": 687,
    "accuracy": 100,
    "basePower": 100,
    "category": "Special",
    "isNonstandard": "Past",
    "name": "Core Enforcer",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onHit": "onHit(target) {\n      if (target.getAbility().flags[\"cantsuppress\"]) return;\n      if (target.newlySwitched || this.queue.willMove(target)) return;\n      target.addVolatile(\"gastroacid\");\n    }",
    "onAfterSubDamage": "onAfterSubDamage(damage, target) {\n      if (target.getAbility().flags[\"cantsuppress\"]) return;\n      if (target.newlySwitched || this.queue.willMove(target)) return;\n      target.addVolatile(\"gastroacid\");\n    }",
    "secondary": null,
    "target": "allAdjacentFoes",
    "type": "Dragon",
    "zMove": {
      "basePower": 140
    },
    "contestType": "Tough"
  },
  "corkscrewcrash": {
    "id": "corkscrewcrash",
    "num": 638,
    "accuracy": true,
    "basePower": 1,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Corkscrew Crash",
    "pp": 1,
    "priority": 0,
    "flags": {},
    "isZ": "steeliumz",
    "secondary": null,
    "target": "normal",
    "type": "Steel",
    "contestType": "Cool"
  },
  "corrosivegas": {
    "id": "corrosivegas",
    "num": 810,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Unobtainable",
    "name": "Corrosive Gas",
    "pp": 40,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "allyanim": 1,
      "metronome": 1
    },
    "onHit": "onHit(target, source) {\n      const item = target.takeItem(source);\n      if (item) {\n        this.add(\"-enditem\", target, item.name, \"[from] move: Corrosive Gas\", `[of] ${source}`);\n      } else {\n        this.add(\"-fail\", target, \"move: Corrosive Gas\");\n      }\n    }",
    "secondary": null,
    "target": "allAdjacent",
    "type": "Poison"
  },
  "cosmicpower": {
    "id": "cosmicpower",
    "num": 322,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Cosmic Power",
    "pp": 20,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "boosts": {
      "def": 1,
      "spd": 1
    },
    "secondary": null,
    "target": "self",
    "type": "Psychic",
    "zMove": {
      "boost": {
        "spd": 1
      }
    },
    "contestType": "Beautiful"
  },
  "cottonguard": {
    "id": "cottonguard",
    "num": 538,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Cotton Guard",
    "pp": 10,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "boosts": {
      "def": 3
    },
    "secondary": null,
    "target": "self",
    "type": "Grass",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Cute"
  },
  "cottonspore": {
    "id": "cottonspore",
    "num": 178,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Cotton Spore",
    "pp": 40,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "metronome": 1,
      "powder": 1
    },
    "boosts": {
      "spe": -2
    },
    "secondary": null,
    "target": "allAdjacentFoes",
    "type": "Grass",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Beautiful"
  },
  "counter": {
    "id": "counter",
    "inherit": true,
    "condition": {
      "duration": 1,
      "noCopy": true,
      "onStart": "onStart(target, source, move) {\n        this.effectState.slot = null;\n        this.effectState.damage = 0;\n      }",
      "onRedirectTargetPriority": -1,
      "onRedirectTarget": "onRedirectTarget(target, source, source2) {\n        if (source !== this.effectState.target || !this.effectState.slot) return;\n        return this.getAtSlot(this.effectState.slot);\n      }",
      "onDamagePriority": -101,
      "onDamage": "onDamage(damage, target, source, effect) {\n        if (effect.effectType === \"Move\" && !source.isAlly(target) && (effect.category === \"Physical\" || effect.id === \"hiddenpower\")) {\n          this.effectState.slot = source.getSlot();\n          this.effectState.damage = 2 * damage;\n        }\n      }"
    }
  },
  "courtchange": {
    "id": "courtchange",
    "num": 756,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Court Change",
    "pp": 10,
    "priority": 0,
    "flags": {
      "mirror": 1,
      "metronome": 1
    },
    "onHitField": "onHitField(target, source) {\n      const sideConditions = [\n        \"mist\",\n        \"lightscreen\",\n        \"reflect\",\n        \"spikes\",\n        \"safeguard\",\n        \"tailwind\",\n        \"toxicspikes\",\n        \"stealthrock\",\n        \"waterpledge\",\n        \"firepledge\",\n        \"grasspledge\",\n        \"stickyweb\",\n        \"auroraveil\",\n        \"luckychant\",\n        \"gmaxsteelsurge\",\n        \"gmaxcannonade\",\n        \"gmaxvinelash\",\n        \"gmaxwildfire\",\n        \"gmaxvolcalith\"\n      ];\n      let success = false;\n      if (this.gameType === \"freeforall\") {\n        const offset = this.random(3) + 1;\n        const sides = [this.sides[0], this.sides[2], this.sides[1], this.sides[3]];\n        const temp = { 0: {}, 1: {}, 2: {}, 3: {} };\n        for (const side of sides) {\n          for (const id in side.sideConditions) {\n            if (!sideConditions.includes(id)) continue;\n            temp[side.n][id] = side.sideConditions[id];\n            delete side.sideConditions[id];\n            const effectName = this.dex.conditions.get(id).name;\n            this.add(\"-sideend\", side, effectName, \"[silent]\");\n            success = true;\n          }\n        }\n        for (let i = 0; i < 4; i++) {\n          const sourceSideConditions = temp[sides[i].n];\n          const targetSide = sides[(i + offset) % 4];\n          for (const id in sourceSideConditions) {\n            targetSide.sideConditions[id] = sourceSideConditions[id];\n            targetSide.sideConditions[id].target = targetSide;\n            const effectName = this.dex.conditions.get(id).name;\n            let layers = sourceSideConditions[id].layers || 1;\n            for (; layers > 0; layers--) this.add(\"-sidestart\", targetSide, effectName, \"[silent]\");\n          }\n        }\n      } else {\n        const sourceSideConditions = source.side.sideConditions;\n        const targetSideConditions = source.side.foe.sideConditions;\n        const sourceTemp = {};\n        const targetTemp = {};\n        for (const id in sourceSideConditions) {\n          if (!sideConditions.includes(id)) continue;\n          sourceTemp[id] = sourceSideConditions[id];\n          delete sourceSideConditions[id];\n          success = true;\n        }\n        for (const id in targetSideConditions) {\n          if (!sideConditions.includes(id)) continue;\n          targetTemp[id] = targetSideConditions[id];\n          delete targetSideConditions[id];\n          success = true;\n        }\n        for (const id in sourceTemp) {\n          targetSideConditions[id] = sourceTemp[id];\n          targetSideConditions[id].target = source.side.foe;\n        }\n        for (const id in targetTemp) {\n          sourceSideConditions[id] = targetTemp[id];\n          sourceSideConditions[id].target = source.side;\n        }\n        this.add(\"-swapsideconditions\");\n      }\n      if (!success) return false;\n      this.add(\"-activate\", source, \"move: Court Change\");\n    }",
    "secondary": null,
    "target": "all",
    "type": "Normal"
  },
  "covet": {
    "id": "covet",
    "inherit": true,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "noassist": 1
    }
  },
  "crabhammer": {
    "id": "crabhammer",
    "inherit": true,
    "critRatio": 3
  },
  "craftyshield": {
    "id": "craftyshield",
    "num": 578,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Crafty Shield",
    "pp": 10,
    "priority": 3,
    "flags": {},
    "sideCondition": "craftyshield",
    "onTry": "onTry() {\n      return !!this.queue.willAct();\n    }",
    "condition": {
      "duration": 1,
      "onSideStart": "onSideStart(target, source) {\n        this.add(\"-singleturn\", source, \"Crafty Shield\");\n      }",
      "onTryHitPriority": 3,
      "onTryHit": "onTryHit(target, source, move) {\n        if ([\"self\", \"all\"].includes(move.target) || move.category !== \"Status\") return;\n        this.add(\"-activate\", target, \"move: Crafty Shield\");\n        return this.NOT_FAIL;\n      }"
    },
    "secondary": null,
    "target": "allySide",
    "type": "Fairy",
    "zMove": {
      "boost": {
        "spd": 1
      }
    },
    "contestType": "Clever"
  },
  "crosschop": {
    "id": "crosschop",
    "inherit": true,
    "critRatio": 3
  },
  "crosspoison": {
    "id": "crosspoison",
    "num": 440,
    "accuracy": 100,
    "basePower": 70,
    "category": "Physical",
    "name": "Cross Poison",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "slicing": 1
    },
    "secondary": {
      "chance": 10,
      "status": "psn"
    },
    "critRatio": 2,
    "target": "normal",
    "type": "Poison",
    "contestType": "Cool"
  },
  "crunch": {
    "id": "crunch",
    "inherit": true,
    "secondary": {
      "chance": 20,
      "boosts": {
        "spd": -1
      }
    }
  },
  "crushclaw": {
    "id": "crushclaw",
    "num": 306,
    "accuracy": 95,
    "basePower": 75,
    "category": "Physical",
    "name": "Crush Claw",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 50,
      "boosts": {
        "def": -1
      }
    },
    "target": "normal",
    "type": "Normal",
    "contestType": "Cool"
  },
  "crushgrip": {
    "id": "crushgrip",
    "num": 462,
    "accuracy": 100,
    "basePower": 0,
    "basePowerCallback": "basePowerCallback(pokemon, target) {\n      const hp = target.hp;\n      const maxHP = target.maxhp;\n      const bp = Math.floor(Math.floor((120 * (100 * Math.floor(hp * 4096 / maxHP)) + 2048 - 1) / 4096) / 100) || 1;\n      this.debug(`BP for ${hp}/${maxHP} HP: ${bp}`);\n      return bp;\n    }",
    "category": "Physical",
    "name": "Crush Grip",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "zMove": {
      "basePower": 190
    },
    "maxMove": {
      "basePower": 140
    },
    "contestType": "Tough"
  },
  "curse": {
    "id": "curse",
    "inherit": true,
    "condition": {
      "onStart": "onStart(pokemon, source) {\n        this.add(\"-start\", pokemon, \"Curse\", `[of] ${source}`);\n      }",
      "onAfterMoveSelf": "onAfterMoveSelf(pokemon) {\n        this.damage(pokemon.baseMaxhp / 4);\n      }"
    }
  },
  "cut": {
    "id": "cut",
    "num": 15,
    "accuracy": 95,
    "basePower": 50,
    "category": "Physical",
    "isNonstandard": "Unobtainable",
    "name": "Cut",
    "pp": 30,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "slicing": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Cool"
  },
  "darkestlariat": {
    "id": "darkestlariat",
    "num": 663,
    "accuracy": 100,
    "basePower": 85,
    "category": "Physical",
    "name": "Darkest Lariat",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "ignoreEvasion": true,
    "ignoreDefensive": true,
    "secondary": null,
    "target": "normal",
    "type": "Dark",
    "contestType": "Cool"
  },
  "darkpulse": {
    "id": "darkpulse",
    "num": 399,
    "accuracy": 100,
    "basePower": 80,
    "category": "Special",
    "name": "Dark Pulse",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "distance": 1,
      "metronome": 1,
      "pulse": 1
    },
    "secondary": {
      "chance": 20,
      "volatileStatus": "flinch"
    },
    "target": "any",
    "type": "Dark",
    "contestType": "Cool"
  },
  "darkvoid": {
    "id": "darkvoid",
    "num": 464,
    "accuracy": 50,
    "basePower": 0,
    "category": "Status",
    "name": "Dark Void",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "metronome": 1,
      "nosketch": 1
    },
    "status": "slp",
    "onTry": "onTry(source, target, move) {\n      if (source.species.name === \"Darkrai\" || move.hasBounced) {\n        return;\n      }\n      this.add(\"-fail\", source, \"move: Dark Void\");\n      this.hint(\"Only a Pokemon whose form is Darkrai can use this move.\");\n      return null;\n    }",
    "secondary": null,
    "target": "allAdjacentFoes",
    "type": "Dark",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Clever"
  },
  "dazzlinggleam": {
    "id": "dazzlinggleam",
    "num": 605,
    "accuracy": 100,
    "basePower": 80,
    "category": "Special",
    "name": "Dazzling Gleam",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "allAdjacentFoes",
    "type": "Fairy",
    "contestType": "Beautiful"
  },
  "decorate": {
    "id": "decorate",
    "num": 777,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Decorate",
    "pp": 15,
    "priority": 0,
    "flags": {
      "allyanim": 1
    },
    "secondary": null,
    "boosts": {
      "atk": 2,
      "spa": 2
    },
    "target": "normal",
    "type": "Fairy"
  },
  "defendorder": {
    "id": "defendorder",
    "num": 455,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Defend Order",
    "pp": 10,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "boosts": {
      "def": 1,
      "spd": 1
    },
    "secondary": null,
    "target": "self",
    "type": "Bug",
    "zMove": {
      "boost": {
        "def": 1
      }
    },
    "contestType": "Clever"
  },
  "defensecurl": {
    "id": "defensecurl",
    "num": 111,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Defense Curl",
    "pp": 40,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "boosts": {
      "def": 1
    },
    "volatileStatus": "defensecurl",
    "condition": {
      "noCopy": true,
      "onRestart": "() => null"
    },
    "secondary": null,
    "target": "self",
    "type": "Normal",
    "zMove": {
      "boost": {
        "accuracy": 1
      }
    },
    "contestType": "Cute"
  },
  "defog": {
    "id": "defog",
    "num": 432,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Defog",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "bypasssub": 1,
      "metronome": 1
    },
    "onHit": "onHit(target, source, move) {\n      let success = false;\n      if (!target.volatiles[\"substitute\"] || move.infiltrates) success = !!this.boost({ evasion: -1 });\n      const removeAll = [\"spikes\", \"toxicspikes\", \"stealthrock\", \"stickyweb\", \"gmaxsteelsurge\"];\n      const removeTarget = [\"reflect\", \"lightscreen\", \"auroraveil\", \"safeguard\", \"mist\", ...removeAll];\n      for (const targetCondition of removeTarget) {\n        if (target.side.removeSideCondition(targetCondition)) {\n          if (!removeAll.includes(targetCondition)) continue;\n          this.add(\"-sideend\", target.side, this.dex.conditions.get(targetCondition).name, \"[from] move: Defog\", `[of] ${source}`);\n          success = true;\n        }\n      }\n      for (const sideCondition of removeAll) {\n        if (source.side.removeSideCondition(sideCondition)) {\n          this.add(\"-sideend\", source.side, this.dex.conditions.get(sideCondition).name, \"[from] move: Defog\", `[of] ${source}`);\n          success = true;\n        }\n      }\n      this.field.clearTerrain();\n      return success;\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Flying",
    "zMove": {
      "boost": {
        "accuracy": 1
      }
    },
    "contestType": "Cool"
  },
  "destinybond": {
    "id": "destinybond",
    "num": 194,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Destiny Bond",
    "pp": 5,
    "priority": 0,
    "flags": {
      "bypasssub": 1,
      "noassist": 1,
      "failcopycat": 1
    },
    "volatileStatus": "destinybond",
    "onPrepareHit": "onPrepareHit(pokemon) {\n      return !pokemon.removeVolatile(\"destinybond\");\n    }",
    "condition": {
      "noCopy": true,
      "onStart": "onStart(pokemon) {\n        this.add(\"-singlemove\", pokemon, \"Destiny Bond\");\n      }",
      "onFaint": "onFaint(target, source, effect) {\n        if (!source || !effect || target.isAlly(source)) return;\n        if (effect.effectType === \"Move\" && !effect.flags[\"futuremove\"]) {\n          if (source.volatiles[\"dynamax\"]) {\n            this.add(\"-hint\", \"Dynamaxed Pok\\xE9mon are immune to Destiny Bond.\");\n            return;\n          }\n          this.add(\"-activate\", target, \"move: Destiny Bond\");\n          source.faint();\n        }\n      }",
      "onBeforeMovePriority": -1,
      "onBeforeMove": "onBeforeMove(pokemon, target, move) {\n        if (move.id === \"destinybond\") return;\n        this.debug(\"removing Destiny Bond before attack\");\n        pokemon.removeVolatile(\"destinybond\");\n      }",
      "onMoveAborted": "onMoveAborted(pokemon, target, move) {\n        pokemon.removeVolatile(\"destinybond\");\n      }"
    },
    "secondary": null,
    "target": "self",
    "type": "Ghost",
    "zMove": {
      "effect": "redirect"
    },
    "contestType": "Clever"
  },
  "detect": {
    "id": "detect",
    "inherit": true,
    "priority": 2
  },
  "devastatingdrake": {
    "id": "devastatingdrake",
    "num": 652,
    "accuracy": true,
    "basePower": 1,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Devastating Drake",
    "pp": 1,
    "priority": 0,
    "flags": {},
    "isZ": "dragoniumz",
    "secondary": null,
    "target": "normal",
    "type": "Dragon",
    "contestType": "Cool"
  },
  "diamondstorm": {
    "id": "diamondstorm",
    "num": 591,
    "accuracy": 95,
    "basePower": 100,
    "category": "Physical",
    "name": "Diamond Storm",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "self": {
      "chance": 50,
      "boosts": {
        "def": 2
      }
    },
    "secondary": {},
    "target": "allAdjacentFoes",
    "type": "Rock",
    "contestType": "Beautiful"
  },
  "dig": {
    "id": "dig",
    "inherit": true,
    "basePower": 60
  },
  "disable": {
    "id": "disable",
    "inherit": true,
    "accuracy": 55,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "bypasssub": 1,
      "metronome": 1
    },
    "volatileStatus": "disable",
    "condition": {
      "durationCallback": "durationCallback() {\n        return this.random(2, 6);\n      }",
      "noCopy": true,
      "onStart": "onStart(pokemon) {\n        if (!this.queue.willMove(pokemon)) {\n          this.effectState.duration++;\n        }\n        if (!pokemon.lastMove) {\n          return false;\n        }\n        for (const moveSlot of pokemon.moveSlots) {\n          if (moveSlot.id === pokemon.lastMove.id) {\n            if (!moveSlot.pp) {\n              return false;\n            } else {\n              this.add(\"-start\", pokemon, \"Disable\", moveSlot.move);\n              this.effectState.move = pokemon.lastMove.id;\n              return;\n            }\n          }\n        }\n        return false;\n      }",
      "onEnd": "onEnd(pokemon) {\n        this.add(\"-end\", pokemon, \"move: Disable\");\n      }",
      "onBeforeMove": "onBeforeMove(attacker, defender, move) {\n        if (move.id === this.effectState.move) {\n          this.add(\"cant\", attacker, \"Disable\", move);\n          return false;\n        }\n      }",
      "onDisableMove": "onDisableMove(pokemon) {\n        for (const moveSlot of pokemon.moveSlots) {\n          if (moveSlot.id === this.effectState.move) {\n            pokemon.disableMove(moveSlot.id);\n          }\n        }\n      }"
    }
  },
  "disarmingvoice": {
    "id": "disarmingvoice",
    "num": 574,
    "accuracy": true,
    "basePower": 40,
    "category": "Special",
    "name": "Disarming Voice",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "sound": 1,
      "bypasssub": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "allAdjacentFoes",
    "type": "Fairy",
    "contestType": "Cute"
  },
  "discharge": {
    "id": "discharge",
    "num": 435,
    "accuracy": 100,
    "basePower": 80,
    "category": "Special",
    "name": "Discharge",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 30,
      "status": "par"
    },
    "target": "allAdjacent",
    "type": "Electric",
    "contestType": "Beautiful"
  },
  "direclaw": {
    "id": "direclaw",
    "num": 827,
    "accuracy": 100,
    "basePower": 80,
    "category": "Physical",
    "name": "Dire Claw",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 50,
      "onHit": "onHit(target, source) {\n        const result = this.random(3);\n        if (result === 0) {\n          target.trySetStatus(\"psn\", source);\n        } else if (result === 1) {\n          target.trySetStatus(\"par\", source);\n        } else {\n          target.trySetStatus(\"slp\", source);\n        }\n      }"
    },
    "target": "normal",
    "type": "Poison"
  },
  "dive": {
    "id": "dive",
    "inherit": true,
    "basePower": 60
  },
  "dizzypunch": {
    "id": "dizzypunch",
    "num": 146,
    "accuracy": 100,
    "basePower": 70,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Dizzy Punch",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "punch": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 20,
      "volatileStatus": "confusion"
    },
    "target": "normal",
    "type": "Normal",
    "contestType": "Cute"
  },
  "doodle": {
    "id": "doodle",
    "num": 867,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Doodle",
    "pp": 10,
    "priority": 0,
    "flags": {},
    "onHit": "onHit(target, source, move) {\n      let success = false;\n      if (!target.getAbility().flags[\"failroleplay\"]) {\n        for (const pokemon of source.alliesAndSelf()) {\n          if (pokemon.ability === target.ability || pokemon.getAbility().flags[\"cantsuppress\"]) continue;\n          const oldAbility = pokemon.setAbility(target.ability);\n          if (oldAbility) {\n            this.add(\"-ability\", pokemon, target.getAbility().name, \"[from] move: Doodle\");\n            success = true;\n          } else if (!success && oldAbility === null) {\n            success = null;\n          }\n        }\n      }\n      if (!success) {\n        if (success === false) {\n          this.add(\"-fail\", source);\n        }\n        this.attrLastMove(\"[still]\");\n        return this.NOT_FAIL;\n      }\n    }",
    "secondary": null,
    "target": "adjacentFoe",
    "type": "Normal"
  },
  "doomdesire": {
    "id": "doomdesire",
    "inherit": true,
    "onTry": "onTry(source, target) {\n      if (!target.side.addSlotCondition(target, \"futuremove\")) return false;\n      const moveData = {\n        name: \"Doom Desire\",\n        basePower: 120,\n        category: \"Physical\",\n        flags: { metronome: 1, futuremove: 1 },\n        willCrit: false,\n        type: \"???\"\n      };\n      const damage = this.actions.getDamage(source, target, moveData, true);\n      Object.assign(target.side.slotConditions[target.position][\"futuremove\"], {\n        duration: 3,\n        move: \"doomdesire\",\n        source,\n        moveData: {\n          id: \"doomdesire\",\n          name: \"Doom Desire\",\n          accuracy: 85,\n          basePower: 0,\n          damage,\n          category: \"Physical\",\n          flags: { metronome: 1, futuremove: 1 },\n          effectType: \"Move\",\n          type: \"???\"\n        }\n      });\n      this.add(\"-start\", source, \"Doom Desire\");\n      return null;\n    }"
  },
  "doubleedge": {
    "id": "doubleedge",
    "inherit": true,
    "recoil": [
      25,
      100
    ]
  },
  "doublehit": {
    "id": "doublehit",
    "num": 458,
    "accuracy": 90,
    "basePower": 35,
    "category": "Physical",
    "name": "Double Hit",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "multihit": 2,
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "zMove": {
      "basePower": 140
    },
    "maxMove": {
      "basePower": 120
    },
    "contestType": "Cool"
  },
  "doubleironbash": {
    "id": "doubleironbash",
    "num": 742,
    "accuracy": 100,
    "basePower": 60,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Double Iron Bash",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "punch": 1
    },
    "multihit": 2,
    "secondary": {
      "chance": 30,
      "volatileStatus": "flinch"
    },
    "target": "normal",
    "type": "Steel",
    "zMove": {
      "basePower": 180
    },
    "maxMove": {
      "basePower": 140
    },
    "contestType": "Clever"
  },
  "doublekick": {
    "id": "doublekick",
    "num": 24,
    "accuracy": 100,
    "basePower": 30,
    "category": "Physical",
    "name": "Double Kick",
    "pp": 30,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "multihit": 2,
    "secondary": null,
    "target": "normal",
    "type": "Fighting",
    "maxMove": {
      "basePower": 80
    },
    "contestType": "Cool"
  },
  "doubleshock": {
    "id": "doubleshock",
    "num": 892,
    "accuracy": 100,
    "basePower": 120,
    "category": "Physical",
    "name": "Double Shock",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1
    },
    "onTryMove": "onTryMove(pokemon, target, move) {\n      if (pokemon.hasType(\"Electric\")) return;\n      this.add(\"-fail\", pokemon, \"move: Double Shock\");\n      this.attrLastMove(\"[still]\");\n      return null;\n    }",
    "self": {
      "onHit": "onHit(pokemon) {\n        pokemon.setType(pokemon.getTypes(true).map((type) => type === \"Electric\" ? \"???\" : type));\n        this.add(\"-start\", pokemon, \"typechange\", pokemon.getTypes().join(\"/\"), \"[from] move: Double Shock\");\n      }"
    },
    "secondary": null,
    "target": "normal",
    "type": "Electric",
    "contestType": "Clever"
  },
  "doubleslap": {
    "id": "doubleslap",
    "num": 3,
    "accuracy": 85,
    "basePower": 15,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Double Slap",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "multihit": [
      2,
      5
    ],
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Cute"
  },
  "doubleteam": {
    "id": "doubleteam",
    "num": 104,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Double Team",
    "pp": 15,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "boosts": {
      "evasion": 1
    },
    "secondary": null,
    "target": "self",
    "type": "Normal",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Cool"
  },
  "dracometeor": {
    "id": "dracometeor",
    "num": 434,
    "accuracy": 90,
    "basePower": 130,
    "category": "Special",
    "name": "Draco Meteor",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "self": {
      "boosts": {
        "spa": -2
      }
    },
    "secondary": null,
    "target": "normal",
    "type": "Dragon",
    "contestType": "Beautiful"
  },
  "dragonascent": {
    "id": "dragonascent",
    "num": 620,
    "accuracy": 100,
    "basePower": 120,
    "category": "Physical",
    "name": "Dragon Ascent",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "distance": 1
    },
    "self": {
      "boosts": {
        "def": -1,
        "spd": -1
      }
    },
    "target": "any",
    "type": "Flying",
    "contestType": "Beautiful"
  },
  "dragonbreath": {
    "id": "dragonbreath",
    "num": 225,
    "accuracy": 100,
    "basePower": 60,
    "category": "Special",
    "name": "Dragon Breath",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 30,
      "status": "par"
    },
    "target": "normal",
    "type": "Dragon",
    "contestType": "Cool"
  },
  "dragoncheer": {
    "id": "dragoncheer",
    "num": 913,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Dragon Cheer",
    "pp": 15,
    "priority": 0,
    "flags": {
      "bypasssub": 1,
      "allyanim": 1,
      "metronome": 1
    },
    "volatileStatus": "dragoncheer",
    "condition": {
      "onStart": "onStart(target, source, effect) {\n        if (target.volatiles[\"focusenergy\"]) return false;\n        if (effect && [\"costar\", \"imposter\", \"psychup\", \"transform\"].includes(effect.id)) {\n          this.add(\"-start\", target, \"move: Dragon Cheer\", \"[silent]\");\n        } else {\n          this.add(\"-start\", target, \"move: Dragon Cheer\");\n        }\n        this.effectState.hasDragonType = target.hasType(\"Dragon\");\n      }",
      "onModifyCritRatio": "onModifyCritRatio(critRatio, source) {\n        return critRatio + (this.effectState.hasDragonType ? 2 : 1);\n      }"
    },
    "secondary": null,
    "target": "adjacentAlly",
    "type": "Dragon"
  },
  "dragonclaw": {
    "id": "dragonclaw",
    "num": 337,
    "accuracy": 100,
    "basePower": 80,
    "category": "Physical",
    "name": "Dragon Claw",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Dragon",
    "contestType": "Cool"
  },
  "dragondance": {
    "id": "dragondance",
    "num": 349,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Dragon Dance",
    "pp": 20,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "dance": 1,
      "metronome": 1
    },
    "boosts": {
      "atk": 1,
      "spe": 1
    },
    "secondary": null,
    "target": "self",
    "type": "Dragon",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Cool"
  },
  "dragondarts": {
    "id": "dragondarts",
    "num": 751,
    "accuracy": 100,
    "basePower": 50,
    "category": "Physical",
    "name": "Dragon Darts",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "noparentalbond": 1
    },
    "multihit": 2,
    "smartTarget": true,
    "secondary": null,
    "target": "normal",
    "type": "Dragon",
    "maxMove": {
      "basePower": 130
    }
  },
  "dragonenergy": {
    "id": "dragonenergy",
    "num": 820,
    "accuracy": 100,
    "basePower": 150,
    "basePowerCallback": "basePowerCallback(pokemon, target, move) {\n      const bp = move.basePower * pokemon.hp / pokemon.maxhp;\n      this.debug(`BP: ${bp}`);\n      return bp;\n    }",
    "category": "Special",
    "name": "Dragon Energy",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "secondary": null,
    "target": "allAdjacentFoes",
    "type": "Dragon"
  },
  "dragonhammer": {
    "id": "dragonhammer",
    "num": 692,
    "accuracy": 100,
    "basePower": 90,
    "category": "Physical",
    "name": "Dragon Hammer",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Dragon",
    "contestType": "Tough"
  },
  "dragonpulse": {
    "id": "dragonpulse",
    "num": 406,
    "accuracy": 100,
    "basePower": 85,
    "category": "Special",
    "name": "Dragon Pulse",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "distance": 1,
      "metronome": 1,
      "pulse": 1
    },
    "secondary": null,
    "target": "any",
    "type": "Dragon",
    "contestType": "Beautiful"
  },
  "dragonrage": {
    "id": "dragonrage",
    "num": 82,
    "accuracy": 100,
    "basePower": 0,
    "damage": 40,
    "category": "Special",
    "isNonstandard": "Past",
    "name": "Dragon Rage",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Dragon",
    "contestType": "Cool"
  },
  "dragonrush": {
    "id": "dragonrush",
    "num": 407,
    "accuracy": 75,
    "basePower": 100,
    "category": "Physical",
    "name": "Dragon Rush",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 20,
      "volatileStatus": "flinch"
    },
    "target": "normal",
    "type": "Dragon",
    "contestType": "Tough"
  },
  "dragontail": {
    "id": "dragontail",
    "num": 525,
    "accuracy": 90,
    "basePower": 60,
    "category": "Physical",
    "name": "Dragon Tail",
    "pp": 10,
    "priority": -6,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "noassist": 1,
      "failcopycat": 1
    },
    "forceSwitch": true,
    "target": "normal",
    "type": "Dragon",
    "contestType": "Tough"
  },
  "drainingkiss": {
    "id": "drainingkiss",
    "num": 577,
    "accuracy": 100,
    "basePower": 50,
    "category": "Special",
    "name": "Draining Kiss",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "heal": 1,
      "metronome": 1
    },
    "drain": [
      3,
      4
    ],
    "secondary": null,
    "target": "normal",
    "type": "Fairy",
    "contestType": "Cute"
  },
  "drainpunch": {
    "id": "drainpunch",
    "num": 409,
    "accuracy": 100,
    "basePower": 75,
    "category": "Physical",
    "name": "Drain Punch",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "punch": 1,
      "heal": 1,
      "metronome": 1
    },
    "drain": [
      1,
      2
    ],
    "secondary": null,
    "target": "normal",
    "type": "Fighting",
    "contestType": "Tough"
  },
  "dreameater": {
    "id": "dreameater",
    "num": 138,
    "accuracy": 100,
    "basePower": 100,
    "category": "Special",
    "name": "Dream Eater",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "heal": 1,
      "metronome": 1
    },
    "drain": [
      1,
      2
    ],
    "onTryImmunity": "onTryImmunity(target) {\n      return target.status === \"slp\" || target.hasAbility(\"comatose\");\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Psychic",
    "contestType": "Clever"
  },
  "drillpeck": {
    "id": "drillpeck",
    "num": 65,
    "accuracy": 100,
    "basePower": 80,
    "category": "Physical",
    "name": "Drill Peck",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "distance": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "any",
    "type": "Flying",
    "contestType": "Cool"
  },
  "drillrun": {
    "id": "drillrun",
    "num": 529,
    "accuracy": 95,
    "basePower": 80,
    "category": "Physical",
    "name": "Drill Run",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "critRatio": 2,
    "secondary": null,
    "target": "normal",
    "type": "Ground",
    "contestType": "Tough"
  },
  "drumbeating": {
    "id": "drumbeating",
    "num": 778,
    "accuracy": 100,
    "basePower": 80,
    "category": "Physical",
    "name": "Drum Beating",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "secondary": {
      "chance": 100,
      "boosts": {
        "spe": -1
      }
    },
    "target": "normal",
    "type": "Grass"
  },
  "dualchop": {
    "id": "dualchop",
    "num": 530,
    "accuracy": 90,
    "basePower": 40,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Dual Chop",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "multihit": 2,
    "secondary": null,
    "target": "normal",
    "type": "Dragon",
    "maxMove": {
      "basePower": 130
    },
    "contestType": "Tough"
  },
  "dualwingbeat": {
    "id": "dualwingbeat",
    "num": 814,
    "accuracy": 90,
    "basePower": 40,
    "category": "Physical",
    "name": "Dual Wingbeat",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "multihit": 2,
    "secondary": null,
    "target": "normal",
    "type": "Flying",
    "maxMove": {
      "basePower": 130
    }
  },
  "dynamaxcannon": {
    "id": "dynamaxcannon",
    "num": 744,
    "accuracy": 100,
    "basePower": 100,
    "category": "Special",
    "name": "Dynamax Cannon",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "failencore": 1,
      "nosleeptalk": 1,
      "failcopycat": 1,
      "failmimic": 1,
      "failinstruct": 1,
      "noparentalbond": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Dragon"
  },
  "dynamicpunch": {
    "id": "dynamicpunch",
    "num": 223,
    "accuracy": 50,
    "basePower": 100,
    "category": "Physical",
    "name": "Dynamic Punch",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "punch": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 100,
      "volatileStatus": "confusion"
    },
    "target": "normal",
    "type": "Fighting",
    "contestType": "Cool"
  },
  "earthpower": {
    "id": "earthpower",
    "num": 414,
    "accuracy": 100,
    "basePower": 90,
    "category": "Special",
    "name": "Earth Power",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "nonsky": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 10,
      "boosts": {
        "spd": -1
      }
    },
    "target": "normal",
    "type": "Ground",
    "contestType": "Beautiful"
  },
  "earthquake": {
    "id": "earthquake",
    "num": 89,
    "accuracy": 100,
    "basePower": 100,
    "category": "Physical",
    "name": "Earthquake",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "nonsky": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "allAdjacent",
    "type": "Ground",
    "contestType": "Tough"
  },
  "echoedvoice": {
    "id": "echoedvoice",
    "num": 497,
    "accuracy": 100,
    "basePower": 40,
    "basePowerCallback": "basePowerCallback(pokemon, target, move) {\n      let bp = move.basePower;\n      if (this.field.pseudoWeather.echoedvoice) {\n        bp = move.basePower * this.field.pseudoWeather.echoedvoice.multiplier;\n      }\n      this.debug(`BP: ${move.basePower}`);\n      return bp;\n    }",
    "category": "Special",
    "name": "Echoed Voice",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "sound": 1,
      "bypasssub": 1,
      "metronome": 1
    },
    "onTryMove": "onTryMove() {\n      this.field.addPseudoWeather(\"echoedvoice\");\n    }",
    "condition": {
      "duration": 2,
      "onFieldStart": "onFieldStart() {\n        this.effectState.multiplier = 1;\n      }",
      "onFieldRestart": "onFieldRestart() {\n        if (this.effectState.duration !== 2) {\n          this.effectState.duration = 2;\n          if (this.effectState.multiplier < 5) {\n            this.effectState.multiplier++;\n          }\n        }\n      }"
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Beautiful"
  },
  "eerieimpulse": {
    "id": "eerieimpulse",
    "num": 598,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Eerie Impulse",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "metronome": 1
    },
    "boosts": {
      "spa": -2
    },
    "secondary": null,
    "target": "normal",
    "type": "Electric",
    "zMove": {
      "boost": {
        "spd": 1
      }
    },
    "contestType": "Clever"
  },
  "eeriespell": {
    "id": "eeriespell",
    "num": 826,
    "accuracy": 100,
    "basePower": 80,
    "category": "Special",
    "name": "Eerie Spell",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "sound": 1,
      "bypasssub": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 100,
      "onHit": "onHit(target) {\n        if (!target.hp) return;\n        let move = target.lastMove;\n        if (!move || move.isZ) return;\n        if (move.isMax && move.baseMove) move = this.dex.moves.get(move.baseMove);\n        const ppDeducted = target.deductPP(move.id, 3);\n        if (!ppDeducted) return;\n        this.add(\"-activate\", target, \"move: Eerie Spell\", move.name, ppDeducted);\n      }"
    },
    "target": "normal",
    "type": "Psychic"
  },
  "eggbomb": {
    "id": "eggbomb",
    "num": 121,
    "accuracy": 75,
    "basePower": 100,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Egg Bomb",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "bullet": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Cute"
  },
  "electricterrain": {
    "id": "electricterrain",
    "num": 604,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Electric Terrain",
    "pp": 10,
    "priority": 0,
    "flags": {
      "nonsky": 1,
      "metronome": 1
    },
    "terrain": "electricterrain",
    "condition": {
      "effectType": "Terrain",
      "duration": 5,
      "durationCallback": "durationCallback(source, effect) {\n        if (source?.hasItem(\"terrainextender\")) {\n          return 8;\n        }\n        return 5;\n      }",
      "onSetStatus": "onSetStatus(status, target, source, effect) {\n        if (status.id === \"slp\" && target.isGrounded() && !target.isSemiInvulnerable()) {\n          if (effect.id === \"yawn\" || effect.effectType === \"Move\" && !effect.secondaries) {\n            this.add(\"-activate\", target, \"move: Electric Terrain\");\n          }\n          return false;\n        }\n      }",
      "onTryAddVolatile": "onTryAddVolatile(status, target) {\n        if (!target.isGrounded() || target.isSemiInvulnerable()) return;\n        if (status.id === \"yawn\") {\n          this.add(\"-activate\", target, \"move: Electric Terrain\");\n          return null;\n        }\n      }",
      "onBasePowerPriority": 6,
      "onBasePower": "onBasePower(basePower, attacker, defender, move) {\n        if (move.type === \"Electric\" && attacker.isGrounded() && !attacker.isSemiInvulnerable()) {\n          this.debug(\"electric terrain boost\");\n          return this.chainModify([5325, 4096]);\n        }\n      }",
      "onFieldStart": "onFieldStart(field, source, effect) {\n        if (effect?.effectType === \"Ability\") {\n          this.add(\"-fieldstart\", \"move: Electric Terrain\", \"[from] ability: \" + effect.name, `[of] ${source}`);\n        } else {\n          this.add(\"-fieldstart\", \"move: Electric Terrain\");\n        }\n      }",
      "onFieldResidualOrder": 27,
      "onFieldResidualSubOrder": 7,
      "onFieldEnd": "onFieldEnd() {\n        this.add(\"-fieldend\", \"move: Electric Terrain\");\n      }"
    },
    "secondary": null,
    "target": "all",
    "type": "Electric",
    "zMove": {
      "boost": {
        "spe": 1
      }
    },
    "contestType": "Clever"
  },
  "electrify": {
    "id": "electrify",
    "num": 582,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Electrify",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "allyanim": 1,
      "metronome": 1
    },
    "volatileStatus": "electrify",
    "onTryHit": "onTryHit(target) {\n      if (!this.queue.willMove(target) && target.activeTurns) return false;\n    }",
    "condition": {
      "duration": 1,
      "onStart": "onStart(target) {\n        this.add(\"-singleturn\", target, \"move: Electrify\");\n      }",
      "onModifyTypePriority": -2,
      "onModifyType": "onModifyType(move) {\n        if (move.id !== \"struggle\") {\n          this.debug(\"Electrify making move type electric\");\n          move.type = \"Electric\";\n        }\n      }"
    },
    "secondary": null,
    "target": "normal",
    "type": "Electric",
    "zMove": {
      "boost": {
        "spa": 1
      }
    },
    "contestType": "Clever"
  },
  "electroball": {
    "id": "electroball",
    "num": 486,
    "accuracy": 100,
    "basePower": 0,
    "basePowerCallback": "basePowerCallback(pokemon, target) {\n      let ratio = Math.floor(pokemon.getStat(\"spe\") / target.getStat(\"spe\"));\n      if (!isFinite(ratio)) ratio = 0;\n      const bp = [40, 60, 80, 120, 150][Math.min(ratio, 4)];\n      this.debug(`BP: ${bp}`);\n      return bp;\n    }",
    "category": "Special",
    "name": "Electro Ball",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "bullet": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Electric",
    "zMove": {
      "basePower": 160
    },
    "maxMove": {
      "basePower": 130
    },
    "contestType": "Cool"
  },
  "electrodrift": {
    "id": "electrodrift",
    "num": 879,
    "accuracy": 100,
    "basePower": 100,
    "category": "Special",
    "name": "Electro Drift",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1
    },
    "onBasePower": "onBasePower(basePower, source, target, move) {\n      if (target.runEffectiveness(move) > 0) {\n        this.debug(`electro drift super effective buff`);\n        return this.chainModify([5461, 4096]);\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Electric",
    "contestType": "Cool"
  },
  "electroshot": {
    "id": "electroshot",
    "num": 905,
    "accuracy": 100,
    "basePower": 130,
    "category": "Special",
    "name": "Electro Shot",
    "pp": 10,
    "priority": 0,
    "flags": {
      "charge": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onTryMove": "onTryMove(attacker, defender, move) {\n      if (attacker.removeVolatile(move.id)) {\n        return;\n      }\n      this.add(\"-prepare\", attacker, move.name);\n      this.boost({ spa: 1 }, attacker, attacker, move);\n      if ([\"raindance\", \"primordialsea\"].includes(attacker.effectiveWeather())) {\n        this.attrLastMove(\"[still]\");\n        this.addMove(\"-anim\", attacker, move.name, defender);\n        return;\n      }\n      if (!this.runEvent(\"ChargeMove\", attacker, defender, move)) {\n        return;\n      }\n      attacker.addVolatile(\"twoturnmove\", defender);\n      return null;\n    }",
    "secondary": null,
    "hasSheerForce": true,
    "target": "normal",
    "type": "Electric"
  },
  "electroweb": {
    "id": "electroweb",
    "num": 527,
    "accuracy": 95,
    "basePower": 55,
    "category": "Special",
    "name": "Electroweb",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 100,
      "boosts": {
        "spe": -1
      }
    },
    "target": "allAdjacentFoes",
    "type": "Electric",
    "contestType": "Beautiful"
  },
  "embargo": {
    "id": "embargo",
    "num": 373,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Embargo",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "metronome": 1
    },
    "volatileStatus": "embargo",
    "condition": {
      "duration": 5,
      "onStart": "onStart(pokemon) {\n        this.add(\"-start\", pokemon, \"Embargo\");\n        this.singleEvent(\"End\", pokemon.getItem(), pokemon.itemState, pokemon);\n      }",
      "onResidualOrder": 21,
      "onEnd": "onEnd(pokemon) {\n        this.add(\"-end\", pokemon, \"Embargo\");\n      }"
    },
    "secondary": null,
    "target": "normal",
    "type": "Dark",
    "zMove": {
      "boost": {
        "spa": 1
      }
    },
    "contestType": "Clever"
  },
  "ember": {
    "id": "ember",
    "num": 52,
    "accuracy": 100,
    "basePower": 40,
    "category": "Special",
    "name": "Ember",
    "pp": 25,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 10,
      "status": "brn"
    },
    "target": "normal",
    "type": "Fire",
    "contestType": "Cute"
  },
  "encore": {
    "id": "encore",
    "inherit": true,
    "volatileStatus": "encore",
    "condition": {
      "durationCallback": "durationCallback() {\n        return this.random(3, 7);\n      }",
      "onStart": "onStart(target, source) {\n        const moveSlot = target.lastMove ? target.getMoveData(target.lastMove.id) : null;\n        if (!target.lastMove || target.lastMove.flags[\"failencore\"] || !moveSlot || moveSlot.pp <= 0) {\n          return false;\n        }\n        this.effectState.move = target.lastMove.id;\n        this.add(\"-start\", target, \"Encore\");\n      }",
      "onOverrideAction": "onOverrideAction(pokemon) {\n        return this.effectState.move;\n      }",
      "onResidualOrder": 10,
      "onResidualSubOrder": 14,
      "onResidual": "onResidual(target) {\n        const moveSlot = target.getMoveData(this.effectState.move);\n        if (moveSlot && moveSlot.pp <= 0) {\n          target.removeVolatile(\"encore\");\n        }\n      }",
      "onEnd": "onEnd(target) {\n        this.add(\"-end\", target, \"Encore\");\n      }",
      "onDisableMove": "onDisableMove(pokemon) {\n        if (!this.effectState.move || !pokemon.hasMove(this.effectState.move)) {\n          return;\n        }\n        for (const moveSlot of pokemon.moveSlots) {\n          if (moveSlot.id !== this.effectState.move) {\n            pokemon.disableMove(moveSlot.id);\n          }\n        }\n      }"
    }
  },
  "endeavor": {
    "id": "endeavor",
    "num": 283,
    "accuracy": 100,
    "basePower": 0,
    "damageCallback": "damageCallback(pokemon, target) {\n      return target.getUndynamaxedHP() - pokemon.hp;\n    }",
    "category": "Physical",
    "name": "Endeavor",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "noparentalbond": 1
    },
    "onTryImmunity": "onTryImmunity(target, pokemon) {\n      return pokemon.hp < target.hp;\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "zMove": {
      "basePower": 160
    },
    "maxMove": {
      "basePower": 130
    },
    "contestType": "Tough"
  },
  "endure": {
    "id": "endure",
    "inherit": true,
    "priority": 2
  },
  "energyball": {
    "id": "energyball",
    "num": 412,
    "accuracy": 100,
    "basePower": 90,
    "category": "Special",
    "name": "Energy Ball",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "bullet": 1
    },
    "secondary": {
      "chance": 10,
      "boosts": {
        "spd": -1
      }
    },
    "target": "normal",
    "type": "Grass",
    "contestType": "Beautiful"
  },
  "entrainment": {
    "id": "entrainment",
    "num": 494,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Entrainment",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "allyanim": 1,
      "metronome": 1
    },
    "onTryHit": "onTryHit(target, source) {\n      if (target === source || target.volatiles[\"dynamax\"]) return false;\n      if (target.ability === source.ability || target.getAbility().flags[\"cantsuppress\"] || target.ability === \"truant\" || source.getAbility().flags[\"noentrain\"]) {\n        return false;\n      }\n    }",
    "onHit": "onHit(target, source) {\n      const oldAbility = target.setAbility(source.ability);\n      if (oldAbility) {\n        this.add(\"-ability\", target, target.getAbility().name, \"[from] move: Entrainment\");\n        if (!target.isAlly(source)) target.volatileStaleness = \"external\";\n        return;\n      }\n      return oldAbility;\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "zMove": {
      "boost": {
        "spd": 1
      }
    },
    "contestType": "Cute"
  },
  "eruption": {
    "id": "eruption",
    "num": 284,
    "accuracy": 100,
    "basePower": 150,
    "basePowerCallback": "basePowerCallback(pokemon, target, move) {\n      const bp = move.basePower * pokemon.hp / pokemon.maxhp;\n      this.debug(`BP: ${bp}`);\n      return bp;\n    }",
    "category": "Special",
    "name": "Eruption",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "allAdjacentFoes",
    "type": "Fire",
    "contestType": "Beautiful"
  },
  "esperwing": {
    "id": "esperwing",
    "num": 840,
    "accuracy": 100,
    "basePower": 80,
    "category": "Special",
    "name": "Esper Wing",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "critRatio": 2,
    "secondary": {
      "chance": 100,
      "self": {
        "boosts": {
          "spe": 1
        }
      }
    },
    "target": "normal",
    "type": "Psychic"
  },
  "eternabeam": {
    "id": "eternabeam",
    "num": 795,
    "accuracy": 90,
    "basePower": 160,
    "category": "Special",
    "isNonstandard": "Past",
    "name": "Eternabeam",
    "pp": 5,
    "priority": 0,
    "flags": {
      "recharge": 1,
      "protect": 1,
      "mirror": 1
    },
    "self": {
      "volatileStatus": "mustrecharge"
    },
    "secondary": null,
    "target": "normal",
    "type": "Dragon"
  },
  "expandingforce": {
    "id": "expandingforce",
    "num": 797,
    "accuracy": 100,
    "basePower": 80,
    "category": "Special",
    "name": "Expanding Force",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onBasePower": "onBasePower(basePower, source) {\n      if (this.field.isTerrain(\"psychicterrain\") && source.isGrounded()) {\n        this.debug(\"terrain buff\");\n        return this.chainModify(1.5);\n      }\n    }",
    "onModifyMove": "onModifyMove(move, source, target) {\n      if (this.field.isTerrain(\"psychicterrain\") && source.isGrounded()) {\n        move.target = \"allAdjacentFoes\";\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Psychic"
  },
  "explosion": {
    "id": "explosion",
    "inherit": true,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "noparentalbond": 1,
      "nosketch": 1
    }
  },
  "extrasensory": {
    "id": "extrasensory",
    "inherit": true,
    "basePowerCallback": "basePowerCallback(pokemon, target) {\n      if (target.volatiles[\"minimize\"]) return 160;\n      return 80;\n    }"
  },
  "extremeevoboost": {
    "id": "extremeevoboost",
    "num": 702,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Extreme Evoboost",
    "pp": 1,
    "priority": 0,
    "flags": {},
    "isZ": "eeviumz",
    "boosts": {
      "atk": 2,
      "def": 2,
      "spa": 2,
      "spd": 2,
      "spe": 2
    },
    "secondary": null,
    "target": "self",
    "type": "Normal",
    "contestType": "Beautiful"
  },
  "extremespeed": {
    "id": "extremespeed",
    "num": 245,
    "accuracy": 100,
    "basePower": 80,
    "category": "Physical",
    "name": "Extreme Speed",
    "pp": 5,
    "priority": 2,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Cool"
  },
  "facade": {
    "id": "facade",
    "num": 263,
    "accuracy": 100,
    "basePower": 70,
    "category": "Physical",
    "name": "Facade",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onBasePower": "onBasePower(basePower, pokemon) {\n      if (pokemon.status && pokemon.status !== \"slp\") {\n        return this.chainModify(2);\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Cute"
  },
  "fairylock": {
    "id": "fairylock",
    "num": 587,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Fairy Lock",
    "pp": 10,
    "priority": 0,
    "flags": {
      "mirror": 1,
      "bypasssub": 1,
      "metronome": 1
    },
    "pseudoWeather": "fairylock",
    "condition": {
      "duration": 2,
      "onFieldStart": "onFieldStart(target) {\n        this.add(\"-fieldactivate\", \"move: Fairy Lock\");\n      }",
      "onTrapPokemon": "onTrapPokemon(pokemon) {\n        pokemon.tryTrap();\n      }"
    },
    "secondary": null,
    "target": "all",
    "type": "Fairy",
    "zMove": {
      "boost": {
        "def": 1
      }
    },
    "contestType": "Clever"
  },
  "fairywind": {
    "id": "fairywind",
    "num": 584,
    "accuracy": 100,
    "basePower": 40,
    "category": "Special",
    "name": "Fairy Wind",
    "pp": 30,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "wind": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Fairy",
    "contestType": "Beautiful"
  },
  "fakeout": {
    "id": "fakeout",
    "inherit": true,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    }
  },
  "faketears": {
    "id": "faketears",
    "num": 313,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Fake Tears",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "allyanim": 1,
      "metronome": 1
    },
    "boosts": {
      "spd": -2
    },
    "secondary": null,
    "target": "normal",
    "type": "Dark",
    "zMove": {
      "boost": {
        "spa": 1
      }
    },
    "contestType": "Cute"
  },
  "falsesurrender": {
    "id": "falsesurrender",
    "num": 793,
    "accuracy": true,
    "basePower": 80,
    "category": "Physical",
    "name": "False Surrender",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Dark"
  },
  "falseswipe": {
    "id": "falseswipe",
    "num": 206,
    "accuracy": 100,
    "basePower": 40,
    "category": "Physical",
    "name": "False Swipe",
    "pp": 40,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onDamagePriority": -20,
    "onDamage": "onDamage(damage, target, source, effect) {\n      if (damage >= target.hp) return target.hp - 1;\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Cool"
  },
  "featherdance": {
    "id": "featherdance",
    "num": 297,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Feather Dance",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "dance": 1,
      "allyanim": 1,
      "metronome": 1
    },
    "boosts": {
      "atk": -2
    },
    "secondary": null,
    "target": "normal",
    "type": "Flying",
    "zMove": {
      "boost": {
        "def": 1
      }
    },
    "contestType": "Beautiful"
  },
  "feint": {
    "id": "feint",
    "num": 364,
    "accuracy": 100,
    "basePower": 30,
    "category": "Physical",
    "name": "Feint",
    "pp": 10,
    "priority": 2,
    "flags": {
      "mirror": 1,
      "noassist": 1,
      "failcopycat": 1
    },
    "breaksProtect": true,
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Clever"
  },
  "feintattack": {
    "id": "feintattack",
    "inherit": true,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    }
  },
  "fellstinger": {
    "id": "fellstinger",
    "num": 565,
    "accuracy": 100,
    "basePower": 50,
    "category": "Physical",
    "name": "Fell Stinger",
    "pp": 25,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onAfterMoveSecondarySelf": "onAfterMoveSecondarySelf(pokemon, target, move) {\n      if (!target || target.fainted || target.hp <= 0) this.boost({ atk: 3 }, pokemon, pokemon, move);\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Bug",
    "contestType": "Cool"
  },
  "ficklebeam": {
    "id": "ficklebeam",
    "num": 907,
    "accuracy": 100,
    "basePower": 80,
    "category": "Special",
    "name": "Fickle Beam",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onBasePower": "onBasePower(basePower, pokemon) {\n      if (this.randomChance(3, 10)) {\n        this.attrLastMove(\"[anim] Fickle Beam All Out\");\n        this.add(\"-activate\", pokemon, \"move: Fickle Beam\");\n        return this.chainModify(2);\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Dragon"
  },
  "fierydance": {
    "id": "fierydance",
    "num": 552,
    "accuracy": 100,
    "basePower": 80,
    "category": "Special",
    "name": "Fiery Dance",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "dance": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 50,
      "self": {
        "boosts": {
          "spa": 1
        }
      }
    },
    "target": "normal",
    "type": "Fire",
    "contestType": "Beautiful"
  },
  "fierywrath": {
    "id": "fierywrath",
    "num": 822,
    "accuracy": 100,
    "basePower": 90,
    "category": "Special",
    "name": "Fiery Wrath",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "secondary": {
      "chance": 20,
      "volatileStatus": "flinch"
    },
    "target": "allAdjacentFoes",
    "type": "Dark"
  },
  "filletaway": {
    "id": "filletaway",
    "num": 868,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Fillet Away",
    "pp": 10,
    "priority": 0,
    "flags": {
      "snatch": 1
    },
    "onTry": "onTry(source) {\n      if (source.hp <= source.maxhp / 2 || source.maxhp === 1) return false;\n    }",
    "onTryHit": "onTryHit(pokemon, target, move) {\n      if (!this.boost(move.boosts)) return null;\n      delete move.boosts;\n    }",
    "onHit": "onHit(pokemon) {\n      this.directDamage(pokemon.maxhp / 2);\n    }",
    "boosts": {
      "atk": 2,
      "spa": 2,
      "spe": 2
    },
    "secondary": null,
    "target": "self",
    "type": "Normal"
  },
  "finalgambit": {
    "id": "finalgambit",
    "num": 515,
    "accuracy": 100,
    "basePower": 0,
    "damageCallback": "damageCallback(pokemon) {\n      const damage = pokemon.hp;\n      pokemon.faint();\n      return damage;\n    }",
    "selfdestruct": "ifHit",
    "category": "Special",
    "name": "Final Gambit",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "metronome": 1,
      "noparentalbond": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Fighting",
    "zMove": {
      "basePower": 180
    },
    "contestType": "Tough"
  },
  "fireblast": {
    "id": "fireblast",
    "num": 126,
    "accuracy": 85,
    "basePower": 110,
    "category": "Special",
    "name": "Fire Blast",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 10,
      "status": "brn"
    },
    "target": "normal",
    "type": "Fire",
    "contestType": "Beautiful"
  },
  "firefang": {
    "id": "firefang",
    "num": 424,
    "accuracy": 95,
    "basePower": 65,
    "category": "Physical",
    "name": "Fire Fang",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "bite": 1
    },
    "secondaries": [
      {
        "chance": 10,
        "status": "brn"
      },
      {
        "chance": 10,
        "volatileStatus": "flinch"
      }
    ],
    "target": "normal",
    "type": "Fire",
    "contestType": "Cool"
  },
  "firelash": {
    "id": "firelash",
    "num": 680,
    "accuracy": 100,
    "basePower": 80,
    "category": "Physical",
    "name": "Fire Lash",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 100,
      "boosts": {
        "def": -1
      }
    },
    "target": "normal",
    "type": "Fire",
    "contestType": "Cute"
  },
  "firepledge": {
    "id": "firepledge",
    "num": 519,
    "accuracy": 100,
    "basePower": 80,
    "basePowerCallback": "basePowerCallback(target, source, move) {\n      if ([\"grasspledge\", \"waterpledge\"].includes(move.sourceEffect)) {\n        this.add(\"-combine\");\n        return 150;\n      }\n      return move.basePower;\n    }",
    "category": "Special",
    "name": "Fire Pledge",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "nonsky": 1,
      "metronome": 1,
      "pledgecombo": 1
    },
    "onPrepareHit": "onPrepareHit(target, source, move) {\n      for (const action of this.queue.list) {\n        if (!action.move || !action.pokemon?.isActive || action.pokemon.fainted || action.maxMove || action.zmove) {\n          continue;\n        }\n        if (action.pokemon.isAlly(source) && [\"grasspledge\", \"waterpledge\"].includes(action.move.id)) {\n          this.queue.prioritizeAction(action, move);\n          this.add(\"-waiting\", source, action.pokemon);\n          return null;\n        }\n      }\n    }",
    "onModifyMove": "onModifyMove(move) {\n      if (move.sourceEffect === \"waterpledge\") {\n        move.type = \"Water\";\n        move.forceSTAB = true;\n        move.self = { sideCondition: \"waterpledge\" };\n      }\n      if (move.sourceEffect === \"grasspledge\") {\n        move.type = \"Fire\";\n        move.forceSTAB = true;\n        move.sideCondition = \"firepledge\";\n      }\n    }",
    "condition": {
      "duration": 4,
      "onSideStart": "onSideStart(targetSide) {\n        this.add(\"-sidestart\", targetSide, \"Fire Pledge\");\n      }",
      "onResidualOrder": 5,
      "onResidualSubOrder": 1,
      "onResidual": "onResidual(pokemon) {\n        if (!pokemon.hasType(\"Fire\")) this.damage(pokemon.baseMaxhp / 8, pokemon);\n      }",
      "onSideResidualOrder": 26,
      "onSideResidualSubOrder": 8,
      "onSideEnd": "onSideEnd(targetSide) {\n        this.add(\"-sideend\", targetSide, \"Fire Pledge\");\n      }"
    },
    "secondary": null,
    "target": "normal",
    "type": "Fire",
    "contestType": "Beautiful"
  },
  "firepunch": {
    "id": "firepunch",
    "num": 7,
    "accuracy": 100,
    "basePower": 75,
    "category": "Physical",
    "name": "Fire Punch",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "punch": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 10,
      "status": "brn"
    },
    "target": "normal",
    "type": "Fire",
    "contestType": "Tough"
  },
  "firespin": {
    "id": "firespin",
    "num": 83,
    "accuracy": 85,
    "basePower": 35,
    "category": "Special",
    "name": "Fire Spin",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "volatileStatus": "partiallytrapped",
    "secondary": null,
    "target": "normal",
    "type": "Fire",
    "contestType": "Beautiful"
  },
  "firstimpression": {
    "id": "firstimpression",
    "num": 660,
    "accuracy": 100,
    "basePower": 90,
    "category": "Physical",
    "name": "First Impression",
    "pp": 10,
    "priority": 2,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onTry": "onTry(source) {\n      if (source.activeMoveActions > 1) {\n        this.hint(\"First Impression only works on your first turn out.\");\n        return false;\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Bug",
    "contestType": "Cute"
  },
  "fishiousrend": {
    "id": "fishiousrend",
    "num": 755,
    "accuracy": 100,
    "basePower": 85,
    "basePowerCallback": "basePowerCallback(pokemon, target, move) {\n      if (target.newlySwitched || this.queue.willMove(target)) {\n        this.debug(\"Fishious Rend damage boost\");\n        return move.basePower * 2;\n      }\n      this.debug(\"Fishious Rend NOT boosted\");\n      return move.basePower;\n    }",
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Fishious Rend",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "bite": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Water"
  },
  "fissure": {
    "id": "fissure",
    "num": 90,
    "accuracy": 30,
    "basePower": 0,
    "category": "Physical",
    "name": "Fissure",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "nonsky": 1,
      "metronome": 1
    },
    "ohko": true,
    "secondary": null,
    "target": "normal",
    "type": "Ground",
    "zMove": {
      "basePower": 180
    },
    "maxMove": {
      "basePower": 130
    },
    "contestType": "Tough"
  },
  "flail": {
    "id": "flail",
    "inherit": true,
    "basePowerCallback": "basePowerCallback(pokemon) {\n      const ratio = Math.max(Math.floor(pokemon.hp * 48 / pokemon.maxhp), 1);\n      let bp;\n      if (ratio < 2) {\n        bp = 200;\n      } else if (ratio < 5) {\n        bp = 150;\n      } else if (ratio < 10) {\n        bp = 100;\n      } else if (ratio < 17) {\n        bp = 80;\n      } else if (ratio < 33) {\n        bp = 40;\n      } else {\n        bp = 20;\n      }\n      this.debug(`BP: ${bp}`);\n      return bp;\n    }"
  },
  "flameburst": {
    "id": "flameburst",
    "num": 481,
    "accuracy": 100,
    "basePower": 70,
    "category": "Special",
    "isNonstandard": "Past",
    "name": "Flame Burst",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onHit": "onHit(target, source, move) {\n      for (const ally of target.adjacentAllies()) {\n        this.damage(ally.baseMaxhp / 16, ally, source, this.dex.conditions.get(\"Flame Burst\"));\n      }\n    }",
    "onAfterSubDamage": "onAfterSubDamage(damage, target, source, move) {\n      for (const ally of target.adjacentAllies()) {\n        this.damage(ally.baseMaxhp / 16, ally, source, this.dex.conditions.get(\"Flame Burst\"));\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Fire",
    "contestType": "Beautiful"
  },
  "flamecharge": {
    "id": "flamecharge",
    "num": 488,
    "accuracy": 100,
    "basePower": 50,
    "category": "Physical",
    "name": "Flame Charge",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 100,
      "self": {
        "boosts": {
          "spe": 1
        }
      }
    },
    "target": "normal",
    "type": "Fire",
    "contestType": "Cool"
  },
  "flamewheel": {
    "id": "flamewheel",
    "num": 172,
    "accuracy": 100,
    "basePower": 60,
    "category": "Physical",
    "name": "Flame Wheel",
    "pp": 25,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "defrost": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 10,
      "status": "brn"
    },
    "target": "normal",
    "type": "Fire",
    "contestType": "Beautiful"
  },
  "flamethrower": {
    "id": "flamethrower",
    "num": 53,
    "accuracy": 100,
    "basePower": 90,
    "category": "Special",
    "name": "Flamethrower",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 10,
      "status": "brn"
    },
    "target": "normal",
    "type": "Fire",
    "contestType": "Beautiful"
  },
  "flareblitz": {
    "id": "flareblitz",
    "num": 394,
    "accuracy": 100,
    "basePower": 120,
    "category": "Physical",
    "name": "Flare Blitz",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "defrost": 1,
      "metronome": 1
    },
    "recoil": [
      33,
      100
    ],
    "secondary": {
      "chance": 10,
      "status": "brn"
    },
    "target": "normal",
    "type": "Fire",
    "contestType": "Cool"
  },
  "flash": {
    "id": "flash",
    "inherit": true,
    "accuracy": 70
  },
  "flashcannon": {
    "id": "flashcannon",
    "num": 430,
    "accuracy": 100,
    "basePower": 80,
    "category": "Special",
    "name": "Flash Cannon",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 10,
      "boosts": {
        "spd": -1
      }
    },
    "target": "normal",
    "type": "Steel",
    "contestType": "Beautiful"
  },
  "flatter": {
    "id": "flatter",
    "num": 260,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Flatter",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "allyanim": 1,
      "metronome": 1
    },
    "volatileStatus": "confusion",
    "boosts": {
      "spa": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Dark",
    "zMove": {
      "boost": {
        "spd": 1
      }
    },
    "contestType": "Clever"
  },
  "fleurcannon": {
    "id": "fleurcannon",
    "num": 705,
    "accuracy": 90,
    "basePower": 130,
    "category": "Special",
    "name": "Fleur Cannon",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "self": {
      "boosts": {
        "spa": -2
      }
    },
    "secondary": null,
    "target": "normal",
    "type": "Fairy",
    "contestType": "Beautiful"
  },
  "fling": {
    "id": "fling",
    "num": 374,
    "accuracy": 100,
    "basePower": 0,
    "category": "Physical",
    "name": "Fling",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "allyanim": 1,
      "metronome": 1,
      "noparentalbond": 1
    },
    "onPrepareHit": "onPrepareHit(target, source, move) {\n      if (source.ignoringItem()) return false;\n      const item = source.getItem();\n      if (!this.singleEvent(\"TakeItem\", item, source.itemState, source, source, move, item)) return false;\n      if (!item.fling) return false;\n      move.basePower = item.fling.basePower;\n      this.debug(`BP: ${move.basePower}`);\n      if (item.isBerry) {\n        move.onHit = function(foe) {\n          if (this.singleEvent(\"Eat\", item, null, foe, null, null)) {\n            this.runEvent(\"EatItem\", foe, null, null, item);\n            if (item.id === \"leppaberry\") foe.staleness = \"external\";\n          }\n          if (item.onEat) foe.ateBerry = true;\n        };\n      } else if (item.fling.effect) {\n        move.onHit = item.fling.effect;\n      } else {\n        if (!move.secondaries) move.secondaries = [];\n        if (item.fling.status) {\n          move.secondaries.push({ status: item.fling.status });\n        } else if (item.fling.volatileStatus) {\n          move.secondaries.push({ volatileStatus: item.fling.volatileStatus });\n        }\n      }\n      source.addVolatile(\"fling\");\n    }",
    "condition": {
      "onUpdate": "onUpdate(pokemon) {\n        const item = pokemon.getItem();\n        pokemon.setItem(\"\");\n        pokemon.lastItem = item.id;\n        pokemon.usedItemThisTurn = true;\n        this.add(\"-enditem\", pokemon, item.name, \"[from] move: Fling\");\n        this.runEvent(\"AfterUseItem\", pokemon, null, null, item);\n        pokemon.removeVolatile(\"fling\");\n      }"
    },
    "secondary": null,
    "target": "normal",
    "type": "Dark",
    "contestType": "Cute"
  },
  "flipturn": {
    "id": "flipturn",
    "num": 812,
    "accuracy": 100,
    "basePower": 60,
    "category": "Physical",
    "name": "Flip Turn",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "selfSwitch": true,
    "secondary": null,
    "target": "normal",
    "type": "Water"
  },
  "floatyfall": {
    "id": "floatyfall",
    "num": 731,
    "accuracy": 95,
    "basePower": 90,
    "category": "Physical",
    "isNonstandard": "LGPE",
    "name": "Floaty Fall",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "gravity": 1
    },
    "secondary": {
      "chance": 30,
      "volatileStatus": "flinch"
    },
    "target": "normal",
    "type": "Flying",
    "contestType": "Cool"
  },
  "floralhealing": {
    "id": "floralhealing",
    "num": 666,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Floral Healing",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "heal": 1,
      "allyanim": 1,
      "metronome": 1
    },
    "onHit": "onHit(target, source) {\n      let success = false;\n      if (this.field.isTerrain(\"grassyterrain\")) {\n        success = !!this.heal(this.modify(target.baseMaxhp, 0.667));\n      } else {\n        success = !!this.heal(Math.ceil(target.baseMaxhp * 0.5));\n      }\n      if (success && !target.isAlly(source)) {\n        target.staleness = \"external\";\n      }\n      if (!success) {\n        this.add(\"-fail\", target, \"heal\");\n        return this.NOT_FAIL;\n      }\n      return success;\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Fairy",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Beautiful"
  },
  "flowershield": {
    "id": "flowershield",
    "num": 579,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Flower Shield",
    "pp": 10,
    "priority": 0,
    "flags": {
      "distance": 1,
      "metronome": 1
    },
    "onHitField": "onHitField(t, source, move) {\n      const targets = [];\n      for (const pokemon of this.getAllActive()) {\n        if (pokemon.hasType(\"Grass\") && (!pokemon.volatiles[\"maxguard\"] || this.runEvent(\"TryHit\", pokemon, source, move))) {\n          targets.push(pokemon);\n        }\n      }\n      let success = false;\n      for (const target of targets) {\n        success = this.boost({ def: 1 }, target, source, move) || success;\n      }\n      return success;\n    }",
    "secondary": null,
    "target": "all",
    "type": "Fairy",
    "zMove": {
      "boost": {
        "def": 1
      }
    },
    "contestType": "Beautiful"
  },
  "flowertrick": {
    "id": "flowertrick",
    "num": 870,
    "accuracy": true,
    "basePower": 70,
    "category": "Physical",
    "name": "Flower Trick",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "willCrit": true,
    "secondary": null,
    "target": "normal",
    "type": "Grass"
  },
  "fly": {
    "id": "fly",
    "inherit": true,
    "basePower": 70
  },
  "flyingpress": {
    "id": "flyingpress",
    "num": 560,
    "accuracy": 95,
    "basePower": 100,
    "category": "Physical",
    "name": "Flying Press",
    "pp": 10,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "gravity": 1,
      "distance": 1,
      "nonsky": 1,
      "metronome": 1
    },
    "onEffectiveness": "onEffectiveness(typeMod, target, type, move) {\n      return typeMod + this.dex.getEffectiveness(\"Flying\", type);\n    }",
    "priority": 0,
    "secondary": null,
    "target": "any",
    "type": "Fighting",
    "zMove": {
      "basePower": 170
    },
    "contestType": "Tough"
  },
  "focusblast": {
    "id": "focusblast",
    "num": 411,
    "accuracy": 70,
    "basePower": 120,
    "category": "Special",
    "name": "Focus Blast",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "bullet": 1
    },
    "secondary": {
      "chance": 10,
      "boosts": {
        "spd": -1
      }
    },
    "target": "normal",
    "type": "Fighting",
    "contestType": "Cool"
  },
  "focusenergy": {
    "id": "focusenergy",
    "inherit": true,
    "condition": {
      "onStart": "onStart(pokemon) {\n        this.add(\"-start\", pokemon, \"move: Focus Energy\");\n      }",
      "onModifyCritRatio": "onModifyCritRatio(critRatio) {\n        return critRatio + 1;\n      }"
    }
  },
  "focuspunch": {
    "id": "focuspunch",
    "num": 264,
    "accuracy": 100,
    "basePower": 150,
    "category": "Physical",
    "name": "Focus Punch",
    "pp": 20,
    "priority": -3,
    "flags": {
      "contact": 1,
      "protect": 1,
      "punch": 1,
      "failmefirst": 1,
      "nosleeptalk": 1,
      "noassist": 1,
      "failcopycat": 1,
      "failinstruct": 1
    },
    "priorityChargeCallback": "priorityChargeCallback(pokemon) {\n      pokemon.addVolatile(\"focuspunch\");\n    }",
    "beforeMoveCallback": "beforeMoveCallback(pokemon) {\n      if (pokemon.volatiles[\"focuspunch\"]?.lostFocus) {\n        this.add(\"cant\", pokemon, \"Focus Punch\", \"Focus Punch\");\n        return true;\n      }\n    }",
    "condition": {
      "duration": 1,
      "onStart": "onStart(pokemon) {\n        this.add(\"-singleturn\", pokemon, \"move: Focus Punch\");\n      }",
      "onHit": "onHit(pokemon, source, move) {\n        if (move.category !== \"Status\") {\n          this.effectState.lostFocus = true;\n        }\n      }",
      "onTryAddVolatile": "onTryAddVolatile(status, pokemon) {\n        if (status.id === \"flinch\") return null;\n      }"
    },
    "secondary": null,
    "target": "normal",
    "type": "Fighting",
    "contestType": "Tough"
  },
  "followme": {
    "id": "followme",
    "inherit": true,
    "slotCondition": "followme",
    "condition": {
      "duration": 1,
      "onStart": "onStart(target, source, effect) {\n        this.add(\"-singleturn\", target, \"move: Follow Me\");\n        this.effectState.slot = target.getSlot();\n      }",
      "onFoeRedirectTargetPriority": 1,
      "onFoeRedirectTarget": "onFoeRedirectTarget(target, source, source2, move) {\n        const userSlot = this.getAtSlot(this.effectState.slot);\n        if (this.validTarget(userSlot, source, move.target)) {\n          return userSlot;\n        }\n      }"
    }
  },
  "forcepalm": {
    "id": "forcepalm",
    "num": 395,
    "accuracy": 100,
    "basePower": 60,
    "category": "Physical",
    "name": "Force Palm",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 30,
      "status": "par"
    },
    "target": "normal",
    "type": "Fighting",
    "contestType": "Cool"
  },
  "foresight": {
    "id": "foresight",
    "inherit": true,
    "accuracy": 100
  },
  "forestscurse": {
    "id": "forestscurse",
    "num": 571,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Forest's Curse",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "allyanim": 1,
      "metronome": 1
    },
    "onHit": "onHit(target) {\n      if (target.hasType(\"Grass\")) return false;\n      if (!target.addType(\"Grass\")) return false;\n      this.add(\"-start\", target, \"typeadd\", \"Grass\", \"[from] move: Forest's Curse\");\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Grass",
    "zMove": {
      "boost": {
        "atk": 1,
        "def": 1,
        "spa": 1,
        "spd": 1,
        "spe": 1
      }
    },
    "contestType": "Clever"
  },
  "foulplay": {
    "id": "foulplay",
    "num": 492,
    "accuracy": 100,
    "basePower": 95,
    "category": "Physical",
    "name": "Foul Play",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "overrideOffensivePokemon": "target",
    "secondary": null,
    "target": "normal",
    "type": "Dark",
    "contestType": "Clever"
  },
  "freezedry": {
    "id": "freezedry",
    "num": 573,
    "accuracy": 100,
    "basePower": 70,
    "category": "Special",
    "name": "Freeze-Dry",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onEffectiveness": "onEffectiveness(typeMod, target, type) {\n      if (type === \"Water\") return 1;\n    }",
    "secondary": {
      "chance": 10,
      "status": "frz"
    },
    "target": "normal",
    "type": "Ice",
    "contestType": "Beautiful"
  },
  "freezeshock": {
    "id": "freezeshock",
    "num": 553,
    "accuracy": 90,
    "basePower": 140,
    "category": "Physical",
    "name": "Freeze Shock",
    "pp": 5,
    "priority": 0,
    "flags": {
      "charge": 1,
      "protect": 1,
      "mirror": 1,
      "nosleeptalk": 1,
      "failinstruct": 1
    },
    "onTryMove": "onTryMove(attacker, defender, move) {\n      if (attacker.removeVolatile(move.id)) {\n        return;\n      }\n      this.add(\"-prepare\", attacker, move.name);\n      if (!this.runEvent(\"ChargeMove\", attacker, defender, move)) {\n        return;\n      }\n      attacker.addVolatile(\"twoturnmove\", defender);\n      return null;\n    }",
    "secondary": {
      "chance": 30,
      "status": "par"
    },
    "target": "normal",
    "type": "Ice",
    "contestType": "Beautiful"
  },
  "freezingglare": {
    "id": "freezingglare",
    "num": 821,
    "accuracy": 100,
    "basePower": 90,
    "category": "Special",
    "name": "Freezing Glare",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "secondary": {
      "chance": 10,
      "status": "frz"
    },
    "target": "normal",
    "type": "Psychic"
  },
  "freezyfrost": {
    "id": "freezyfrost",
    "num": 739,
    "accuracy": 90,
    "basePower": 100,
    "category": "Special",
    "isNonstandard": "LGPE",
    "name": "Freezy Frost",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "onHit": "onHit() {\n      this.add(\"-clearallboost\");\n      for (const pokemon of this.getAllActive()) {\n        pokemon.clearBoosts();\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Ice",
    "contestType": "Clever"
  },
  "frenzyplant": {
    "id": "frenzyplant",
    "num": 338,
    "accuracy": 90,
    "basePower": 150,
    "category": "Special",
    "name": "Frenzy Plant",
    "pp": 5,
    "priority": 0,
    "flags": {
      "recharge": 1,
      "protect": 1,
      "mirror": 1,
      "nonsky": 1,
      "metronome": 1
    },
    "self": {
      "volatileStatus": "mustrecharge"
    },
    "secondary": null,
    "target": "normal",
    "type": "Grass",
    "contestType": "Cool"
  },
  "frostbreath": {
    "id": "frostbreath",
    "num": 524,
    "accuracy": 90,
    "basePower": 60,
    "category": "Special",
    "name": "Frost Breath",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "willCrit": true,
    "secondary": null,
    "target": "normal",
    "type": "Ice",
    "contestType": "Beautiful"
  },
  "frustration": {
    "id": "frustration",
    "inherit": true,
    "basePowerCallback": "basePowerCallback(pokemon) {\n      return Math.floor((255 - pokemon.happiness) * 10 / 25) || null;\n    }"
  },
  "furyattack": {
    "id": "furyattack",
    "num": 31,
    "accuracy": 85,
    "basePower": 15,
    "category": "Physical",
    "name": "Fury Attack",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "multihit": [
      2,
      5
    ],
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Cool"
  },
  "furycutter": {
    "id": "furycutter",
    "inherit": true,
    "onHit": "onHit(target, source) {\n      source.addVolatile(\"furycutter\");\n    }"
  },
  "furyswipes": {
    "id": "furyswipes",
    "num": 154,
    "accuracy": 80,
    "basePower": 18,
    "category": "Physical",
    "name": "Fury Swipes",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "multihit": [
      2,
      5
    ],
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "maxMove": {
      "basePower": 100
    },
    "contestType": "Tough"
  },
  "fusionbolt": {
    "id": "fusionbolt",
    "num": 559,
    "accuracy": 100,
    "basePower": 100,
    "category": "Physical",
    "name": "Fusion Bolt",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onBasePower": "onBasePower(basePower, pokemon) {\n      if (this.lastSuccessfulMoveThisTurn === \"fusionflare\") {\n        this.debug(\"double power\");\n        return this.chainModify(2);\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Electric",
    "contestType": "Cool"
  },
  "fusionflare": {
    "id": "fusionflare",
    "num": 558,
    "accuracy": 100,
    "basePower": 100,
    "category": "Special",
    "name": "Fusion Flare",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "defrost": 1,
      "metronome": 1
    },
    "onBasePower": "onBasePower(basePower, pokemon) {\n      if (this.lastSuccessfulMoveThisTurn === \"fusionbolt\") {\n        this.debug(\"double power\");\n        return this.chainModify(2);\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Fire",
    "contestType": "Beautiful"
  },
  "futuresight": {
    "id": "futuresight",
    "num": 248,
    "accuracy": 100,
    "basePower": 120,
    "category": "Special",
    "name": "Future Sight",
    "pp": 10,
    "priority": 0,
    "flags": {
      "allyanim": 1,
      "metronome": 1,
      "futuremove": 1
    },
    "ignoreImmunity": true,
    "onTry": "onTry(source, target) {\n      if (!target.side.addSlotCondition(target, \"futuremove\")) return false;\n      Object.assign(target.side.slotConditions[target.position][\"futuremove\"], {\n        move: \"futuresight\",\n        source,\n        moveData: {\n          id: \"futuresight\",\n          name: \"Future Sight\",\n          accuracy: 100,\n          basePower: 120,\n          category: \"Special\",\n          priority: 0,\n          flags: { allyanim: 1, metronome: 1, futuremove: 1 },\n          ignoreImmunity: false,\n          effectType: \"Move\",\n          type: \"Psychic\"\n        }\n      });\n      this.add(\"-start\", source, \"move: Future Sight\");\n      return this.NOT_FAIL;\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Psychic",
    "contestType": "Clever"
  },
  "gastroacid": {
    "id": "gastroacid",
    "num": 380,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Gastro Acid",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "allyanim": 1,
      "metronome": 1
    },
    "volatileStatus": "gastroacid",
    "onTryHit": "onTryHit(target) {\n      if (target.getAbility().flags[\"cantsuppress\"]) {\n        return false;\n      }\n      if (target.hasItem(\"Ability Shield\")) {\n        this.add(\"-block\", target, \"item: Ability Shield\");\n        return null;\n      }\n    }",
    "condition": {
      "onStart": "onStart(pokemon) {\n        if (pokemon.hasItem(\"Ability Shield\")) return false;\n        this.add(\"-endability\", pokemon);\n        this.singleEvent(\"End\", pokemon.getAbility(), pokemon.abilityState, pokemon, pokemon, \"gastroacid\");\n      }",
      "onCopy": "onCopy(pokemon) {\n        if (pokemon.getAbility().flags[\"cantsuppress\"]) pokemon.removeVolatile(\"gastroacid\");\n      }"
    },
    "secondary": null,
    "target": "normal",
    "type": "Poison",
    "zMove": {
      "boost": {
        "spe": 1
      }
    },
    "contestType": "Tough"
  },
  "geargrind": {
    "id": "geargrind",
    "num": 544,
    "accuracy": 85,
    "basePower": 50,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Gear Grind",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "multihit": 2,
    "secondary": null,
    "target": "normal",
    "type": "Steel",
    "zMove": {
      "basePower": 180
    },
    "maxMove": {
      "basePower": 130
    },
    "contestType": "Clever"
  },
  "gearup": {
    "id": "gearup",
    "num": 674,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Gear Up",
    "pp": 20,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "bypasssub": 1,
      "metronome": 1
    },
    "onHitSide": "onHitSide(side, source, move) {\n      const targets = side.allies().filter((target) => target.hasAbility([\"plus\", \"minus\"]) && (!target.volatiles[\"maxguard\"] || this.runEvent(\"TryHit\", target, source, move)));\n      if (!targets.length) return false;\n      let didSomething = false;\n      for (const target of targets) {\n        didSomething = this.boost({ atk: 1, spa: 1 }, target, source, move, false, true) || didSomething;\n      }\n      return didSomething;\n    }",
    "secondary": null,
    "target": "allySide",
    "type": "Steel",
    "zMove": {
      "boost": {
        "spa": 1
      }
    },
    "contestType": "Clever"
  },
  "genesissupernova": {
    "id": "genesissupernova",
    "num": 703,
    "accuracy": true,
    "basePower": 185,
    "category": "Special",
    "isNonstandard": "Past",
    "name": "Genesis Supernova",
    "pp": 1,
    "priority": 0,
    "flags": {},
    "isZ": "mewniumz",
    "secondary": {
      "chance": 100,
      "self": {
        "onHit": "onHit() {\n          this.field.setTerrain(\"psychicterrain\");\n        }"
      }
    },
    "target": "normal",
    "type": "Psychic",
    "contestType": "Cool"
  },
  "geomancy": {
    "id": "geomancy",
    "num": 601,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Geomancy",
    "pp": 10,
    "priority": 0,
    "flags": {
      "charge": 1,
      "nonsky": 1,
      "metronome": 1,
      "nosleeptalk": 1,
      "failinstruct": 1
    },
    "onTryMove": "onTryMove(attacker, defender, move) {\n      if (attacker.removeVolatile(move.id)) {\n        return;\n      }\n      this.add(\"-prepare\", attacker, move.name);\n      if (!this.runEvent(\"ChargeMove\", attacker, defender, move)) {\n        return;\n      }\n      attacker.addVolatile(\"twoturnmove\", defender);\n      return null;\n    }",
    "boosts": {
      "spa": 2,
      "spd": 2,
      "spe": 2
    },
    "secondary": null,
    "target": "self",
    "type": "Fairy",
    "zMove": {
      "boost": {
        "atk": 1,
        "def": 1,
        "spa": 1,
        "spd": 1,
        "spe": 1
      }
    },
    "contestType": "Beautiful"
  },
  "gigadrain": {
    "id": "gigadrain",
    "inherit": true,
    "pp": 5
  },
  "gigaimpact": {
    "id": "gigaimpact",
    "num": 416,
    "accuracy": 90,
    "basePower": 150,
    "category": "Physical",
    "name": "Giga Impact",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "recharge": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "self": {
      "volatileStatus": "mustrecharge"
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Tough"
  },
  "gigatonhammer": {
    "id": "gigatonhammer",
    "num": 893,
    "accuracy": 100,
    "basePower": 160,
    "category": "Physical",
    "name": "Gigaton Hammer",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "cantusetwice": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Steel"
  },
  "gigavolthavoc": {
    "id": "gigavolthavoc",
    "num": 646,
    "accuracy": true,
    "basePower": 1,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Gigavolt Havoc",
    "pp": 1,
    "priority": 0,
    "flags": {},
    "isZ": "electriumz",
    "secondary": null,
    "target": "normal",
    "type": "Electric",
    "contestType": "Cool"
  },
  "glaciallance": {
    "id": "glaciallance",
    "num": 824,
    "accuracy": 100,
    "basePower": 120,
    "category": "Physical",
    "name": "Glacial Lance",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "secondary": null,
    "target": "allAdjacentFoes",
    "type": "Ice"
  },
  "glaciate": {
    "id": "glaciate",
    "num": 549,
    "accuracy": 95,
    "basePower": 65,
    "category": "Special",
    "name": "Glaciate",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 100,
      "boosts": {
        "spe": -1
      }
    },
    "target": "allAdjacentFoes",
    "type": "Ice",
    "contestType": "Beautiful"
  },
  "glaiverush": {
    "id": "glaiverush",
    "num": 862,
    "accuracy": 100,
    "basePower": 120,
    "category": "Physical",
    "name": "Glaive Rush",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "self": {
      "volatileStatus": "glaiverush"
    },
    "condition": {
      "noCopy": true,
      "onStart": "onStart(pokemon) {\n        this.add(\"-singlemove\", pokemon, \"Glaive Rush\", \"[silent]\");\n      }",
      "onAccuracy": "onAccuracy() {\n        return true;\n      }",
      "onSourceModifyDamage": "onSourceModifyDamage() {\n        return this.chainModify(2);\n      }",
      "onBeforeMovePriority": 100,
      "onBeforeMove": "onBeforeMove(pokemon) {\n        this.debug(\"removing Glaive Rush drawback before attack\");\n        pokemon.removeVolatile(\"glaiverush\");\n      }"
    },
    "secondary": null,
    "target": "normal",
    "type": "Dragon"
  },
  "glare": {
    "id": "glare",
    "inherit": true,
    "ignoreImmunity": false
  },
  "glitzyglow": {
    "id": "glitzyglow",
    "num": 736,
    "accuracy": 95,
    "basePower": 80,
    "category": "Special",
    "isNonstandard": "LGPE",
    "name": "Glitzy Glow",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "self": {
      "sideCondition": "lightscreen"
    },
    "secondary": null,
    "target": "normal",
    "type": "Psychic",
    "contestType": "Clever"
  },
  "gmaxbefuddle": {
    "id": "gmaxbefuddle",
    "num": 1000,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Gigantamax",
    "name": "G-Max Befuddle",
    "pp": 5,
    "priority": 0,
    "flags": {},
    "isMax": "Butterfree",
    "self": {
      "onHit": "onHit(source) {\n        for (const pokemon of source.foes()) {\n          const result = this.random(3);\n          if (result === 0) {\n            pokemon.trySetStatus(\"slp\", source);\n          } else if (result === 1) {\n            pokemon.trySetStatus(\"par\", source);\n          } else {\n            pokemon.trySetStatus(\"psn\", source);\n          }\n        }\n      }"
    },
    "target": "adjacentFoe",
    "type": "Bug",
    "contestType": "Cool"
  },
  "gmaxcannonade": {
    "id": "gmaxcannonade",
    "num": 1000,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Gigantamax",
    "name": "G-Max Cannonade",
    "pp": 10,
    "priority": 0,
    "flags": {},
    "isMax": "Blastoise",
    "self": {
      "onHit": "onHit(source) {\n        for (const side of source.side.foeSidesWithConditions()) {\n          side.addSideCondition(\"gmaxcannonade\");\n        }\n      }"
    },
    "condition": {
      "duration": 4,
      "onSideStart": "onSideStart(targetSide) {\n        this.add(\"-sidestart\", targetSide, \"G-Max Cannonade\");\n      }",
      "onResidualOrder": 5,
      "onResidualSubOrder": 1,
      "onResidual": "onResidual(target) {\n        if (!target.hasType(\"Water\")) this.damage(target.baseMaxhp / 6, target);\n      }",
      "onSideResidualOrder": 26,
      "onSideResidualSubOrder": 11,
      "onSideEnd": "onSideEnd(targetSide) {\n        this.add(\"-sideend\", targetSide, \"G-Max Cannonade\");\n      }"
    },
    "secondary": null,
    "target": "adjacentFoe",
    "type": "Water",
    "contestType": "Cool"
  },
  "gmaxcentiferno": {
    "id": "gmaxcentiferno",
    "num": 1000,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Gigantamax",
    "name": "G-Max Centiferno",
    "pp": 5,
    "priority": 0,
    "flags": {},
    "isMax": "Centiskorch",
    "self": {
      "onHit": "onHit(source) {\n        for (const pokemon of source.foes()) {\n          pokemon.addVolatile(\"partiallytrapped\", source, this.dex.getActiveMove(\"G-Max Centiferno\"));\n        }\n      }"
    },
    "secondary": null,
    "target": "adjacentFoe",
    "type": "Fire",
    "contestType": "Cool"
  },
  "gmaxchistrike": {
    "id": "gmaxchistrike",
    "num": 1000,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Gigantamax",
    "name": "G-Max Chi Strike",
    "pp": 5,
    "priority": 0,
    "flags": {},
    "isMax": "Machamp",
    "self": {
      "onHit": "onHit(source) {\n        for (const pokemon of source.alliesAndSelf()) {\n          pokemon.addVolatile(\"gmaxchistrike\");\n        }\n      }"
    },
    "condition": {
      "noCopy": true,
      "onStart": "onStart(target, source, effect) {\n        this.effectState.layers = 1;\n        if (![\"costar\", \"imposter\", \"psychup\", \"transform\"].includes(effect?.id)) {\n          this.add(\"-start\", target, \"move: G-Max Chi Strike\");\n        }\n      }",
      "onRestart": "onRestart(target, source, effect) {\n        if (this.effectState.layers >= 3) return false;\n        this.effectState.layers++;\n        if (![\"costar\", \"imposter\", \"psychup\", \"transform\"].includes(effect?.id)) {\n          this.add(\"-start\", target, \"move: G-Max Chi Strike\");\n        }\n      }",
      "onModifyCritRatio": "onModifyCritRatio(critRatio) {\n        return critRatio + this.effectState.layers;\n      }"
    },
    "secondary": null,
    "target": "adjacentFoe",
    "type": "Fighting",
    "contestType": "Cool"
  },
  "gmaxcuddle": {
    "id": "gmaxcuddle",
    "num": 1000,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Gigantamax",
    "name": "G-Max Cuddle",
    "pp": 5,
    "priority": 0,
    "flags": {},
    "isMax": "Eevee",
    "self": {
      "onHit": "onHit(source) {\n        for (const pokemon of source.foes()) {\n          pokemon.addVolatile(\"attract\");\n        }\n      }"
    },
    "secondary": null,
    "target": "adjacentFoe",
    "type": "Normal",
    "contestType": "Cool"
  },
  "gmaxdepletion": {
    "id": "gmaxdepletion",
    "num": 1000,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Gigantamax",
    "name": "G-Max Depletion",
    "pp": 5,
    "priority": 0,
    "flags": {},
    "isMax": "Duraludon",
    "self": {
      "onHit": "onHit(source) {\n        for (const pokemon of source.foes()) {\n          let move = pokemon.lastMove;\n          if (!move || move.isZ) continue;\n          if (move.isMax && move.baseMove) move = this.dex.moves.get(move.baseMove);\n          const ppDeducted = pokemon.deductPP(move.id, 2);\n          if (ppDeducted) {\n            this.add(\"-activate\", pokemon, \"move: G-Max Depletion\", move.name, ppDeducted);\n          }\n        }\n      }"
    },
    "secondary": null,
    "target": "adjacentFoe",
    "type": "Dragon",
    "contestType": "Cool"
  },
  "gmaxdrumsolo": {
    "id": "gmaxdrumsolo",
    "num": 1000,
    "accuracy": true,
    "basePower": 160,
    "category": "Physical",
    "isNonstandard": "Gigantamax",
    "name": "G-Max Drum Solo",
    "pp": 5,
    "priority": 0,
    "flags": {},
    "isMax": "Rillaboom",
    "ignoreAbility": true,
    "secondary": null,
    "target": "adjacentFoe",
    "type": "Grass",
    "contestType": "Cool"
  },
  "gmaxfinale": {
    "id": "gmaxfinale",
    "num": 1000,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Gigantamax",
    "name": "G-Max Finale",
    "pp": 5,
    "priority": 0,
    "flags": {},
    "isMax": "Alcremie",
    "self": {
      "onHit": "onHit(target, source, move) {\n        for (const pokemon of source.alliesAndSelf()) {\n          this.heal(pokemon.maxhp / 6, pokemon, source, move);\n        }\n      }"
    },
    "secondary": null,
    "target": "adjacentFoe",
    "type": "Fairy",
    "contestType": "Cool"
  },
  "gmaxfireball": {
    "id": "gmaxfireball",
    "num": 1000,
    "accuracy": true,
    "basePower": 160,
    "category": "Physical",
    "isNonstandard": "Gigantamax",
    "name": "G-Max Fireball",
    "pp": 5,
    "priority": 0,
    "flags": {},
    "isMax": "Cinderace",
    "ignoreAbility": true,
    "secondary": null,
    "target": "adjacentFoe",
    "type": "Fire",
    "contestType": "Cool"
  },
  "gmaxfoamburst": {
    "id": "gmaxfoamburst",
    "num": 1000,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Gigantamax",
    "name": "G-Max Foam Burst",
    "pp": 5,
    "priority": 0,
    "flags": {},
    "isMax": "Kingler",
    "self": {
      "onHit": "onHit(source) {\n        for (const pokemon of source.foes()) {\n          this.boost({ spe: -2 }, pokemon);\n        }\n      }"
    },
    "secondary": null,
    "target": "adjacentFoe",
    "type": "Water",
    "contestType": "Cool"
  },
  "gmaxgoldrush": {
    "id": "gmaxgoldrush",
    "num": 1000,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Gigantamax",
    "name": "G-Max Gold Rush",
    "pp": 5,
    "priority": 0,
    "flags": {},
    "isMax": "Meowth",
    "self": {
      "onHit": "onHit(source) {\n        for (const pokemon of source.foes()) {\n          pokemon.addVolatile(\"confusion\");\n        }\n      }"
    },
    "secondary": null,
    "target": "adjacentFoe",
    "type": "Normal",
    "contestType": "Cool"
  },
  "gmaxgravitas": {
    "id": "gmaxgravitas",
    "num": 1000,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Gigantamax",
    "name": "G-Max Gravitas",
    "pp": 5,
    "priority": 0,
    "flags": {},
    "isMax": "Orbeetle",
    "self": {
      "pseudoWeather": "gravity"
    },
    "target": "adjacentFoe",
    "type": "Psychic",
    "contestType": "Cool"
  },
  "gmaxhydrosnipe": {
    "id": "gmaxhydrosnipe",
    "num": 1000,
    "accuracy": true,
    "basePower": 160,
    "category": "Physical",
    "isNonstandard": "Gigantamax",
    "name": "G-Max Hydrosnipe",
    "pp": 5,
    "priority": 0,
    "flags": {},
    "isMax": "Inteleon",
    "ignoreAbility": true,
    "secondary": null,
    "target": "adjacentFoe",
    "type": "Water",
    "contestType": "Cool"
  },
  "gmaxmalodor": {
    "id": "gmaxmalodor",
    "num": 1000,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Gigantamax",
    "name": "G-Max Malodor",
    "pp": 5,
    "priority": 0,
    "flags": {},
    "isMax": "Garbodor",
    "self": {
      "onHit": "onHit(source) {\n        for (const pokemon of source.foes()) {\n          pokemon.trySetStatus(\"psn\", source);\n        }\n      }"
    },
    "target": "adjacentFoe",
    "type": "Poison",
    "contestType": "Cool"
  },
  "gmaxmeltdown": {
    "id": "gmaxmeltdown",
    "num": 1000,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Gigantamax",
    "name": "G-Max Meltdown",
    "pp": 5,
    "priority": 0,
    "flags": {},
    "isMax": "Melmetal",
    "self": {
      "onHit": "onHit(source, target, effect) {\n        for (const pokemon of source.foes()) {\n          if (!pokemon.volatiles[\"dynamax\"]) pokemon.addVolatile(\"torment\", source, effect);\n        }\n      }"
    },
    "secondary": null,
    "target": "adjacentFoe",
    "type": "Steel",
    "contestType": "Cool"
  },
  "gmaxoneblow": {
    "id": "gmaxoneblow",
    "num": 1000,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Gigantamax",
    "name": "G-Max One Blow",
    "pp": 5,
    "priority": 0,
    "flags": {},
    "isMax": "Urshifu",
    "secondary": null,
    "target": "adjacentFoe",
    "type": "Dark",
    "contestType": "Cool"
  },
  "gmaxrapidflow": {
    "id": "gmaxrapidflow",
    "num": 1000,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Gigantamax",
    "name": "G-Max Rapid Flow",
    "pp": 5,
    "priority": 0,
    "flags": {},
    "isMax": "Urshifu-Rapid-Strike",
    "secondary": null,
    "target": "adjacentFoe",
    "type": "Water",
    "contestType": "Cool"
  },
  "gmaxreplenish": {
    "id": "gmaxreplenish",
    "num": 1000,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Gigantamax",
    "name": "G-Max Replenish",
    "pp": 5,
    "priority": 0,
    "flags": {},
    "isMax": "Snorlax",
    "self": {
      "onHit": "onHit(source) {\n        if (this.randomChance(1, 2)) return;\n        for (const pokemon of source.alliesAndSelf()) {\n          if (pokemon.item) continue;\n          if (pokemon.lastItem && this.dex.items.get(pokemon.lastItem).isBerry) {\n            const item = pokemon.lastItem;\n            pokemon.lastItem = \"\";\n            this.add(\"-item\", pokemon, this.dex.items.get(item), \"[from] move: G-Max Replenish\");\n            pokemon.setItem(item);\n          }\n        }\n      }"
    },
    "secondary": null,
    "target": "adjacentFoe",
    "type": "Normal",
    "contestType": "Cool"
  },
  "gmaxresonance": {
    "id": "gmaxresonance",
    "num": 1000,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Gigantamax",
    "name": "G-Max Resonance",
    "pp": 5,
    "priority": 0,
    "flags": {},
    "isMax": "Lapras",
    "self": {
      "sideCondition": "auroraveil"
    },
    "secondary": null,
    "target": "adjacentFoe",
    "type": "Ice",
    "contestType": "Cool"
  },
  "gmaxsandblast": {
    "id": "gmaxsandblast",
    "num": 1000,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Gigantamax",
    "name": "G-Max Sandblast",
    "pp": 5,
    "priority": 0,
    "flags": {},
    "isMax": "Sandaconda",
    "self": {
      "onHit": "onHit(source) {\n        for (const pokemon of source.foes()) {\n          pokemon.addVolatile(\"partiallytrapped\", source, this.dex.getActiveMove(\"G-Max Sandblast\"));\n        }\n      }"
    },
    "secondary": null,
    "target": "adjacentFoe",
    "type": "Ground",
    "contestType": "Cool"
  },
  "gmaxsmite": {
    "id": "gmaxsmite",
    "num": 1000,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Gigantamax",
    "name": "G-Max Smite",
    "pp": 5,
    "priority": 0,
    "flags": {},
    "isMax": "Hatterene",
    "self": {
      "onHit": "onHit(source) {\n        for (const pokemon of source.foes()) {\n          pokemon.addVolatile(\"confusion\", source);\n        }\n      }"
    },
    "secondary": null,
    "target": "adjacentFoe",
    "type": "Fairy",
    "contestType": "Cool"
  },
  "gmaxsnooze": {
    "id": "gmaxsnooze",
    "num": 1000,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Gigantamax",
    "name": "G-Max Snooze",
    "pp": 5,
    "priority": 0,
    "flags": {},
    "isMax": "Grimmsnarl",
    "onHit": "onHit(target) {\n      if (target.status || !target.runStatusImmunity(\"slp\")) return;\n      if (this.randomChance(1, 2)) return;\n      target.addVolatile(\"yawn\");\n    }",
    "onAfterSubDamage": "onAfterSubDamage(damage, target) {\n      if (target.status || !target.runStatusImmunity(\"slp\")) return;\n      if (this.randomChance(1, 2)) return;\n      target.addVolatile(\"yawn\");\n    }",
    "secondary": null,
    "target": "adjacentFoe",
    "type": "Dark",
    "contestType": "Cool"
  },
  "gmaxsteelsurge": {
    "id": "gmaxsteelsurge",
    "num": 1000,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Gigantamax",
    "name": "G-Max Steelsurge",
    "pp": 5,
    "priority": 0,
    "flags": {},
    "isMax": "Copperajah",
    "self": {
      "onHit": "onHit(source) {\n        for (const side of source.side.foeSidesWithConditions()) {\n          side.addSideCondition(\"gmaxsteelsurge\");\n        }\n      }"
    },
    "condition": {
      "onSideStart": "onSideStart(side) {\n        this.add(\"-sidestart\", side, \"move: G-Max Steelsurge\");\n      }",
      "onSwitchIn": "onSwitchIn(pokemon) {\n        if (pokemon.hasItem(\"heavydutyboots\")) return;\n        const steelHazard = this.dex.getActiveMove(\"Stealth Rock\");\n        steelHazard.type = \"Steel\";\n        const typeMod = this.clampIntRange(pokemon.runEffectiveness(steelHazard), -6, 6);\n        this.damage(pokemon.maxhp * 2 ** typeMod / 8);\n      }"
    },
    "secondary": null,
    "target": "adjacentFoe",
    "type": "Steel",
    "contestType": "Cool"
  },
  "gmaxstonesurge": {
    "id": "gmaxstonesurge",
    "num": 1000,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Gigantamax",
    "name": "G-Max Stonesurge",
    "pp": 5,
    "priority": 0,
    "flags": {},
    "isMax": "Drednaw",
    "self": {
      "onHit": "onHit(source) {\n        for (const side of source.side.foeSidesWithConditions()) {\n          side.addSideCondition(\"stealthrock\");\n        }\n      }"
    },
    "secondary": null,
    "target": "adjacentFoe",
    "type": "Water",
    "contestType": "Cool"
  },
  "gmaxstunshock": {
    "id": "gmaxstunshock",
    "num": 1000,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Gigantamax",
    "name": "G-Max Stun Shock",
    "pp": 10,
    "priority": 0,
    "flags": {},
    "isMax": "Toxtricity",
    "self": {
      "onHit": "onHit(source) {\n        for (const pokemon of source.foes()) {\n          const result = this.random(2);\n          if (result === 0) {\n            pokemon.trySetStatus(\"par\", source);\n          } else {\n            pokemon.trySetStatus(\"psn\", source);\n          }\n        }\n      }"
    },
    "secondary": null,
    "target": "adjacentFoe",
    "type": "Electric",
    "contestType": "Cool"
  },
  "gmaxsweetness": {
    "id": "gmaxsweetness",
    "num": 1000,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Gigantamax",
    "name": "G-Max Sweetness",
    "pp": 10,
    "priority": 0,
    "flags": {},
    "isMax": "Appletun",
    "self": {
      "onHit": "onHit(source) {\n        for (const ally of source.side.pokemon) {\n          ally.cureStatus();\n        }\n      }"
    },
    "secondary": null,
    "target": "adjacentFoe",
    "type": "Grass",
    "contestType": "Cool"
  },
  "gmaxtartness": {
    "id": "gmaxtartness",
    "num": 1000,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Gigantamax",
    "name": "G-Max Tartness",
    "pp": 10,
    "priority": 0,
    "flags": {},
    "isMax": "Flapple",
    "self": {
      "onHit": "onHit(source) {\n        for (const pokemon of source.foes()) {\n          this.boost({ evasion: -1 }, pokemon);\n        }\n      }"
    },
    "secondary": null,
    "target": "adjacentFoe",
    "type": "Grass",
    "contestType": "Cool"
  },
  "gmaxterror": {
    "id": "gmaxterror",
    "num": 1000,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Gigantamax",
    "name": "G-Max Terror",
    "pp": 10,
    "priority": 0,
    "flags": {},
    "isMax": "Gengar",
    "self": {
      "onHit": "onHit(source) {\n        for (const pokemon of source.foes()) {\n          pokemon.addVolatile(\"trapped\", source, null, \"trapper\");\n        }\n      }"
    },
    "secondary": null,
    "target": "adjacentFoe",
    "type": "Ghost",
    "contestType": "Cool"
  },
  "gmaxvinelash": {
    "id": "gmaxvinelash",
    "num": 1000,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Gigantamax",
    "name": "G-Max Vine Lash",
    "pp": 10,
    "priority": 0,
    "flags": {},
    "isMax": "Venusaur",
    "self": {
      "onHit": "onHit(source) {\n        for (const side of source.side.foeSidesWithConditions()) {\n          side.addSideCondition(\"gmaxvinelash\");\n        }\n      }"
    },
    "condition": {
      "duration": 4,
      "onSideStart": "onSideStart(targetSide) {\n        this.add(\"-sidestart\", targetSide, \"G-Max Vine Lash\");\n      }",
      "onResidualOrder": 5,
      "onResidualSubOrder": 1,
      "onResidual": "onResidual(target) {\n        if (!target.hasType(\"Grass\")) this.damage(target.baseMaxhp / 6, target);\n      }",
      "onSideResidualOrder": 26,
      "onSideResidualSubOrder": 11,
      "onSideEnd": "onSideEnd(targetSide) {\n        this.add(\"-sideend\", targetSide, \"G-Max Vine Lash\");\n      }"
    },
    "secondary": null,
    "target": "adjacentFoe",
    "type": "Grass",
    "contestType": "Cool"
  },
  "gmaxvolcalith": {
    "id": "gmaxvolcalith",
    "num": 1000,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Gigantamax",
    "name": "G-Max Volcalith",
    "pp": 10,
    "priority": 0,
    "flags": {},
    "isMax": "Coalossal",
    "self": {
      "onHit": "onHit(source) {\n        for (const side of source.side.foeSidesWithConditions()) {\n          side.addSideCondition(\"gmaxvolcalith\");\n        }\n      }"
    },
    "condition": {
      "duration": 4,
      "onSideStart": "onSideStart(targetSide) {\n        this.add(\"-sidestart\", targetSide, \"G-Max Volcalith\");\n      }",
      "onResidualOrder": 5,
      "onResidualSubOrder": 1,
      "onResidual": "onResidual(target) {\n        if (!target.hasType(\"Rock\")) this.damage(target.baseMaxhp / 6, target);\n      }",
      "onSideResidualOrder": 26,
      "onSideResidualSubOrder": 11,
      "onSideEnd": "onSideEnd(targetSide) {\n        this.add(\"-sideend\", targetSide, \"G-Max Volcalith\");\n      }"
    },
    "secondary": null,
    "target": "adjacentFoe",
    "type": "Rock",
    "contestType": "Cool"
  },
  "gmaxvoltcrash": {
    "id": "gmaxvoltcrash",
    "num": 1000,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Gigantamax",
    "name": "G-Max Volt Crash",
    "pp": 10,
    "priority": 0,
    "flags": {},
    "isMax": "Pikachu",
    "self": {
      "onHit": "onHit(source) {\n        for (const pokemon of source.foes()) {\n          pokemon.trySetStatus(\"par\", source);\n        }\n      }"
    },
    "secondary": null,
    "target": "adjacentFoe",
    "type": "Electric",
    "contestType": "Cool"
  },
  "gmaxwildfire": {
    "id": "gmaxwildfire",
    "num": 1000,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Gigantamax",
    "name": "G-Max Wildfire",
    "pp": 10,
    "priority": 0,
    "flags": {},
    "isMax": "Charizard",
    "self": {
      "onHit": "onHit(source) {\n        for (const side of source.side.foeSidesWithConditions()) {\n          side.addSideCondition(\"gmaxwildfire\");\n        }\n      }"
    },
    "condition": {
      "duration": 4,
      "onSideStart": "onSideStart(targetSide) {\n        this.add(\"-sidestart\", targetSide, \"G-Max Wildfire\");\n      }",
      "onResidualOrder": 5,
      "onResidualSubOrder": 1,
      "onResidual": "onResidual(target) {\n        if (!target.hasType(\"Fire\")) this.damage(target.baseMaxhp / 6, target);\n      }",
      "onSideResidualOrder": 26,
      "onSideResidualSubOrder": 11,
      "onSideEnd": "onSideEnd(targetSide) {\n        this.add(\"-sideend\", targetSide, \"G-Max Wildfire\");\n      }"
    },
    "secondary": null,
    "target": "adjacentFoe",
    "type": "Fire",
    "contestType": "Cool"
  },
  "gmaxwindrage": {
    "id": "gmaxwindrage",
    "num": 1000,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Gigantamax",
    "name": "G-Max Wind Rage",
    "pp": 10,
    "priority": 0,
    "flags": {},
    "isMax": "Corviknight",
    "self": {
      "onHit": "onHit(source) {\n        let success = false;\n        const removeAll = [\"spikes\", \"toxicspikes\", \"stealthrock\", \"stickyweb\", \"gmaxsteelsurge\"];\n        const removeTarget = [\"reflect\", \"lightscreen\", \"auroraveil\", \"safeguard\", \"mist\", ...removeAll];\n        for (const targetCondition of removeTarget) {\n          if (source.side.foe.removeSideCondition(targetCondition)) {\n            if (!removeAll.includes(targetCondition)) continue;\n            this.add(\"-sideend\", source.side.foe, this.dex.conditions.get(targetCondition).name, \"[from] move: G-Max Wind Rage\", `[of] ${source}`);\n            success = true;\n          }\n        }\n        for (const sideCondition of removeAll) {\n          if (source.side.removeSideCondition(sideCondition)) {\n            this.add(\"-sideend\", source.side, this.dex.conditions.get(sideCondition).name, \"[from] move: G-Max Wind Rage\", `[of] ${source}`);\n            success = true;\n          }\n        }\n        this.field.clearTerrain();\n        return success;\n      }"
    },
    "secondary": null,
    "target": "adjacentFoe",
    "type": "Flying",
    "contestType": "Cool"
  },
  "grassknot": {
    "id": "grassknot",
    "num": 447,
    "accuracy": 100,
    "basePower": 0,
    "basePowerCallback": "basePowerCallback(pokemon, target) {\n      const targetWeight = target.getWeight();\n      let bp;\n      if (targetWeight >= 2e3) {\n        bp = 120;\n      } else if (targetWeight >= 1e3) {\n        bp = 100;\n      } else if (targetWeight >= 500) {\n        bp = 80;\n      } else if (targetWeight >= 250) {\n        bp = 60;\n      } else if (targetWeight >= 100) {\n        bp = 40;\n      } else {\n        bp = 20;\n      }\n      this.debug(`BP: ${bp}`);\n      return bp;\n    }",
    "category": "Special",
    "name": "Grass Knot",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "nonsky": 1,
      "metronome": 1
    },
    "onTryHit": "onTryHit(target, source, move) {\n      if (target.volatiles[\"dynamax\"]) {\n        this.add(\"-fail\", source, \"move: Grass Knot\", \"[from] Dynamax\");\n        this.attrLastMove(\"[still]\");\n        return null;\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Grass",
    "zMove": {
      "basePower": 160
    },
    "maxMove": {
      "basePower": 130
    },
    "contestType": "Cute"
  },
  "grasspledge": {
    "id": "grasspledge",
    "num": 520,
    "accuracy": 100,
    "basePower": 80,
    "basePowerCallback": "basePowerCallback(target, source, move) {\n      if ([\"waterpledge\", \"firepledge\"].includes(move.sourceEffect)) {\n        this.add(\"-combine\");\n        return 150;\n      }\n      return move.basePower;\n    }",
    "category": "Special",
    "name": "Grass Pledge",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "nonsky": 1,
      "metronome": 1,
      "pledgecombo": 1
    },
    "onPrepareHit": "onPrepareHit(target, source, move) {\n      for (const action of this.queue.list) {\n        if (!action.move || !action.pokemon?.isActive || action.pokemon.fainted || action.maxMove || action.zmove) {\n          continue;\n        }\n        if (action.pokemon.isAlly(source) && [\"waterpledge\", \"firepledge\"].includes(action.move.id)) {\n          this.queue.prioritizeAction(action, move);\n          this.add(\"-waiting\", source, action.pokemon);\n          return null;\n        }\n      }\n    }",
    "onModifyMove": "onModifyMove(move) {\n      if (move.sourceEffect === \"waterpledge\") {\n        move.type = \"Grass\";\n        move.forceSTAB = true;\n        move.sideCondition = \"grasspledge\";\n      }\n      if (move.sourceEffect === \"firepledge\") {\n        move.type = \"Fire\";\n        move.forceSTAB = true;\n        move.sideCondition = \"firepledge\";\n      }\n    }",
    "condition": {
      "duration": 4,
      "onSideStart": "onSideStart(targetSide) {\n        this.add(\"-sidestart\", targetSide, \"Grass Pledge\");\n      }",
      "onSideResidualOrder": 26,
      "onSideResidualSubOrder": 9,
      "onSideEnd": "onSideEnd(targetSide) {\n        this.add(\"-sideend\", targetSide, \"Grass Pledge\");\n      }",
      "onModifySpe": "onModifySpe(spe, pokemon) {\n        return this.chainModify(0.25);\n      }"
    },
    "secondary": null,
    "target": "normal",
    "type": "Grass",
    "contestType": "Beautiful"
  },
  "grasswhistle": {
    "id": "grasswhistle",
    "num": 320,
    "accuracy": 55,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Grass Whistle",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "sound": 1,
      "bypasssub": 1,
      "metronome": 1
    },
    "status": "slp",
    "secondary": null,
    "target": "normal",
    "type": "Grass",
    "zMove": {
      "boost": {
        "spe": 1
      }
    },
    "contestType": "Clever"
  },
  "grassyglide": {
    "id": "grassyglide",
    "num": 803,
    "accuracy": 100,
    "basePower": 55,
    "category": "Physical",
    "name": "Grassy Glide",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onModifyPriority": "onModifyPriority(priority, source, target, move) {\n      if (this.field.isTerrain(\"grassyterrain\") && source.isGrounded()) {\n        return priority + 1;\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Grass",
    "contestType": "Cool"
  },
  "grassyterrain": {
    "id": "grassyterrain",
    "num": 580,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Grassy Terrain",
    "pp": 10,
    "priority": 0,
    "flags": {
      "nonsky": 1,
      "metronome": 1
    },
    "terrain": "grassyterrain",
    "condition": {
      "effectType": "Terrain",
      "duration": 5,
      "durationCallback": "durationCallback(source, effect) {\n        if (source?.hasItem(\"terrainextender\")) {\n          return 8;\n        }\n        return 5;\n      }",
      "onBasePowerPriority": 6,
      "onBasePower": "onBasePower(basePower, attacker, defender, move) {\n        const weakenedMoves = [\"earthquake\", \"bulldoze\", \"magnitude\"];\n        if (weakenedMoves.includes(move.id) && defender.isGrounded() && !defender.isSemiInvulnerable()) {\n          this.debug(\"move weakened by grassy terrain\");\n          return this.chainModify(0.5);\n        }\n        if (move.type === \"Grass\" && attacker.isGrounded()) {\n          this.debug(\"grassy terrain boost\");\n          return this.chainModify([5325, 4096]);\n        }\n      }",
      "onFieldStart": "onFieldStart(field, source, effect) {\n        if (effect?.effectType === \"Ability\") {\n          this.add(\"-fieldstart\", \"move: Grassy Terrain\", \"[from] ability: \" + effect.name, `[of] ${source}`);\n        } else {\n          this.add(\"-fieldstart\", \"move: Grassy Terrain\");\n        }\n      }",
      "onResidualOrder": 5,
      "onResidualSubOrder": 2,
      "onResidual": "onResidual(pokemon) {\n        if (pokemon.isGrounded() && !pokemon.isSemiInvulnerable()) {\n          this.heal(pokemon.baseMaxhp / 16, pokemon, pokemon);\n        } else {\n          this.debug(`Pokemon semi-invuln or not grounded; Grassy Terrain skipped`);\n        }\n      }",
      "onFieldResidualOrder": 27,
      "onFieldResidualSubOrder": 7,
      "onFieldEnd": "onFieldEnd() {\n        this.add(\"-fieldend\", \"move: Grassy Terrain\");\n      }"
    },
    "secondary": null,
    "target": "all",
    "type": "Grass",
    "zMove": {
      "boost": {
        "def": 1
      }
    },
    "contestType": "Beautiful"
  },
  "gravapple": {
    "id": "gravapple",
    "num": 788,
    "accuracy": 100,
    "basePower": 80,
    "category": "Physical",
    "name": "Grav Apple",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "onBasePower": "onBasePower(basePower) {\n      if (this.field.getPseudoWeather(\"gravity\")) {\n        return this.chainModify(1.5);\n      }\n    }",
    "secondary": {
      "chance": 100,
      "boosts": {
        "def": -1
      }
    },
    "target": "normal",
    "type": "Grass"
  },
  "gravity": {
    "id": "gravity",
    "num": 356,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Gravity",
    "pp": 5,
    "priority": 0,
    "flags": {
      "nonsky": 1,
      "metronome": 1
    },
    "pseudoWeather": "gravity",
    "condition": {
      "duration": 5,
      "durationCallback": "durationCallback(source, effect) {\n        if (source?.hasAbility(\"persistent\")) {\n          this.add(\"-activate\", source, \"ability: Persistent\", \"[move] Gravity\");\n          return 7;\n        }\n        return 5;\n      }",
      "onFieldStart": "onFieldStart(target, source) {\n        if (source?.hasAbility(\"persistent\")) {\n          this.add(\"-fieldstart\", \"move: Gravity\", \"[persistent]\");\n        } else {\n          this.add(\"-fieldstart\", \"move: Gravity\");\n        }\n        for (const pokemon of this.getAllActive()) {\n          let applies = false;\n          if (pokemon.removeVolatile(\"bounce\") || pokemon.removeVolatile(\"fly\")) {\n            applies = true;\n            this.queue.cancelMove(pokemon);\n            pokemon.removeVolatile(\"twoturnmove\");\n          }\n          if (pokemon.volatiles[\"skydrop\"]) {\n            applies = true;\n            this.queue.cancelMove(pokemon);\n            if (pokemon.volatiles[\"skydrop\"].source) {\n              this.add(\"-end\", pokemon.volatiles[\"twoturnmove\"].source, \"Sky Drop\", \"[interrupt]\");\n            }\n            pokemon.removeVolatile(\"skydrop\");\n            pokemon.removeVolatile(\"twoturnmove\");\n          }\n          if (pokemon.volatiles[\"magnetrise\"]) {\n            applies = true;\n            delete pokemon.volatiles[\"magnetrise\"];\n          }\n          if (pokemon.volatiles[\"telekinesis\"]) {\n            applies = true;\n            delete pokemon.volatiles[\"telekinesis\"];\n          }\n          if (applies) this.add(\"-activate\", pokemon, \"move: Gravity\");\n        }\n      }",
      "onModifyAccuracy": "onModifyAccuracy(accuracy) {\n        if (typeof accuracy !== \"number\") return;\n        return this.chainModify([6840, 4096]);\n      }",
      "onDisableMove": "onDisableMove(pokemon) {\n        for (const moveSlot of pokemon.moveSlots) {\n          if (this.dex.moves.get(moveSlot.id).flags[\"gravity\"]) {\n            pokemon.disableMove(moveSlot.id);\n          }\n        }\n      }",
      "onBeforeMovePriority": 6,
      "onBeforeMove": "onBeforeMove(pokemon, target, move) {\n        if (move.flags[\"gravity\"] && !move.isZ) {\n          this.add(\"cant\", pokemon, \"move: Gravity\", move);\n          return false;\n        }\n      }",
      "onModifyMove": "onModifyMove(move, pokemon, target) {\n        if (move.flags[\"gravity\"] && !move.isZ) {\n          this.add(\"cant\", pokemon, \"move: Gravity\", move);\n          return false;\n        }\n      }",
      "onFieldResidualOrder": 27,
      "onFieldResidualSubOrder": 2,
      "onFieldEnd": "onFieldEnd() {\n        this.add(\"-fieldend\", \"move: Gravity\");\n      }"
    },
    "secondary": null,
    "target": "all",
    "type": "Psychic",
    "zMove": {
      "boost": {
        "spa": 1
      }
    },
    "contestType": "Clever"
  },
  "growl": {
    "id": "growl",
    "num": 45,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Growl",
    "pp": 40,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "sound": 1,
      "bypasssub": 1,
      "metronome": 1
    },
    "boosts": {
      "atk": -1
    },
    "secondary": null,
    "target": "allAdjacentFoes",
    "type": "Normal",
    "zMove": {
      "boost": {
        "def": 1
      }
    },
    "contestType": "Cute"
  },
  "growth": {
    "id": "growth",
    "num": 74,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Growth",
    "pp": 20,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "onModifyMove": "onModifyMove(move, pokemon) {\n      if ([\"sunnyday\", \"desolateland\"].includes(pokemon.effectiveWeather())) move.boosts = { atk: 2, spa: 2 };\n    }",
    "boosts": {
      "atk": 1,
      "spa": 1
    },
    "secondary": null,
    "target": "self",
    "type": "Normal",
    "zMove": {
      "boost": {
        "spa": 1
      }
    },
    "contestType": "Beautiful"
  },
  "grudge": {
    "id": "grudge",
    "num": 288,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Grudge",
    "pp": 5,
    "priority": 0,
    "flags": {
      "bypasssub": 1,
      "metronome": 1
    },
    "volatileStatus": "grudge",
    "condition": {
      "onStart": "onStart(pokemon) {\n        this.add(\"-singlemove\", pokemon, \"Grudge\");\n      }",
      "onFaint": "onFaint(target, source, effect) {\n        if (!source || source.fainted || !effect) return;\n        if (effect.effectType === \"Move\" && !effect.flags[\"futuremove\"] && source.lastMove) {\n          let move = source.lastMove;\n          if (move.isMax && move.baseMove) move = this.dex.moves.get(move.baseMove);\n          for (const moveSlot of source.moveSlots) {\n            if (moveSlot.id === move.id) {\n              moveSlot.pp = 0;\n              this.add(\"-activate\", source, \"move: Grudge\", move.name);\n            }\n          }\n        }\n      }",
      "onBeforeMovePriority": 100,
      "onBeforeMove": "onBeforeMove(pokemon) {\n        this.debug(\"removing Grudge before attack\");\n        pokemon.removeVolatile(\"grudge\");\n      }"
    },
    "secondary": null,
    "target": "self",
    "type": "Ghost",
    "zMove": {
      "effect": "redirect"
    },
    "contestType": "Tough"
  },
  "guardianofalola": {
    "id": "guardianofalola",
    "num": 698,
    "accuracy": true,
    "basePower": 0,
    "damageCallback": "damageCallback(pokemon, target) {\n      const hp75 = Math.floor(target.getUndynamaxedHP() * 3 / 4);\n      if (target.volatiles[\"protect\"] || target.volatiles[\"banefulbunker\"] || target.volatiles[\"kingsshield\"] || target.volatiles[\"spikyshield\"] || target.side.getSideCondition(\"matblock\")) {\n        this.add(\"-zbroken\", target);\n        return this.clampIntRange(Math.ceil(hp75 / 4 - 0.5), 1);\n      }\n      return this.clampIntRange(hp75, 1);\n    }",
    "category": "Special",
    "isNonstandard": "Past",
    "name": "Guardian of Alola",
    "pp": 1,
    "priority": 0,
    "flags": {},
    "isZ": "tapuniumz",
    "secondary": null,
    "target": "normal",
    "type": "Fairy",
    "contestType": "Tough"
  },
  "guardsplit": {
    "id": "guardsplit",
    "num": 470,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Guard Split",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "allyanim": 1,
      "metronome": 1
    },
    "onHit": "onHit(target, source) {\n      const newdef = Math.floor((target.storedStats.def + source.storedStats.def) / 2);\n      target.storedStats.def = newdef;\n      source.storedStats.def = newdef;\n      const newspd = Math.floor((target.storedStats.spd + source.storedStats.spd) / 2);\n      target.storedStats.spd = newspd;\n      source.storedStats.spd = newspd;\n      this.add(\"-activate\", source, \"move: Guard Split\", `[of] ${target}`);\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Psychic",
    "zMove": {
      "boost": {
        "spe": 1
      }
    },
    "contestType": "Clever"
  },
  "guardswap": {
    "id": "guardswap",
    "num": 385,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Guard Swap",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "bypasssub": 1,
      "allyanim": 1,
      "metronome": 1
    },
    "onHit": "onHit(target, source) {\n      const targetBoosts = {};\n      const sourceBoosts = {};\n      const defSpd = [\"def\", \"spd\"];\n      for (const stat of defSpd) {\n        targetBoosts[stat] = target.boosts[stat];\n        sourceBoosts[stat] = source.boosts[stat];\n      }\n      source.setBoost(targetBoosts);\n      target.setBoost(sourceBoosts);\n      this.add(\"-swapboost\", source, target, \"def, spd\", \"[from] move: Guard Swap\");\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Psychic",
    "zMove": {
      "boost": {
        "spe": 1
      }
    },
    "contestType": "Clever"
  },
  "guillotine": {
    "id": "guillotine",
    "num": 12,
    "accuracy": 30,
    "basePower": 0,
    "category": "Physical",
    "name": "Guillotine",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "ohko": true,
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "zMove": {
      "basePower": 180
    },
    "maxMove": {
      "basePower": 130
    },
    "contestType": "Cool"
  },
  "gunkshot": {
    "id": "gunkshot",
    "num": 441,
    "accuracy": 80,
    "basePower": 120,
    "category": "Physical",
    "name": "Gunk Shot",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 30,
      "status": "psn"
    },
    "target": "normal",
    "type": "Poison",
    "contestType": "Tough"
  },
  "gust": {
    "id": "gust",
    "num": 16,
    "accuracy": 100,
    "basePower": 40,
    "category": "Special",
    "name": "Gust",
    "pp": 35,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "distance": 1,
      "metronome": 1,
      "wind": 1
    },
    "secondary": null,
    "target": "any",
    "type": "Flying",
    "contestType": "Clever"
  },
  "gyroball": {
    "id": "gyroball",
    "num": 360,
    "accuracy": 100,
    "basePower": 0,
    "basePowerCallback": "basePowerCallback(pokemon, target) {\n      let power = Math.floor(25 * target.getStat(\"spe\") / pokemon.getStat(\"spe\")) + 1;\n      if (!isFinite(power)) power = 1;\n      if (power > 150) power = 150;\n      this.debug(`BP: ${power}`);\n      return power;\n    }",
    "category": "Physical",
    "name": "Gyro Ball",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "bullet": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Steel",
    "zMove": {
      "basePower": 160
    },
    "maxMove": {
      "basePower": 130
    },
    "contestType": "Cool"
  },
  "hail": {
    "id": "hail",
    "num": 258,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Hail",
    "pp": 10,
    "priority": 0,
    "flags": {
      "metronome": 1
    },
    "weather": "hail",
    "secondary": null,
    "target": "all",
    "type": "Ice",
    "zMove": {
      "boost": {
        "spe": 1
      }
    },
    "contestType": "Beautiful"
  },
  "hammerarm": {
    "id": "hammerarm",
    "num": 359,
    "accuracy": 90,
    "basePower": 100,
    "category": "Physical",
    "name": "Hammer Arm",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "punch": 1,
      "metronome": 1
    },
    "self": {
      "boosts": {
        "spe": -1
      }
    },
    "secondary": null,
    "target": "normal",
    "type": "Fighting",
    "contestType": "Tough"
  },
  "happyhour": {
    "id": "happyhour",
    "num": 603,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Happy Hour",
    "pp": 30,
    "priority": 0,
    "flags": {
      "metronome": 1
    },
    "onTryHit": "onTryHit(target, source) {\n      this.add(\"-activate\", target, \"move: Happy Hour\");\n    }",
    "secondary": null,
    "target": "allySide",
    "type": "Normal",
    "zMove": {
      "boost": {
        "atk": 1,
        "def": 1,
        "spa": 1,
        "spd": 1,
        "spe": 1
      }
    },
    "contestType": "Cute"
  },
  "harden": {
    "id": "harden",
    "num": 106,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Harden",
    "pp": 30,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "boosts": {
      "def": 1
    },
    "secondary": null,
    "target": "self",
    "type": "Normal",
    "zMove": {
      "boost": {
        "def": 1
      }
    },
    "contestType": "Tough"
  },
  "hardpress": {
    "id": "hardpress",
    "num": 912,
    "accuracy": 100,
    "basePower": 0,
    "basePowerCallback": "basePowerCallback(pokemon, target) {\n      const hp = target.hp;\n      const maxHP = target.maxhp;\n      const bp = Math.floor(Math.floor((100 * (100 * Math.floor(hp * 4096 / maxHP)) + 2048 - 1) / 4096) / 100) || 1;\n      this.debug(`BP for ${hp}/${maxHP} HP: ${bp}`);\n      return bp;\n    }",
    "category": "Physical",
    "name": "Hard Press",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Steel"
  },
  "haze": {
    "id": "haze",
    "inherit": true,
    "onHitField": "onHitField() {\n      this.add(\"-clearallboost\");\n      for (const pokemon of this.getAllActive()) {\n        pokemon.clearBoosts();\n      }\n    }"
  },
  "headbutt": {
    "id": "headbutt",
    "num": 29,
    "accuracy": 100,
    "basePower": 70,
    "category": "Physical",
    "name": "Headbutt",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 30,
      "volatileStatus": "flinch"
    },
    "target": "normal",
    "type": "Normal",
    "contestType": "Tough"
  },
  "headcharge": {
    "id": "headcharge",
    "num": 543,
    "accuracy": 100,
    "basePower": 120,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Head Charge",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "recoil": [
      1,
      4
    ],
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Tough"
  },
  "headlongrush": {
    "id": "headlongrush",
    "num": 838,
    "accuracy": 100,
    "basePower": 120,
    "category": "Physical",
    "name": "Headlong Rush",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "punch": 1,
      "metronome": 1
    },
    "self": {
      "boosts": {
        "def": -1,
        "spd": -1
      }
    },
    "secondary": null,
    "target": "normal",
    "type": "Ground"
  },
  "headsmash": {
    "id": "headsmash",
    "num": 457,
    "accuracy": 80,
    "basePower": 150,
    "category": "Physical",
    "name": "Head Smash",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "recoil": [
      1,
      2
    ],
    "secondary": null,
    "target": "normal",
    "type": "Rock",
    "contestType": "Tough"
  },
  "healbell": {
    "id": "healbell",
    "inherit": true,
    "onHit": "onHit(target, source) {\n      this.add(\"-cureteam\", source, \"[from] move: Heal Bell\");\n      for (const pokemon of target.side.pokemon) {\n        pokemon.clearStatus();\n      }\n    }"
  },
  "healblock": {
    "id": "healblock",
    "num": 377,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Heal Block",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "metronome": 1
    },
    "volatileStatus": "healblock",
    "condition": {
      "duration": 5,
      "durationCallback": "durationCallback(target, source, effect) {\n        if (effect?.name === \"Psychic Noise\") {\n          return 2;\n        }\n        if (source?.hasAbility(\"persistent\")) {\n          this.add(\"-activate\", source, \"ability: Persistent\", \"[move] Heal Block\");\n          return 7;\n        }\n        return 5;\n      }",
      "onStart": "onStart(pokemon, source) {\n        this.add(\"-start\", pokemon, \"move: Heal Block\");\n        source.moveThisTurnResult = true;\n      }",
      "onDisableMove": "onDisableMove(pokemon) {\n        for (const moveSlot of pokemon.moveSlots) {\n          if (this.dex.moves.get(moveSlot.id).flags[\"heal\"]) {\n            pokemon.disableMove(moveSlot.id);\n          }\n        }\n      }",
      "onBeforeMovePriority": 6,
      "onBeforeMove": "onBeforeMove(pokemon, target, move) {\n        if (move.flags[\"heal\"] && !move.isZ && !move.isMax) {\n          this.add(\"cant\", pokemon, \"move: Heal Block\", move);\n          return false;\n        }\n      }",
      "onModifyMove": "onModifyMove(move, pokemon, target) {\n        if (move.flags[\"heal\"] && !move.isZ && !move.isMax) {\n          this.add(\"cant\", pokemon, \"move: Heal Block\", move);\n          return false;\n        }\n      }",
      "onResidualOrder": 20,
      "onEnd": "onEnd(pokemon) {\n        this.add(\"-end\", pokemon, \"move: Heal Block\");\n      }",
      "onTryHeal": "onTryHeal(damage, target, source, effect) {\n        if (effect && (effect.id === \"zpower\" || effect.isZ)) return damage;\n        if (source && target !== source && target.hp !== target.maxhp && effect.name === \"Pollen Puff\") {\n          this.attrLastMove(\"[still]\");\n          this.add(\"cant\", source, \"move: Heal Block\", effect);\n          return null;\n        }\n        return false;\n      }",
      "onRestart": "onRestart(target, source, effect) {\n        if (effect?.name === \"Psychic Noise\") return;\n        this.add(\"-fail\", target, \"move: Heal Block\");\n        if (!source.moveThisTurnResult) {\n          source.moveThisTurnResult = false;\n        }\n      }"
    },
    "secondary": null,
    "target": "allAdjacentFoes",
    "type": "Psychic",
    "zMove": {
      "boost": {
        "spa": 2
      }
    },
    "contestType": "Clever"
  },
  "healingwish": {
    "id": "healingwish",
    "num": 361,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Healing Wish",
    "pp": 10,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "heal": 1,
      "metronome": 1
    },
    "onTryHit": "onTryHit(source) {\n      if (!this.canSwitch(source.side)) {\n        this.attrLastMove(\"[still]\");\n        this.add(\"-fail\", source);\n        return this.NOT_FAIL;\n      }\n    }",
    "selfdestruct": "ifHit",
    "slotCondition": "healingwish",
    "condition": {
      "onSwitchIn": "onSwitchIn(target) {\n        this.singleEvent(\"Swap\", this.effect, this.effectState, target);\n      }",
      "onSwap": "onSwap(target) {\n        if (!target.fainted && (target.hp < target.maxhp || target.status)) {\n          target.heal(target.maxhp);\n          target.clearStatus();\n          this.add(\"-heal\", target, target.getHealth, \"[from] move: Healing Wish\");\n          target.side.removeSlotCondition(target, \"healingwish\");\n        }\n      }"
    },
    "secondary": null,
    "target": "self",
    "type": "Psychic",
    "contestType": "Beautiful"
  },
  "healorder": {
    "id": "healorder",
    "num": 456,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Heal Order",
    "pp": 10,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "heal": 1,
      "metronome": 1
    },
    "heal": [
      1,
      2
    ],
    "secondary": null,
    "target": "self",
    "type": "Bug",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Clever"
  },
  "healpulse": {
    "id": "healpulse",
    "num": 505,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Heal Pulse",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "distance": 1,
      "heal": 1,
      "allyanim": 1,
      "metronome": 1,
      "pulse": 1
    },
    "onHit": "onHit(target, source) {\n      let success = false;\n      if (source.hasAbility(\"megalauncher\")) {\n        success = !!this.heal(this.modify(target.baseMaxhp, 0.75));\n      } else {\n        success = !!this.heal(Math.ceil(target.baseMaxhp * 0.5));\n      }\n      if (success && !target.isAlly(source)) {\n        target.staleness = \"external\";\n      }\n      if (!success) {\n        this.add(\"-fail\", target, \"heal\");\n        return this.NOT_FAIL;\n      }\n      return success;\n    }",
    "secondary": null,
    "target": "any",
    "type": "Psychic",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Beautiful"
  },
  "heartstamp": {
    "id": "heartstamp",
    "num": 531,
    "accuracy": 100,
    "basePower": 60,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Heart Stamp",
    "pp": 25,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 30,
      "volatileStatus": "flinch"
    },
    "target": "normal",
    "type": "Psychic",
    "contestType": "Cute"
  },
  "heartswap": {
    "id": "heartswap",
    "num": 391,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Heart Swap",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "bypasssub": 1,
      "allyanim": 1,
      "metronome": 1
    },
    "onHit": "onHit(target, source) {\n      const targetBoosts = {};\n      const sourceBoosts = {};\n      let i;\n      for (i in target.boosts) {\n        targetBoosts[i] = target.boosts[i];\n        sourceBoosts[i] = source.boosts[i];\n      }\n      target.setBoost(sourceBoosts);\n      source.setBoost(targetBoosts);\n      this.add(\"-swapboost\", source, target, \"[from] move: Heart Swap\");\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Psychic",
    "zMove": {
      "effect": "crit2"
    },
    "contestType": "Clever"
  },
  "heatcrash": {
    "id": "heatcrash",
    "num": 535,
    "accuracy": 100,
    "basePower": 0,
    "basePowerCallback": "basePowerCallback(pokemon, target) {\n      const targetWeight = target.getWeight();\n      const pokemonWeight = pokemon.getWeight();\n      let bp;\n      if (pokemonWeight >= targetWeight * 5) {\n        bp = 120;\n      } else if (pokemonWeight >= targetWeight * 4) {\n        bp = 100;\n      } else if (pokemonWeight >= targetWeight * 3) {\n        bp = 80;\n      } else if (pokemonWeight >= targetWeight * 2) {\n        bp = 60;\n      } else {\n        bp = 40;\n      }\n      this.debug(`BP: ${bp}`);\n      return bp;\n    }",
    "category": "Physical",
    "name": "Heat Crash",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "nonsky": 1,
      "metronome": 1
    },
    "onTryHit": "onTryHit(target, pokemon, move) {\n      if (target.volatiles[\"dynamax\"]) {\n        this.add(\"-fail\", pokemon, \"Dynamax\");\n        this.attrLastMove(\"[still]\");\n        return null;\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Fire",
    "zMove": {
      "basePower": 160
    },
    "maxMove": {
      "basePower": 130
    },
    "contestType": "Tough"
  },
  "heatwave": {
    "id": "heatwave",
    "num": 257,
    "accuracy": 90,
    "basePower": 95,
    "category": "Special",
    "name": "Heat Wave",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "wind": 1
    },
    "secondary": {
      "chance": 10,
      "status": "brn"
    },
    "target": "allAdjacentFoes",
    "type": "Fire",
    "contestType": "Beautiful"
  },
  "heavyslam": {
    "id": "heavyslam",
    "num": 484,
    "accuracy": 100,
    "basePower": 0,
    "basePowerCallback": "basePowerCallback(pokemon, target) {\n      const targetWeight = target.getWeight();\n      const pokemonWeight = pokemon.getWeight();\n      let bp;\n      if (pokemonWeight >= targetWeight * 5) {\n        bp = 120;\n      } else if (pokemonWeight >= targetWeight * 4) {\n        bp = 100;\n      } else if (pokemonWeight >= targetWeight * 3) {\n        bp = 80;\n      } else if (pokemonWeight >= targetWeight * 2) {\n        bp = 60;\n      } else {\n        bp = 40;\n      }\n      this.debug(`BP: ${bp}`);\n      return bp;\n    }",
    "category": "Physical",
    "name": "Heavy Slam",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "nonsky": 1,
      "metronome": 1
    },
    "onTryHit": "onTryHit(target, pokemon, move) {\n      if (target.volatiles[\"dynamax\"]) {\n        this.add(\"-fail\", pokemon, \"Dynamax\");\n        this.attrLastMove(\"[still]\");\n        return null;\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Steel",
    "zMove": {
      "basePower": 160
    },
    "maxMove": {
      "basePower": 130
    },
    "contestType": "Tough"
  },
  "helpinghand": {
    "id": "helpinghand",
    "num": 270,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Helping Hand",
    "pp": 20,
    "priority": 5,
    "flags": {
      "bypasssub": 1,
      "noassist": 1,
      "failcopycat": 1
    },
    "volatileStatus": "helpinghand",
    "onTryHit": "onTryHit(target) {\n      if (!target.newlySwitched && !this.queue.willMove(target)) return false;\n    }",
    "condition": {
      "duration": 1,
      "onStart": "onStart(target, source) {\n        this.effectState.multiplier = 1.5;\n        this.add(\"-singleturn\", target, \"Helping Hand\", `[of] ${source}`);\n      }",
      "onRestart": "onRestart(target, source) {\n        this.effectState.multiplier *= 1.5;\n        this.add(\"-singleturn\", target, \"Helping Hand\", `[of] ${source}`);\n      }",
      "onBasePowerPriority": 10,
      "onBasePower": "onBasePower(basePower) {\n        this.debug(\"Boosting from Helping Hand: \" + this.effectState.multiplier);\n        return this.chainModify(this.effectState.multiplier);\n      }"
    },
    "secondary": null,
    "target": "adjacentAlly",
    "type": "Normal",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Clever"
  },
  "hex": {
    "id": "hex",
    "num": 506,
    "accuracy": 100,
    "basePower": 65,
    "basePowerCallback": "basePowerCallback(pokemon, target, move) {\n      if (target.status || target.hasAbility(\"comatose\")) {\n        this.debug(\"BP doubled from status condition\");\n        return move.basePower * 2;\n      }\n      return move.basePower;\n    }",
    "category": "Special",
    "name": "Hex",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Ghost",
    "zMove": {
      "basePower": 160
    },
    "contestType": "Clever"
  },
  "hiddenpower": {
    "id": "hiddenpower",
    "inherit": true,
    "category": "Physical",
    "onModifyMove": "onModifyMove(move, pokemon) {\n      move.type = pokemon.hpType || \"Dark\";\n      const specialTypes = [\"Fire\", \"Water\", \"Grass\", \"Ice\", \"Electric\", \"Dark\", \"Psychic\", \"Dragon\"];\n      move.category = specialTypes.includes(move.type) ? \"Special\" : \"Physical\";\n    }"
  },
  "hiddenpowerbug": {
    "id": "hiddenpowerbug",
    "num": 237,
    "accuracy": 100,
    "basePower": 60,
    "category": "Special",
    "realMove": "Hidden Power",
    "isNonstandard": "Past",
    "name": "Hidden Power Bug",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Bug",
    "contestType": "Clever"
  },
  "hiddenpowerdark": {
    "id": "hiddenpowerdark",
    "num": 237,
    "accuracy": 100,
    "basePower": 60,
    "category": "Special",
    "realMove": "Hidden Power",
    "isNonstandard": "Past",
    "name": "Hidden Power Dark",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Dark",
    "contestType": "Clever"
  },
  "hiddenpowerdragon": {
    "id": "hiddenpowerdragon",
    "num": 237,
    "accuracy": 100,
    "basePower": 60,
    "category": "Special",
    "realMove": "Hidden Power",
    "isNonstandard": "Past",
    "name": "Hidden Power Dragon",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Dragon",
    "contestType": "Clever"
  },
  "hiddenpowerelectric": {
    "id": "hiddenpowerelectric",
    "num": 237,
    "accuracy": 100,
    "basePower": 60,
    "category": "Special",
    "realMove": "Hidden Power",
    "isNonstandard": "Past",
    "name": "Hidden Power Electric",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Electric",
    "contestType": "Clever"
  },
  "hiddenpowerfighting": {
    "id": "hiddenpowerfighting",
    "num": 237,
    "accuracy": 100,
    "basePower": 60,
    "category": "Special",
    "realMove": "Hidden Power",
    "isNonstandard": "Past",
    "name": "Hidden Power Fighting",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Fighting",
    "contestType": "Clever"
  },
  "hiddenpowerfire": {
    "id": "hiddenpowerfire",
    "num": 237,
    "accuracy": 100,
    "basePower": 60,
    "category": "Special",
    "realMove": "Hidden Power",
    "isNonstandard": "Past",
    "name": "Hidden Power Fire",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Fire",
    "contestType": "Clever"
  },
  "hiddenpowerflying": {
    "id": "hiddenpowerflying",
    "num": 237,
    "accuracy": 100,
    "basePower": 60,
    "category": "Special",
    "realMove": "Hidden Power",
    "isNonstandard": "Past",
    "name": "Hidden Power Flying",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Flying",
    "contestType": "Clever"
  },
  "hiddenpowerghost": {
    "id": "hiddenpowerghost",
    "num": 237,
    "accuracy": 100,
    "basePower": 60,
    "category": "Special",
    "realMove": "Hidden Power",
    "isNonstandard": "Past",
    "name": "Hidden Power Ghost",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Ghost",
    "contestType": "Clever"
  },
  "hiddenpowergrass": {
    "id": "hiddenpowergrass",
    "num": 237,
    "accuracy": 100,
    "basePower": 60,
    "category": "Special",
    "realMove": "Hidden Power",
    "isNonstandard": "Past",
    "name": "Hidden Power Grass",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Grass",
    "contestType": "Clever"
  },
  "hiddenpowerground": {
    "id": "hiddenpowerground",
    "num": 237,
    "accuracy": 100,
    "basePower": 60,
    "category": "Special",
    "realMove": "Hidden Power",
    "isNonstandard": "Past",
    "name": "Hidden Power Ground",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Ground",
    "contestType": "Clever"
  },
  "hiddenpowerice": {
    "id": "hiddenpowerice",
    "num": 237,
    "accuracy": 100,
    "basePower": 60,
    "category": "Special",
    "realMove": "Hidden Power",
    "isNonstandard": "Past",
    "name": "Hidden Power Ice",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Ice",
    "contestType": "Clever"
  },
  "hiddenpowerpoison": {
    "id": "hiddenpowerpoison",
    "num": 237,
    "accuracy": 100,
    "basePower": 60,
    "category": "Special",
    "realMove": "Hidden Power",
    "isNonstandard": "Past",
    "name": "Hidden Power Poison",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Poison",
    "contestType": "Clever"
  },
  "hiddenpowerpsychic": {
    "id": "hiddenpowerpsychic",
    "num": 237,
    "accuracy": 100,
    "basePower": 60,
    "category": "Special",
    "realMove": "Hidden Power",
    "isNonstandard": "Past",
    "name": "Hidden Power Psychic",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Psychic",
    "contestType": "Clever"
  },
  "hiddenpowerrock": {
    "id": "hiddenpowerrock",
    "num": 237,
    "accuracy": 100,
    "basePower": 60,
    "category": "Special",
    "realMove": "Hidden Power",
    "isNonstandard": "Past",
    "name": "Hidden Power Rock",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Rock",
    "contestType": "Clever"
  },
  "hiddenpowersteel": {
    "id": "hiddenpowersteel",
    "num": 237,
    "accuracy": 100,
    "basePower": 60,
    "category": "Special",
    "realMove": "Hidden Power",
    "isNonstandard": "Past",
    "name": "Hidden Power Steel",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Steel",
    "contestType": "Clever"
  },
  "hiddenpowerwater": {
    "id": "hiddenpowerwater",
    "num": 237,
    "accuracy": 100,
    "basePower": 60,
    "category": "Special",
    "realMove": "Hidden Power",
    "isNonstandard": "Past",
    "name": "Hidden Power Water",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Water",
    "contestType": "Clever"
  },
  "highhorsepower": {
    "id": "highhorsepower",
    "num": 667,
    "accuracy": 95,
    "basePower": 95,
    "category": "Physical",
    "name": "High Horsepower",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Ground",
    "contestType": "Tough"
  },
  "highjumpkick": {
    "id": "highjumpkick",
    "inherit": true,
    "basePower": 85,
    "onMoveFail": "onMoveFail(target, source, move) {\n      if (target.runImmunity(\"Fighting\")) {\n        const damage = this.actions.getDamage(source, target, move, true);\n        if (typeof damage !== \"number\") throw new Error(\"HJK recoil failed\");\n        this.damage(this.clampIntRange(damage / 2, 1, Math.floor(target.maxhp / 2)), source, source, move);\n      }\n    }"
  },
  "holdback": {
    "id": "holdback",
    "num": 610,
    "accuracy": 100,
    "basePower": 40,
    "category": "Physical",
    "isNonstandard": "Unobtainable",
    "name": "Hold Back",
    "pp": 40,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onDamagePriority": -20,
    "onDamage": "onDamage(damage, target, source, effect) {\n      if (damage >= target.hp) return target.hp - 1;\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Cool"
  },
  "holdhands": {
    "id": "holdhands",
    "num": 607,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Unobtainable",
    "name": "Hold Hands",
    "pp": 40,
    "priority": 0,
    "flags": {
      "bypasssub": 1,
      "nosleeptalk": 1,
      "noassist": 1,
      "failcopycat": 1,
      "failmimic": 1,
      "failinstruct": 1
    },
    "secondary": null,
    "target": "adjacentAlly",
    "type": "Normal",
    "zMove": {
      "boost": {
        "atk": 1,
        "def": 1,
        "spa": 1,
        "spd": 1,
        "spe": 1
      }
    },
    "contestType": "Cute"
  },
  "honeclaws": {
    "id": "honeclaws",
    "num": 468,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Hone Claws",
    "pp": 15,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "boosts": {
      "atk": 1,
      "accuracy": 1
    },
    "secondary": null,
    "target": "self",
    "type": "Dark",
    "zMove": {
      "boost": {
        "atk": 1
      }
    },
    "contestType": "Cute"
  },
  "hornattack": {
    "id": "hornattack",
    "num": 30,
    "accuracy": 100,
    "basePower": 65,
    "category": "Physical",
    "name": "Horn Attack",
    "pp": 25,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Cool"
  },
  "horndrill": {
    "id": "horndrill",
    "num": 32,
    "accuracy": 30,
    "basePower": 0,
    "category": "Physical",
    "name": "Horn Drill",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "ohko": true,
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "zMove": {
      "basePower": 180
    },
    "maxMove": {
      "basePower": 130
    },
    "contestType": "Cool"
  },
  "hornleech": {
    "id": "hornleech",
    "num": 532,
    "accuracy": 100,
    "basePower": 75,
    "category": "Physical",
    "name": "Horn Leech",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "heal": 1,
      "metronome": 1
    },
    "drain": [
      1,
      2
    ],
    "secondary": null,
    "target": "normal",
    "type": "Grass",
    "contestType": "Tough"
  },
  "howl": {
    "id": "howl",
    "num": 336,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Howl",
    "pp": 40,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "sound": 1,
      "metronome": 1
    },
    "boosts": {
      "atk": 1
    },
    "secondary": null,
    "target": "allies",
    "type": "Normal",
    "zMove": {
      "boost": {
        "atk": 1
      }
    },
    "contestType": "Cool"
  },
  "hurricane": {
    "id": "hurricane",
    "num": 542,
    "accuracy": 70,
    "basePower": 110,
    "category": "Special",
    "name": "Hurricane",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "distance": 1,
      "metronome": 1,
      "wind": 1
    },
    "onModifyMove": "onModifyMove(move, pokemon, target) {\n      switch (target?.effectiveWeather()) {\n        case \"raindance\":\n        case \"primordialsea\":\n          move.accuracy = true;\n          break;\n        case \"sunnyday\":\n        case \"desolateland\":\n          move.accuracy = 50;\n          break;\n      }\n    }",
    "secondary": {
      "chance": 30,
      "volatileStatus": "confusion"
    },
    "target": "any",
    "type": "Flying",
    "contestType": "Tough"
  },
  "hydrocannon": {
    "id": "hydrocannon",
    "num": 308,
    "accuracy": 90,
    "basePower": 150,
    "category": "Special",
    "name": "Hydro Cannon",
    "pp": 5,
    "priority": 0,
    "flags": {
      "recharge": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "self": {
      "volatileStatus": "mustrecharge"
    },
    "secondary": null,
    "target": "normal",
    "type": "Water",
    "contestType": "Beautiful"
  },
  "hydropump": {
    "id": "hydropump",
    "num": 56,
    "accuracy": 80,
    "basePower": 110,
    "category": "Special",
    "name": "Hydro Pump",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Water",
    "contestType": "Beautiful"
  },
  "hydrosteam": {
    "id": "hydrosteam",
    "num": 876,
    "accuracy": 100,
    "basePower": 80,
    "category": "Special",
    "name": "Hydro Steam",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "defrost": 1,
      "metronome": 1
    },
    "thawsTarget": true,
    "secondary": null,
    "target": "normal",
    "type": "Water"
  },
  "hydrovortex": {
    "id": "hydrovortex",
    "num": 642,
    "accuracy": true,
    "basePower": 1,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Hydro Vortex",
    "pp": 1,
    "priority": 0,
    "flags": {},
    "isZ": "wateriumz",
    "secondary": null,
    "target": "normal",
    "type": "Water",
    "contestType": "Cool"
  },
  "hyperbeam": {
    "id": "hyperbeam",
    "num": 63,
    "accuracy": 90,
    "basePower": 150,
    "category": "Special",
    "name": "Hyper Beam",
    "pp": 5,
    "priority": 0,
    "flags": {
      "recharge": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "self": {
      "volatileStatus": "mustrecharge"
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Cool"
  },
  "hyperdrill": {
    "id": "hyperdrill",
    "num": 887,
    "accuracy": 100,
    "basePower": 100,
    "category": "Physical",
    "name": "Hyper Drill",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "mirror": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Clever"
  },
  "hyperfang": {
    "id": "hyperfang",
    "num": 158,
    "accuracy": 90,
    "basePower": 80,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Hyper Fang",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "bite": 1
    },
    "secondary": {
      "chance": 10,
      "volatileStatus": "flinch"
    },
    "target": "normal",
    "type": "Normal",
    "contestType": "Cool"
  },
  "hyperspacefury": {
    "id": "hyperspacefury",
    "num": 621,
    "accuracy": true,
    "basePower": 100,
    "category": "Physical",
    "name": "Hyperspace Fury",
    "pp": 5,
    "priority": 0,
    "flags": {
      "mirror": 1,
      "bypasssub": 1,
      "nosketch": 1
    },
    "breaksProtect": true,
    "onTry": "onTry(source) {\n      if (source.species.name === \"Hoopa-Unbound\") {\n        return;\n      }\n      this.hint(\"Only a Pokemon whose form is Hoopa Unbound can use this move.\");\n      if (source.species.name === \"Hoopa\") {\n        this.attrLastMove(\"[still]\");\n        this.add(\"-fail\", source, \"move: Hyperspace Fury\", \"[forme]\");\n        return null;\n      }\n      this.attrLastMove(\"[still]\");\n      this.add(\"-fail\", source, \"move: Hyperspace Fury\");\n      return null;\n    }",
    "self": {
      "boosts": {
        "def": -1
      }
    },
    "secondary": null,
    "target": "normal",
    "type": "Dark",
    "contestType": "Tough"
  },
  "hyperspacehole": {
    "id": "hyperspacehole",
    "num": 593,
    "accuracy": true,
    "basePower": 80,
    "category": "Special",
    "name": "Hyperspace Hole",
    "pp": 5,
    "priority": 0,
    "flags": {
      "mirror": 1,
      "bypasssub": 1
    },
    "breaksProtect": true,
    "secondary": null,
    "target": "normal",
    "type": "Psychic",
    "contestType": "Clever"
  },
  "hypervoice": {
    "id": "hypervoice",
    "num": 304,
    "accuracy": 100,
    "basePower": 90,
    "category": "Special",
    "name": "Hyper Voice",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "sound": 1,
      "bypasssub": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "allAdjacentFoes",
    "type": "Normal",
    "contestType": "Cool"
  },
  "hypnosis": {
    "id": "hypnosis",
    "inherit": true,
    "accuracy": 60
  },
  "iceball": {
    "id": "iceball",
    "num": 301,
    "accuracy": 90,
    "basePower": 30,
    "basePowerCallback": "basePowerCallback(pokemon, target, move) {\n      let bp = move.basePower;\n      const iceballData = pokemon.volatiles[\"iceball\"];\n      if (iceballData?.hitCount) {\n        bp *= 2 ** iceballData.contactHitCount;\n      }\n      if (iceballData && pokemon.status !== \"slp\") {\n        iceballData.hitCount++;\n        iceballData.contactHitCount++;\n        if (iceballData.hitCount < 5) {\n          iceballData.duration = 2;\n        }\n      }\n      if (pokemon.volatiles[\"defensecurl\"]) {\n        bp *= 2;\n      }\n      this.debug(`BP: ${bp}`);\n      return bp;\n    }",
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Ice Ball",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "failinstruct": 1,
      "bullet": 1,
      "noparentalbond": 1
    },
    "onModifyMove": "onModifyMove(move, pokemon, target) {\n      if (pokemon.volatiles[\"iceball\"] || pokemon.status === \"slp\" || !target) return;\n      pokemon.addVolatile(\"iceball\");\n      if (move.sourceEffect) pokemon.lastMoveTargetLoc = pokemon.getLocOf(target);\n    }",
    "onAfterMove": "onAfterMove(source, target, move) {\n      const iceballData = source.volatiles[\"iceball\"];\n      if (iceballData && iceballData.hitCount === 5 && iceballData.contactHitCount < 5) {\n        source.addVolatile(\"rolloutstorage\");\n        source.volatiles[\"rolloutstorage\"].contactHitCount = iceballData.contactHitCount;\n      }\n    }",
    "condition": {
      "duration": 1,
      "onLockMove": "iceball",
      "onStart": "onStart() {\n        this.effectState.hitCount = 0;\n        this.effectState.contactHitCount = 0;\n      }",
      "onResidual": "onResidual(target) {\n        if (target.lastMove && target.lastMove.id === \"struggle\") {\n          delete target.volatiles[\"iceball\"];\n        }\n      }"
    },
    "secondary": null,
    "target": "normal",
    "type": "Ice",
    "contestType": "Beautiful"
  },
  "icebeam": {
    "id": "icebeam",
    "num": 58,
    "accuracy": 100,
    "basePower": 90,
    "category": "Special",
    "name": "Ice Beam",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 10,
      "status": "frz"
    },
    "target": "normal",
    "type": "Ice",
    "contestType": "Beautiful"
  },
  "iceburn": {
    "id": "iceburn",
    "num": 554,
    "accuracy": 90,
    "basePower": 140,
    "category": "Special",
    "name": "Ice Burn",
    "pp": 5,
    "priority": 0,
    "flags": {
      "charge": 1,
      "protect": 1,
      "mirror": 1,
      "nosleeptalk": 1,
      "failinstruct": 1
    },
    "onTryMove": "onTryMove(attacker, defender, move) {\n      if (attacker.removeVolatile(move.id)) {\n        return;\n      }\n      this.add(\"-prepare\", attacker, move.name);\n      if (!this.runEvent(\"ChargeMove\", attacker, defender, move)) {\n        return;\n      }\n      attacker.addVolatile(\"twoturnmove\", defender);\n      return null;\n    }",
    "secondary": {
      "chance": 30,
      "status": "brn"
    },
    "target": "normal",
    "type": "Ice",
    "contestType": "Beautiful"
  },
  "icefang": {
    "id": "icefang",
    "num": 423,
    "accuracy": 95,
    "basePower": 65,
    "category": "Physical",
    "name": "Ice Fang",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "bite": 1
    },
    "secondaries": [
      {
        "chance": 10,
        "status": "frz"
      },
      {
        "chance": 10,
        "volatileStatus": "flinch"
      }
    ],
    "target": "normal",
    "type": "Ice",
    "contestType": "Cool"
  },
  "icehammer": {
    "id": "icehammer",
    "num": 665,
    "accuracy": 90,
    "basePower": 100,
    "category": "Physical",
    "name": "Ice Hammer",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "punch": 1,
      "metronome": 1
    },
    "self": {
      "boosts": {
        "spe": -1
      }
    },
    "secondary": null,
    "target": "normal",
    "type": "Ice",
    "contestType": "Tough"
  },
  "icepunch": {
    "id": "icepunch",
    "num": 8,
    "accuracy": 100,
    "basePower": 75,
    "category": "Physical",
    "name": "Ice Punch",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "punch": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 10,
      "status": "frz"
    },
    "target": "normal",
    "type": "Ice",
    "contestType": "Beautiful"
  },
  "iceshard": {
    "id": "iceshard",
    "num": 420,
    "accuracy": 100,
    "basePower": 40,
    "category": "Physical",
    "name": "Ice Shard",
    "pp": 30,
    "priority": 1,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Ice",
    "contestType": "Beautiful"
  },
  "icespinner": {
    "id": "icespinner",
    "num": 861,
    "accuracy": 100,
    "basePower": 80,
    "category": "Physical",
    "name": "Ice Spinner",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onAfterHit": "onAfterHit(target, source) {\n      if (source.hp) {\n        this.field.clearTerrain();\n      }\n    }",
    "onAfterSubDamage": "onAfterSubDamage(damage, target, source) {\n      if (source.hp) {\n        this.field.clearTerrain();\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Ice"
  },
  "iciclecrash": {
    "id": "iciclecrash",
    "num": 556,
    "accuracy": 90,
    "basePower": 85,
    "category": "Physical",
    "name": "Icicle Crash",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 30,
      "volatileStatus": "flinch"
    },
    "target": "normal",
    "type": "Ice",
    "contestType": "Beautiful"
  },
  "iciclespear": {
    "id": "iciclespear",
    "num": 333,
    "accuracy": 100,
    "basePower": 25,
    "category": "Physical",
    "name": "Icicle Spear",
    "pp": 30,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "multihit": [
      2,
      5
    ],
    "secondary": null,
    "target": "normal",
    "type": "Ice",
    "zMove": {
      "basePower": 140
    },
    "maxMove": {
      "basePower": 130
    },
    "contestType": "Beautiful"
  },
  "icywind": {
    "id": "icywind",
    "num": 196,
    "accuracy": 95,
    "basePower": 55,
    "category": "Special",
    "name": "Icy Wind",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "wind": 1
    },
    "secondary": {
      "chance": 100,
      "boosts": {
        "spe": -1
      }
    },
    "target": "allAdjacentFoes",
    "type": "Ice",
    "contestType": "Beautiful"
  },
  "imprison": {
    "id": "imprison",
    "num": 286,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Imprison",
    "pp": 10,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "bypasssub": 1,
      "metronome": 1,
      "mustpressure": 1
    },
    "volatileStatus": "imprison",
    "condition": {
      "noCopy": true,
      "onStart": "onStart(target) {\n        this.add(\"-start\", target, \"move: Imprison\");\n      }",
      "onFoeDisableMove": "onFoeDisableMove(pokemon) {\n        for (const moveSlot of this.effectState.source.moveSlots) {\n          if (moveSlot.id === \"struggle\") continue;\n          pokemon.disableMove(moveSlot.id, \"hidden\");\n        }\n        pokemon.maybeDisabled = true;\n      }",
      "onFoeBeforeMovePriority": 4,
      "onFoeBeforeMove": "onFoeBeforeMove(attacker, defender, move) {\n        if (move.id !== \"struggle\" && this.effectState.source.hasMove(move.id) && !move.isZ && !move.isMax) {\n          this.add(\"cant\", attacker, \"move: Imprison\", move);\n          return false;\n        }\n      }"
    },
    "secondary": null,
    "target": "self",
    "type": "Psychic",
    "zMove": {
      "boost": {
        "spd": 2
      }
    },
    "contestType": "Clever"
  },
  "incinerate": {
    "id": "incinerate",
    "num": 510,
    "accuracy": 100,
    "basePower": 60,
    "category": "Special",
    "name": "Incinerate",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onHit": "onHit(pokemon, source) {\n      const item = pokemon.getItem();\n      if ((item.isBerry || item.isGem) && pokemon.takeItem(source)) {\n        this.add(\"-enditem\", pokemon, item.name, \"[from] move: Incinerate\");\n      }\n    }",
    "secondary": null,
    "target": "allAdjacentFoes",
    "type": "Fire",
    "contestType": "Tough"
  },
  "infernalparade": {
    "id": "infernalparade",
    "num": 844,
    "accuracy": 100,
    "basePower": 60,
    "basePowerCallback": "basePowerCallback(pokemon, target, move) {\n      if (target.status || target.hasAbility(\"comatose\")) return move.basePower * 2;\n      return move.basePower;\n    }",
    "category": "Special",
    "name": "Infernal Parade",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 30,
      "status": "brn"
    },
    "target": "normal",
    "type": "Ghost"
  },
  "inferno": {
    "id": "inferno",
    "num": 517,
    "accuracy": 50,
    "basePower": 100,
    "category": "Special",
    "name": "Inferno",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 100,
      "status": "brn"
    },
    "target": "normal",
    "type": "Fire",
    "contestType": "Beautiful"
  },
  "infernooverdrive": {
    "id": "infernooverdrive",
    "num": 640,
    "accuracy": true,
    "basePower": 1,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Inferno Overdrive",
    "pp": 1,
    "priority": 0,
    "flags": {},
    "isZ": "firiumz",
    "secondary": null,
    "target": "normal",
    "type": "Fire",
    "contestType": "Cool"
  },
  "infestation": {
    "id": "infestation",
    "num": 611,
    "accuracy": 100,
    "basePower": 20,
    "category": "Special",
    "name": "Infestation",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "volatileStatus": "partiallytrapped",
    "secondary": null,
    "target": "normal",
    "type": "Bug",
    "contestType": "Cute"
  },
  "ingrain": {
    "id": "ingrain",
    "num": 275,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Ingrain",
    "pp": 20,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "nonsky": 1,
      "metronome": 1
    },
    "volatileStatus": "ingrain",
    "condition": {
      "onStart": "onStart(pokemon) {\n        this.add(\"-start\", pokemon, \"move: Ingrain\");\n      }",
      "onResidualOrder": 7,
      "onResidual": "onResidual(pokemon) {\n        this.heal(pokemon.baseMaxhp / 16);\n      }",
      "onTrapPokemon": "onTrapPokemon(pokemon) {\n        pokemon.tryTrap();\n      }",
      "onDragOut": "onDragOut(pokemon) {\n        this.add(\"-activate\", pokemon, \"move: Ingrain\");\n        return null;\n      }"
    },
    "secondary": null,
    "target": "self",
    "type": "Grass",
    "zMove": {
      "boost": {
        "spd": 1
      }
    },
    "contestType": "Clever"
  },
  "instruct": {
    "id": "instruct",
    "num": 689,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Instruct",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "bypasssub": 1,
      "allyanim": 1,
      "failinstruct": 1
    },
    "onHit": "onHit(target, source) {\n      if (!target.lastMove || target.volatiles[\"dynamax\"]) return false;\n      const lastMove = target.lastMove;\n      const moveSlot = target.getMoveData(lastMove.id);\n      if (lastMove.flags[\"failinstruct\"] || lastMove.isZ || lastMove.isMax || lastMove.flags[\"charge\"] || lastMove.flags[\"recharge\"] || target.volatiles[\"beakblast\"] || target.volatiles[\"focuspunch\"] || target.volatiles[\"shelltrap\"] || moveSlot && moveSlot.pp <= 0) {\n        return false;\n      }\n      this.add(\"-singleturn\", target, \"move: Instruct\", `[of] ${source}`);\n      this.queue.prioritizeAction(this.queue.resolveAction({\n        choice: \"move\",\n        pokemon: target,\n        moveid: target.lastMove.id,\n        targetLoc: target.lastMoveTargetLoc\n      })[0]);\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Psychic",
    "zMove": {
      "boost": {
        "spa": 1
      }
    },
    "contestType": "Clever"
  },
  "iondeluge": {
    "id": "iondeluge",
    "num": 569,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Ion Deluge",
    "pp": 25,
    "priority": 1,
    "flags": {
      "metronome": 1
    },
    "pseudoWeather": "iondeluge",
    "condition": {
      "duration": 1,
      "onFieldStart": "onFieldStart(target, source, sourceEffect) {\n        this.add(\"-fieldactivate\", \"move: Ion Deluge\");\n        this.hint(`Normal-type moves become Electric-type after using ${sourceEffect}.`);\n      }",
      "onModifyTypePriority": -2,
      "onModifyType": "onModifyType(move) {\n        if (move.type === \"Normal\") {\n          move.type = \"Electric\";\n          this.debug(move.name + \"'s type changed to Electric\");\n        }\n      }"
    },
    "secondary": null,
    "target": "all",
    "type": "Electric",
    "zMove": {
      "boost": {
        "spa": 1
      }
    },
    "contestType": "Beautiful"
  },
  "irondefense": {
    "id": "irondefense",
    "num": 334,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Iron Defense",
    "pp": 15,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "boosts": {
      "def": 2
    },
    "secondary": null,
    "target": "self",
    "type": "Steel",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Tough"
  },
  "ironhead": {
    "id": "ironhead",
    "num": 442,
    "accuracy": 100,
    "basePower": 80,
    "category": "Physical",
    "name": "Iron Head",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 30,
      "volatileStatus": "flinch"
    },
    "target": "normal",
    "type": "Steel",
    "contestType": "Tough"
  },
  "irontail": {
    "id": "irontail",
    "num": 231,
    "accuracy": 75,
    "basePower": 100,
    "category": "Physical",
    "name": "Iron Tail",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 30,
      "boosts": {
        "def": -1
      }
    },
    "target": "normal",
    "type": "Steel",
    "contestType": "Cool"
  },
  "ivycudgel": {
    "id": "ivycudgel",
    "num": 904,
    "accuracy": 100,
    "basePower": 100,
    "category": "Physical",
    "name": "Ivy Cudgel",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "critRatio": 2,
    "onPrepareHit": "onPrepareHit(target, source, move) {\n      if (move.type !== \"Grass\") {\n        this.attrLastMove(\"[anim] Ivy Cudgel \" + move.type);\n      }\n    }",
    "onModifyType": "onModifyType(move, pokemon) {\n      switch (pokemon.species.name) {\n        case \"Ogerpon-Wellspring\":\n        case \"Ogerpon-Wellspring-Tera\":\n          move.type = \"Water\";\n          break;\n        case \"Ogerpon-Hearthflame\":\n        case \"Ogerpon-Hearthflame-Tera\":\n          move.type = \"Fire\";\n          break;\n        case \"Ogerpon-Cornerstone\":\n        case \"Ogerpon-Cornerstone-Tera\":\n          move.type = \"Rock\";\n          break;\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Grass"
  },
  "jawlock": {
    "id": "jawlock",
    "num": 746,
    "accuracy": 100,
    "basePower": 80,
    "category": "Physical",
    "name": "Jaw Lock",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "bite": 1
    },
    "onHit": "onHit(target, source, move) {\n      source.addVolatile(\"trapped\", target, move, \"trapper\");\n      target.addVolatile(\"trapped\", source, move, \"trapper\");\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Dark"
  },
  "jetpunch": {
    "id": "jetpunch",
    "num": 857,
    "accuracy": 100,
    "basePower": 60,
    "category": "Physical",
    "name": "Jet Punch",
    "pp": 15,
    "priority": 1,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "punch": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Water",
    "contestType": "Cool"
  },
  "judgment": {
    "id": "judgment",
    "num": 449,
    "accuracy": 100,
    "basePower": 100,
    "category": "Special",
    "name": "Judgment",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onModifyType": "onModifyType(move, pokemon) {\n      if (pokemon.ignoringItem()) return;\n      const item = pokemon.getItem();\n      if (item.id && item.onPlate && !item.zMove) {\n        move.type = item.onPlate;\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Beautiful"
  },
  "jumpkick": {
    "id": "jumpkick",
    "inherit": true,
    "basePower": 70,
    "onMoveFail": "onMoveFail(target, source, move) {\n      if (target.runImmunity(\"Fighting\")) {\n        const damage = this.actions.getDamage(source, target, move, true);\n        if (typeof damage !== \"number\") throw new Error(\"Jump Kick didn't recoil\");\n        this.damage(this.clampIntRange(damage / 2, 1, Math.floor(target.maxhp / 2)), source, source, move);\n      }\n    }"
  },
  "junglehealing": {
    "id": "junglehealing",
    "num": 816,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Jungle Healing",
    "pp": 10,
    "priority": 0,
    "flags": {
      "heal": 1,
      "bypasssub": 1,
      "allyanim": 1
    },
    "onHit": "onHit(pokemon) {\n      const success = !!this.heal(this.modify(pokemon.maxhp, 0.25));\n      return pokemon.cureStatus() || success;\n    }",
    "secondary": null,
    "target": "allies",
    "type": "Grass"
  },
  "karatechop": {
    "id": "karatechop",
    "inherit": true,
    "critRatio": 3
  },
  "kinesis": {
    "id": "kinesis",
    "num": 134,
    "accuracy": 80,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Kinesis",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "metronome": 1
    },
    "boosts": {
      "accuracy": -1
    },
    "secondary": null,
    "target": "normal",
    "type": "Psychic",
    "zMove": {
      "boost": {
        "evasion": 1
      }
    },
    "contestType": "Clever"
  },
  "kingsshield": {
    "id": "kingsshield",
    "num": 588,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "King's Shield",
    "pp": 10,
    "priority": 4,
    "flags": {
      "noassist": 1,
      "failcopycat": 1,
      "failinstruct": 1
    },
    "stallingMove": true,
    "volatileStatus": "kingsshield",
    "onPrepareHit": "onPrepareHit(pokemon) {\n      return !!this.queue.willAct() && this.runEvent(\"StallMove\", pokemon);\n    }",
    "onHit": "onHit(pokemon) {\n      pokemon.addVolatile(\"stall\");\n    }",
    "condition": {
      "duration": 1,
      "onStart": "onStart(target) {\n        this.add(\"-singleturn\", target, \"Protect\");\n      }",
      "onTryHitPriority": 3,
      "onTryHit": "onTryHit(target, source, move) {\n        if (!move.flags[\"protect\"] || move.category === \"Status\") {\n          if ([\"gmaxoneblow\", \"gmaxrapidflow\"].includes(move.id)) return;\n          if (move.isZ || move.isMax) target.getMoveHitData(move).zBrokeProtect = true;\n          return;\n        }\n        if (move.smartTarget) {\n          move.smartTarget = false;\n        } else {\n          this.add(\"-activate\", target, \"move: Protect\");\n        }\n        const lockedmove = source.getVolatile(\"lockedmove\");\n        if (lockedmove) {\n          if (source.volatiles[\"lockedmove\"].duration === 2) {\n            delete source.volatiles[\"lockedmove\"];\n          }\n        }\n        if (this.checkMoveMakesContact(move, source, target)) {\n          this.boost({ atk: -1 }, source, target, this.dex.getActiveMove(\"King's Shield\"));\n        }\n        return this.NOT_FAIL;\n      }",
      "onHit": "onHit(target, source, move) {\n        if (move.isZOrMaxPowered && this.checkMoveMakesContact(move, source, target)) {\n          this.boost({ atk: -1 }, source, target, this.dex.getActiveMove(\"King's Shield\"));\n        }\n      }"
    },
    "secondary": null,
    "target": "self",
    "type": "Steel",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Cool"
  },
  "knockoff": {
    "id": "knockoff",
    "num": 282,
    "accuracy": 100,
    "basePower": 65,
    "category": "Physical",
    "name": "Knock Off",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onBasePower": "onBasePower(basePower, source, target, move) {\n      const item = target.getItem();\n      if (!this.singleEvent(\"TakeItem\", item, target.itemState, target, target, move, item)) return;\n      if (item.id) {\n        return this.chainModify(1.5);\n      }\n    }",
    "onAfterHit": "onAfterHit(target, source) {\n      if (source.hp) {\n        const item = target.takeItem();\n        if (item) {\n          this.add(\"-enditem\", target, item.name, \"[from] move: Knock Off\", `[of] ${source}`);\n        }\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Dark",
    "contestType": "Clever"
  },
  "kowtowcleave": {
    "id": "kowtowcleave",
    "num": 869,
    "accuracy": true,
    "basePower": 85,
    "category": "Physical",
    "name": "Kowtow Cleave",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "slicing": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Dark"
  },
  "landswrath": {
    "id": "landswrath",
    "num": 616,
    "accuracy": 100,
    "basePower": 90,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Land's Wrath",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "nonsky": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "allAdjacentFoes",
    "type": "Ground",
    "zMove": {
      "basePower": 185
    },
    "contestType": "Beautiful"
  },
  "laserfocus": {
    "id": "laserfocus",
    "num": 673,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Laser Focus",
    "pp": 30,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "volatileStatus": "laserfocus",
    "condition": {
      "duration": 2,
      "onStart": "onStart(pokemon, source, effect) {\n        if (effect && [\"costar\", \"imposter\", \"psychup\", \"transform\"].includes(effect.id)) {\n          this.add(\"-start\", pokemon, \"move: Laser Focus\", \"[silent]\");\n        } else {\n          this.add(\"-start\", pokemon, \"move: Laser Focus\");\n        }\n      }",
      "onRestart": "onRestart(pokemon) {\n        this.effectState.duration = 2;\n        this.add(\"-start\", pokemon, \"move: Laser Focus\");\n      }",
      "onModifyCritRatio": "onModifyCritRatio(critRatio) {\n        return 5;\n      }",
      "onEnd": "onEnd(pokemon) {\n        this.add(\"-end\", pokemon, \"move: Laser Focus\", \"[silent]\");\n      }"
    },
    "secondary": null,
    "target": "self",
    "type": "Normal",
    "zMove": {
      "boost": {
        "atk": 1
      }
    },
    "contestType": "Cool"
  },
  "lashout": {
    "id": "lashout",
    "num": 808,
    "accuracy": 100,
    "basePower": 75,
    "category": "Physical",
    "name": "Lash Out",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onBasePower": "onBasePower(basePower, source) {\n      if (source.statsLoweredThisTurn) {\n        this.debug(\"lashout buff\");\n        return this.chainModify(2);\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Dark"
  },
  "lastresort": {
    "id": "lastresort",
    "num": 387,
    "accuracy": 100,
    "basePower": 140,
    "category": "Physical",
    "name": "Last Resort",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onTry": "onTry(source) {\n      if (source.moveSlots.length < 2) return false;\n      let hasLastResort = false;\n      for (const moveSlot of source.moveSlots) {\n        if (moveSlot.id === \"lastresort\") {\n          hasLastResort = true;\n          continue;\n        }\n        if (!moveSlot.used) return false;\n      }\n      return hasLastResort;\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Cute"
  },
  "lastrespects": {
    "id": "lastrespects",
    "num": 854,
    "accuracy": 100,
    "basePower": 50,
    "basePowerCallback": "basePowerCallback(pokemon, target, move) {\n      return 50 + 50 * pokemon.side.totalFainted;\n    }",
    "category": "Physical",
    "name": "Last Respects",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Ghost"
  },
  "lavaplume": {
    "id": "lavaplume",
    "num": 436,
    "accuracy": 100,
    "basePower": 80,
    "category": "Special",
    "name": "Lava Plume",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 30,
      "status": "brn"
    },
    "target": "allAdjacent",
    "type": "Fire",
    "contestType": "Tough"
  },
  "leafage": {
    "id": "leafage",
    "num": 670,
    "accuracy": 100,
    "basePower": 40,
    "category": "Physical",
    "name": "Leafage",
    "pp": 40,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Grass",
    "contestType": "Tough"
  },
  "leafblade": {
    "id": "leafblade",
    "inherit": true,
    "basePower": 70
  },
  "leafstorm": {
    "id": "leafstorm",
    "num": 437,
    "accuracy": 90,
    "basePower": 130,
    "category": "Special",
    "name": "Leaf Storm",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "self": {
      "boosts": {
        "spa": -2
      }
    },
    "secondary": null,
    "target": "normal",
    "type": "Grass",
    "contestType": "Beautiful"
  },
  "leaftornado": {
    "id": "leaftornado",
    "num": 536,
    "accuracy": 90,
    "basePower": 65,
    "category": "Special",
    "isNonstandard": "Past",
    "name": "Leaf Tornado",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 50,
      "boosts": {
        "accuracy": -1
      }
    },
    "target": "normal",
    "type": "Grass",
    "contestType": "Cool"
  },
  "leechlife": {
    "id": "leechlife",
    "num": 141,
    "accuracy": 100,
    "basePower": 80,
    "category": "Physical",
    "name": "Leech Life",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "heal": 1,
      "metronome": 1
    },
    "drain": [
      1,
      2
    ],
    "secondary": null,
    "target": "normal",
    "type": "Bug",
    "contestType": "Clever"
  },
  "leechseed": {
    "id": "leechseed",
    "inherit": true,
    "onHit": "onHit() {\n    }",
    "condition": {
      "onStart": "onStart(target) {\n        this.add(\"-start\", target, \"move: Leech Seed\");\n      }",
      "onAfterMoveSelfPriority": 2,
      "onAfterMoveSelf": "onAfterMoveSelf(pokemon) {\n        if (!pokemon.hp) return;\n        const leecher = this.getAtSlot(pokemon.volatiles[\"leechseed\"].sourceSlot);\n        if (!leecher || leecher.fainted || leecher.hp <= 0) {\n          return;\n        }\n        const toLeech = this.clampIntRange(pokemon.maxhp / 8, 1);\n        const damage = this.damage(toLeech, pokemon, leecher);\n        if (damage) {\n          this.heal(damage, leecher, pokemon);\n        }\n      }"
    }
  },
  "leer": {
    "id": "leer",
    "num": 43,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Leer",
    "pp": 30,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "metronome": 1
    },
    "boosts": {
      "def": -1
    },
    "secondary": null,
    "target": "allAdjacentFoes",
    "type": "Normal",
    "zMove": {
      "boost": {
        "atk": 1
      }
    },
    "contestType": "Cool"
  },
  "letssnuggleforever": {
    "id": "letssnuggleforever",
    "num": 726,
    "accuracy": true,
    "basePower": 190,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Let's Snuggle Forever",
    "pp": 1,
    "priority": 0,
    "flags": {
      "contact": 1
    },
    "isZ": "mimikiumz",
    "secondary": null,
    "target": "normal",
    "type": "Fairy",
    "contestType": "Cool"
  },
  "lick": {
    "id": "lick",
    "num": 122,
    "accuracy": 100,
    "basePower": 30,
    "category": "Physical",
    "name": "Lick",
    "pp": 30,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 30,
      "status": "par"
    },
    "target": "normal",
    "type": "Ghost",
    "contestType": "Cute"
  },
  "lifedew": {
    "id": "lifedew",
    "num": 791,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Life Dew",
    "pp": 10,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "heal": 1,
      "bypasssub": 1
    },
    "heal": [
      1,
      4
    ],
    "secondary": null,
    "target": "allies",
    "type": "Water"
  },
  "lightofruin": {
    "id": "lightofruin",
    "num": 617,
    "accuracy": 90,
    "basePower": 140,
    "category": "Special",
    "isNonstandard": "Past",
    "name": "Light of Ruin",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "recoil": [
      1,
      2
    ],
    "secondary": null,
    "target": "normal",
    "type": "Fairy",
    "contestType": "Beautiful"
  },
  "lightscreen": {
    "id": "lightscreen",
    "inherit": true,
    "condition": {
      "duration": 5,
      "onSideStart": "onSideStart(side) {\n        this.add(\"-sidestart\", side, \"move: Light Screen\");\n      }",
      "onSideResidualOrder": 9,
      "onSideEnd": "onSideEnd(side) {\n        this.add(\"-sideend\", side, \"move: Light Screen\");\n      }"
    }
  },
  "lightthatburnsthesky": {
    "id": "lightthatburnsthesky",
    "num": 723,
    "accuracy": true,
    "basePower": 200,
    "category": "Special",
    "isNonstandard": "Past",
    "name": "Light That Burns the Sky",
    "pp": 1,
    "priority": 0,
    "flags": {},
    "onModifyMove": "onModifyMove(move, pokemon) {\n      if (pokemon.getStat(\"atk\", false, true) > pokemon.getStat(\"spa\", false, true)) move.category = \"Physical\";\n    }",
    "ignoreAbility": true,
    "isZ": "ultranecroziumz",
    "secondary": null,
    "target": "normal",
    "type": "Psychic",
    "contestType": "Cool"
  },
  "liquidation": {
    "id": "liquidation",
    "num": 710,
    "accuracy": 100,
    "basePower": 85,
    "category": "Physical",
    "name": "Liquidation",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 20,
      "boosts": {
        "def": -1
      }
    },
    "target": "normal",
    "type": "Water",
    "contestType": "Cool"
  },
  "lockon": {
    "id": "lockon",
    "inherit": true,
    "accuracy": 100
  },
  "lovelykiss": {
    "id": "lovelykiss",
    "num": 142,
    "accuracy": 75,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Lovely Kiss",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "metronome": 1
    },
    "status": "slp",
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "zMove": {
      "boost": {
        "spe": 1
      }
    },
    "contestType": "Beautiful"
  },
  "lowkick": {
    "id": "lowkick",
    "inherit": true,
    "accuracy": 90,
    "basePower": 50,
    "basePowerCallback": "basePowerCallback() {\n      return 50;\n    }",
    "secondary": {
      "chance": 30,
      "volatileStatus": "flinch"
    }
  },
  "lowsweep": {
    "id": "lowsweep",
    "num": 490,
    "accuracy": 100,
    "basePower": 65,
    "category": "Physical",
    "name": "Low Sweep",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 100,
      "boosts": {
        "spe": -1
      }
    },
    "target": "normal",
    "type": "Fighting",
    "contestType": "Clever"
  },
  "luckychant": {
    "id": "luckychant",
    "num": 381,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Lucky Chant",
    "pp": 30,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "sideCondition": "luckychant",
    "condition": {
      "duration": 5,
      "onSideStart": "onSideStart(side) {\n        this.add(\"-sidestart\", side, \"move: Lucky Chant\");\n      }",
      "onCriticalHit": false,
      "onSideResidualOrder": 26,
      "onSideResidualSubOrder": 6,
      "onSideEnd": "onSideEnd(side) {\n        this.add(\"-sideend\", side, \"move: Lucky Chant\");\n      }"
    },
    "secondary": null,
    "target": "allySide",
    "type": "Normal",
    "zMove": {
      "boost": {
        "evasion": 1
      }
    },
    "contestType": "Cute"
  },
  "luminacrash": {
    "id": "luminacrash",
    "num": 855,
    "accuracy": 100,
    "basePower": 80,
    "category": "Special",
    "name": "Lumina Crash",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 100,
      "boosts": {
        "spd": -2
      }
    },
    "target": "normal",
    "type": "Psychic"
  },
  "lunarblessing": {
    "id": "lunarblessing",
    "num": 849,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Lunar Blessing",
    "pp": 5,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "heal": 1,
      "metronome": 1
    },
    "onHit": "onHit(pokemon) {\n      const success = !!this.heal(this.modify(pokemon.maxhp, 0.25));\n      return pokemon.cureStatus() || success;\n    }",
    "secondary": null,
    "target": "allies",
    "type": "Psychic"
  },
  "lunardance": {
    "id": "lunardance",
    "num": 461,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Lunar Dance",
    "pp": 10,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "dance": 1,
      "heal": 1,
      "metronome": 1
    },
    "onTryHit": "onTryHit(source) {\n      if (!this.canSwitch(source.side)) {\n        this.attrLastMove(\"[still]\");\n        this.add(\"-fail\", source);\n        return this.NOT_FAIL;\n      }\n    }",
    "selfdestruct": "ifHit",
    "slotCondition": "lunardance",
    "condition": {
      "onSwitchIn": "onSwitchIn(target) {\n        this.singleEvent(\"Swap\", this.effect, this.effectState, target);\n      }",
      "onSwap": "onSwap(target) {\n        if (!target.fainted && (target.hp < target.maxhp || target.status || target.moveSlots.some((moveSlot) => moveSlot.pp < moveSlot.maxpp))) {\n          target.heal(target.maxhp);\n          target.clearStatus();\n          for (const moveSlot of target.moveSlots) {\n            moveSlot.pp = moveSlot.maxpp;\n          }\n          this.add(\"-heal\", target, target.getHealth, \"[from] move: Lunar Dance\");\n          target.side.removeSlotCondition(target, \"lunardance\");\n        }\n      }"
    },
    "secondary": null,
    "target": "self",
    "type": "Psychic",
    "contestType": "Beautiful"
  },
  "lunge": {
    "id": "lunge",
    "num": 679,
    "accuracy": 100,
    "basePower": 80,
    "category": "Physical",
    "name": "Lunge",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 100,
      "boosts": {
        "atk": -1
      }
    },
    "target": "normal",
    "type": "Bug",
    "contestType": "Cute"
  },
  "lusterpurge": {
    "id": "lusterpurge",
    "num": 295,
    "accuracy": 100,
    "basePower": 95,
    "category": "Special",
    "name": "Luster Purge",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 50,
      "boosts": {
        "spd": -1
      }
    },
    "target": "normal",
    "type": "Psychic",
    "contestType": "Clever"
  },
  "machpunch": {
    "id": "machpunch",
    "num": 183,
    "accuracy": 100,
    "basePower": 40,
    "category": "Physical",
    "name": "Mach Punch",
    "pp": 30,
    "priority": 1,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "punch": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Fighting",
    "contestType": "Cool"
  },
  "magicalleaf": {
    "id": "magicalleaf",
    "num": 345,
    "accuracy": true,
    "basePower": 60,
    "category": "Special",
    "name": "Magical Leaf",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Grass",
    "contestType": "Beautiful"
  },
  "magicaltorque": {
    "id": "magicaltorque",
    "num": 900,
    "accuracy": 100,
    "basePower": 100,
    "category": "Physical",
    "isNonstandard": "Unobtainable",
    "name": "Magical Torque",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "failencore": 1,
      "failmefirst": 1,
      "nosleeptalk": 1,
      "noassist": 1,
      "failcopycat": 1,
      "failmimic": 1,
      "failinstruct": 1,
      "nosketch": 1
    },
    "secondary": {
      "chance": 30,
      "volatileStatus": "confusion"
    },
    "target": "normal",
    "type": "Fairy"
  },
  "magiccoat": {
    "id": "magiccoat",
    "num": 277,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Magic Coat",
    "pp": 15,
    "priority": 4,
    "flags": {
      "metronome": 1
    },
    "volatileStatus": "magiccoat",
    "condition": {
      "duration": 1,
      "onStart": "onStart(target, source, effect) {\n        this.add(\"-singleturn\", target, \"move: Magic Coat\");\n        if (effect?.effectType === \"Move\") {\n          this.effectState.pranksterBoosted = effect.pranksterBoosted;\n        }\n      }",
      "onTryHitPriority": 2,
      "onTryHit": "onTryHit(target, source, move) {\n        if (target === source || move.hasBounced || !move.flags[\"reflectable\"] || target.isSemiInvulnerable()) {\n          return;\n        }\n        const newMove = this.dex.getActiveMove(move.id);\n        newMove.hasBounced = true;\n        newMove.pranksterBoosted = this.effectState.pranksterBoosted;\n        this.actions.useMove(newMove, target, { target: source });\n        return null;\n      }",
      "onAllyTryHitSide": "onAllyTryHitSide(target, source, move) {\n        if (target.isAlly(source) || move.hasBounced || !move.flags[\"reflectable\"] || target.isSemiInvulnerable()) {\n          return;\n        }\n        const newMove = this.dex.getActiveMove(move.id);\n        newMove.hasBounced = true;\n        newMove.pranksterBoosted = false;\n        this.actions.useMove(newMove, this.effectState.target, { target: source });\n        return null;\n      }"
    },
    "secondary": null,
    "target": "self",
    "type": "Psychic",
    "zMove": {
      "boost": {
        "spd": 2
      }
    },
    "contestType": "Beautiful"
  },
  "magicpowder": {
    "id": "magicpowder",
    "num": 750,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Magic Powder",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "allyanim": 1,
      "metronome": 1,
      "powder": 1
    },
    "onHit": "onHit(target) {\n      if (target.getTypes().join() === \"Psychic\" || !target.setType(\"Psychic\")) return false;\n      this.add(\"-start\", target, \"typechange\", \"Psychic\");\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Psychic"
  },
  "magicroom": {
    "id": "magicroom",
    "num": 478,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Magic Room",
    "pp": 10,
    "priority": 0,
    "flags": {
      "mirror": 1,
      "metronome": 1
    },
    "pseudoWeather": "magicroom",
    "condition": {
      "duration": 5,
      "durationCallback": "durationCallback(source, effect) {\n        if (source?.hasAbility(\"persistent\")) {\n          this.add(\"-activate\", source, \"ability: Persistent\", \"[move] Magic Room\");\n          return 7;\n        }\n        return 5;\n      }",
      "onFieldStart": "onFieldStart(target, source) {\n        if (source?.hasAbility(\"persistent\")) {\n          this.add(\"-fieldstart\", \"move: Magic Room\", `[of] ${source}`, \"[persistent]\");\n        } else {\n          this.add(\"-fieldstart\", \"move: Magic Room\", `[of] ${source}`);\n        }\n        for (const mon of this.getAllActive()) {\n          this.singleEvent(\"End\", mon.getItem(), mon.itemState, mon);\n        }\n      }",
      "onFieldRestart": "onFieldRestart(target, source) {\n        this.field.removePseudoWeather(\"magicroom\");\n      }",
      "onFieldResidualOrder": 27,
      "onFieldResidualSubOrder": 6,
      "onFieldEnd": "onFieldEnd() {\n        this.add(\"-fieldend\", \"move: Magic Room\", \"[of] \" + this.effectState.source);\n      }"
    },
    "secondary": null,
    "target": "all",
    "type": "Psychic",
    "zMove": {
      "boost": {
        "spd": 1
      }
    },
    "contestType": "Clever"
  },
  "magmastorm": {
    "id": "magmastorm",
    "num": 463,
    "accuracy": 75,
    "basePower": 100,
    "category": "Special",
    "name": "Magma Storm",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "volatileStatus": "partiallytrapped",
    "secondary": null,
    "target": "normal",
    "type": "Fire",
    "contestType": "Tough"
  },
  "magnetbomb": {
    "id": "magnetbomb",
    "num": 443,
    "accuracy": true,
    "basePower": 60,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Magnet Bomb",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "bullet": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Steel",
    "contestType": "Cool"
  },
  "magneticflux": {
    "id": "magneticflux",
    "num": 602,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Magnetic Flux",
    "pp": 20,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "distance": 1,
      "bypasssub": 1,
      "metronome": 1
    },
    "onHitSide": "onHitSide(side, source, move) {\n      const targets = side.allies().filter((ally) => ally.hasAbility([\"plus\", \"minus\"]) && (!ally.volatiles[\"maxguard\"] || this.runEvent(\"TryHit\", ally, source, move)));\n      if (!targets.length) return false;\n      let didSomething = false;\n      for (const target of targets) {\n        didSomething = this.boost({ def: 1, spd: 1 }, target, source, move, false, true) || didSomething;\n      }\n      return didSomething;\n    }",
    "secondary": null,
    "target": "allySide",
    "type": "Electric",
    "zMove": {
      "boost": {
        "spd": 1
      }
    },
    "contestType": "Clever"
  },
  "magnetrise": {
    "id": "magnetrise",
    "num": 393,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Magnet Rise",
    "pp": 10,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "gravity": 1,
      "metronome": 1
    },
    "volatileStatus": "magnetrise",
    "onTry": "onTry(source, target, move) {\n      if (target.volatiles[\"smackdown\"] || target.volatiles[\"ingrain\"]) return false;\n      if (this.field.getPseudoWeather(\"Gravity\")) {\n        this.add(\"cant\", source, \"move: Gravity\", move);\n        return null;\n      }\n    }",
    "condition": {
      "duration": 5,
      "onStart": "onStart(target) {\n        this.add(\"-start\", target, \"Magnet Rise\");\n      }",
      "onImmunity": "onImmunity(type) {\n        if (type === \"Ground\") return false;\n      }",
      "onResidualOrder": 18,
      "onEnd": "onEnd(target) {\n        this.add(\"-end\", target, \"Magnet Rise\");\n      }"
    },
    "secondary": null,
    "target": "self",
    "type": "Electric",
    "zMove": {
      "boost": {
        "evasion": 1
      }
    },
    "contestType": "Clever"
  },
  "magnitude": {
    "id": "magnitude",
    "num": 222,
    "accuracy": 100,
    "basePower": 0,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Magnitude",
    "pp": 30,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "nonsky": 1,
      "metronome": 1
    },
    "onModifyMove": "onModifyMove(move, pokemon) {\n      const i = this.random(100);\n      if (i < 5) {\n        move.magnitude = 4;\n        move.basePower = 10;\n      } else if (i < 15) {\n        move.magnitude = 5;\n        move.basePower = 30;\n      } else if (i < 35) {\n        move.magnitude = 6;\n        move.basePower = 50;\n      } else if (i < 65) {\n        move.magnitude = 7;\n        move.basePower = 70;\n      } else if (i < 85) {\n        move.magnitude = 8;\n        move.basePower = 90;\n      } else if (i < 95) {\n        move.magnitude = 9;\n        move.basePower = 110;\n      } else {\n        move.magnitude = 10;\n        move.basePower = 150;\n      }\n    }",
    "onUseMoveMessage": "onUseMoveMessage(pokemon, target, move) {\n      this.add(\"-activate\", pokemon, \"move: Magnitude\", move.magnitude);\n    }",
    "secondary": null,
    "target": "allAdjacent",
    "type": "Ground",
    "zMove": {
      "basePower": 140
    },
    "maxMove": {
      "basePower": 140
    },
    "contestType": "Tough"
  },
  "makeitrain": {
    "id": "makeitrain",
    "num": 874,
    "accuracy": 100,
    "basePower": 120,
    "category": "Special",
    "name": "Make It Rain",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "self": {
      "boosts": {
        "spa": -1
      }
    },
    "secondary": null,
    "target": "allAdjacentFoes",
    "type": "Steel",
    "contestType": "Beautiful"
  },
  "maliciousmoonsault": {
    "id": "maliciousmoonsault",
    "num": 696,
    "accuracy": true,
    "basePower": 180,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Malicious Moonsault",
    "pp": 1,
    "priority": 0,
    "flags": {
      "contact": 1
    },
    "isZ": "inciniumz",
    "secondary": null,
    "target": "normal",
    "type": "Dark",
    "contestType": "Cool"
  },
  "malignantchain": {
    "id": "malignantchain",
    "num": 919,
    "accuracy": 100,
    "basePower": 100,
    "category": "Special",
    "name": "Malignant Chain",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 50,
      "status": "tox"
    },
    "target": "normal",
    "type": "Poison"
  },
  "matblock": {
    "id": "matblock",
    "num": 561,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Mat Block",
    "pp": 10,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "nonsky": 1,
      "noassist": 1,
      "failcopycat": 1
    },
    "stallingMove": true,
    "sideCondition": "matblock",
    "onTry": "onTry(source) {\n      if (source.activeMoveActions > 1) {\n        this.hint(\"Mat Block only works on your first turn out.\");\n        return false;\n      }\n      return !!this.queue.willAct();\n    }",
    "condition": {
      "duration": 1,
      "onSideStart": "onSideStart(target, source) {\n        this.add(\"-singleturn\", source, \"Mat Block\");\n      }",
      "onTryHitPriority": 3,
      "onTryHit": "onTryHit(target, source, move) {\n        if (!move.flags[\"protect\"]) {\n          if ([\"gmaxoneblow\", \"gmaxrapidflow\"].includes(move.id)) return;\n          if (move.isZ || move.isMax) target.getMoveHitData(move).zBrokeProtect = true;\n          return;\n        }\n        if (move && (move.target === \"self\" || move.category === \"Status\")) return;\n        this.add(\"-activate\", target, \"move: Mat Block\", move.name);\n        const lockedmove = source.getVolatile(\"lockedmove\");\n        if (lockedmove) {\n          if (source.volatiles[\"lockedmove\"].duration === 2) {\n            delete source.volatiles[\"lockedmove\"];\n          }\n        }\n        return this.NOT_FAIL;\n      }"
    },
    "secondary": null,
    "target": "allySide",
    "type": "Fighting",
    "zMove": {
      "boost": {
        "def": 1
      }
    },
    "contestType": "Cool"
  },
  "matchagotcha": {
    "id": "matchagotcha",
    "num": 902,
    "accuracy": 90,
    "basePower": 80,
    "category": "Special",
    "name": "Matcha Gotcha",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "defrost": 1,
      "heal": 1,
      "metronome": 1
    },
    "drain": [
      1,
      2
    ],
    "thawsTarget": true,
    "secondary": {
      "chance": 20,
      "status": "brn"
    },
    "target": "allAdjacentFoes",
    "type": "Grass"
  },
  "maxairstream": {
    "id": "maxairstream",
    "num": 766,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Max Airstream",
    "pp": 10,
    "priority": 0,
    "flags": {},
    "isMax": true,
    "self": {
      "onHit": "onHit(source) {\n        if (!source.volatiles[\"dynamax\"]) return;\n        for (const pokemon of source.alliesAndSelf()) {\n          this.boost({ spe: 1 }, pokemon);\n        }\n      }"
    },
    "target": "adjacentFoe",
    "type": "Flying",
    "contestType": "Cool"
  },
  "maxdarkness": {
    "id": "maxdarkness",
    "num": 772,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Max Darkness",
    "pp": 10,
    "priority": 0,
    "flags": {},
    "isMax": true,
    "self": {
      "onHit": "onHit(source) {\n        if (!source.volatiles[\"dynamax\"]) return;\n        for (const pokemon of source.foes()) {\n          this.boost({ spd: -1 }, pokemon);\n        }\n      }"
    },
    "target": "adjacentFoe",
    "type": "Dark",
    "contestType": "Cool"
  },
  "maxflare": {
    "id": "maxflare",
    "num": 757,
    "accuracy": true,
    "basePower": 100,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Max Flare",
    "pp": 10,
    "priority": 0,
    "flags": {},
    "isMax": true,
    "self": {
      "onHit": "onHit(source) {\n        if (!source.volatiles[\"dynamax\"]) return;\n        this.field.setWeather(\"sunnyday\");\n      }"
    },
    "target": "adjacentFoe",
    "type": "Fire",
    "contestType": "Cool"
  },
  "maxflutterby": {
    "id": "maxflutterby",
    "num": 758,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Max Flutterby",
    "pp": 10,
    "priority": 0,
    "flags": {},
    "isMax": true,
    "self": {
      "onHit": "onHit(source) {\n        if (!source.volatiles[\"dynamax\"]) return;\n        for (const pokemon of source.foes()) {\n          this.boost({ spa: -1 }, pokemon);\n        }\n      }"
    },
    "target": "adjacentFoe",
    "type": "Bug",
    "contestType": "Cool"
  },
  "maxgeyser": {
    "id": "maxgeyser",
    "num": 765,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Max Geyser",
    "pp": 10,
    "priority": 0,
    "flags": {},
    "isMax": true,
    "self": {
      "onHit": "onHit(source) {\n        if (!source.volatiles[\"dynamax\"]) return;\n        this.field.setWeather(\"raindance\");\n      }"
    },
    "target": "adjacentFoe",
    "type": "Water",
    "contestType": "Cool"
  },
  "maxguard": {
    "id": "maxguard",
    "num": 743,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Max Guard",
    "pp": 10,
    "priority": 4,
    "flags": {},
    "isMax": true,
    "stallingMove": true,
    "volatileStatus": "maxguard",
    "onPrepareHit": "onPrepareHit(pokemon) {\n      return !!this.queue.willAct() && this.runEvent(\"StallMove\", pokemon);\n    }",
    "onHit": "onHit(pokemon) {\n      pokemon.addVolatile(\"stall\");\n    }",
    "condition": {
      "duration": 1,
      "onStart": "onStart(target) {\n        this.add(\"-singleturn\", target, \"Max Guard\");\n      }",
      "onTryHitPriority": 3,
      "onTryHit": "onTryHit(target, source, move) {\n        const bypassesMaxGuard = [\n          \"acupressure\",\n          \"afteryou\",\n          \"allyswitch\",\n          \"aromatherapy\",\n          \"aromaticmist\",\n          \"coaching\",\n          \"confide\",\n          \"copycat\",\n          \"curse\",\n          \"decorate\",\n          \"doomdesire\",\n          \"feint\",\n          \"futuresight\",\n          \"gmaxoneblow\",\n          \"gmaxrapidflow\",\n          \"healbell\",\n          \"holdhands\",\n          \"howl\",\n          \"junglehealing\",\n          \"lifedew\",\n          \"meanlook\",\n          \"perishsong\",\n          \"playnice\",\n          \"powertrick\",\n          \"roar\",\n          \"roleplay\",\n          \"tearfullook\"\n        ];\n        if (bypassesMaxGuard.includes(move.id)) return;\n        if (move.smartTarget) {\n          move.smartTarget = false;\n        } else {\n          this.add(\"-activate\", target, \"move: Max Guard\");\n        }\n        const lockedmove = source.getVolatile(\"lockedmove\");\n        if (lockedmove) {\n          if (source.volatiles[\"lockedmove\"].duration === 2) {\n            delete source.volatiles[\"lockedmove\"];\n          }\n        }\n        return this.NOT_FAIL;\n      }"
    },
    "secondary": null,
    "target": "self",
    "type": "Normal",
    "contestType": "Cool"
  },
  "maxhailstorm": {
    "id": "maxhailstorm",
    "num": 763,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Max Hailstorm",
    "pp": 10,
    "priority": 0,
    "flags": {},
    "isMax": true,
    "self": {
      "onHit": "onHit(source) {\n        if (!source.volatiles[\"dynamax\"]) return;\n        this.field.setWeather(\"hail\");\n      }"
    },
    "target": "adjacentFoe",
    "type": "Ice",
    "contestType": "Cool"
  },
  "maxknuckle": {
    "id": "maxknuckle",
    "num": 761,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Max Knuckle",
    "pp": 10,
    "priority": 0,
    "flags": {},
    "isMax": true,
    "self": {
      "onHit": "onHit(source) {\n        if (!source.volatiles[\"dynamax\"]) return;\n        for (const pokemon of source.alliesAndSelf()) {\n          this.boost({ atk: 1 }, pokemon);\n        }\n      }"
    },
    "target": "adjacentFoe",
    "type": "Fighting",
    "contestType": "Cool"
  },
  "maxlightning": {
    "id": "maxlightning",
    "num": 759,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Max Lightning",
    "pp": 10,
    "priority": 0,
    "flags": {},
    "isMax": true,
    "self": {
      "onHit": "onHit(source) {\n        if (!source.volatiles[\"dynamax\"]) return;\n        this.field.setTerrain(\"electricterrain\");\n      }"
    },
    "target": "adjacentFoe",
    "type": "Electric",
    "contestType": "Cool"
  },
  "maxmindstorm": {
    "id": "maxmindstorm",
    "num": 769,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Max Mindstorm",
    "pp": 10,
    "priority": 0,
    "flags": {},
    "isMax": true,
    "self": {
      "onHit": "onHit(source) {\n        if (!source.volatiles[\"dynamax\"]) return;\n        this.field.setTerrain(\"psychicterrain\");\n      }"
    },
    "target": "adjacentFoe",
    "type": "Psychic",
    "contestType": "Cool"
  },
  "maxooze": {
    "id": "maxooze",
    "num": 764,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Max Ooze",
    "pp": 10,
    "priority": 0,
    "flags": {},
    "isMax": true,
    "self": {
      "onHit": "onHit(source) {\n        if (!source.volatiles[\"dynamax\"]) return;\n        for (const pokemon of source.alliesAndSelf()) {\n          this.boost({ spa: 1 }, pokemon);\n        }\n      }"
    },
    "target": "adjacentFoe",
    "type": "Poison",
    "contestType": "Cool"
  },
  "maxovergrowth": {
    "id": "maxovergrowth",
    "num": 773,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Max Overgrowth",
    "pp": 10,
    "priority": 0,
    "flags": {},
    "isMax": true,
    "self": {
      "onHit": "onHit(source) {\n        if (!source.volatiles[\"dynamax\"]) return;\n        this.field.setTerrain(\"grassyterrain\");\n      }"
    },
    "target": "adjacentFoe",
    "type": "Grass",
    "contestType": "Cool"
  },
  "maxphantasm": {
    "id": "maxphantasm",
    "num": 762,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Max Phantasm",
    "pp": 10,
    "priority": 0,
    "flags": {},
    "isMax": true,
    "self": {
      "onHit": "onHit(source) {\n        if (!source.volatiles[\"dynamax\"]) return;\n        for (const pokemon of source.foes()) {\n          this.boost({ def: -1 }, pokemon);\n        }\n      }"
    },
    "target": "adjacentFoe",
    "type": "Ghost",
    "contestType": "Cool"
  },
  "maxquake": {
    "id": "maxquake",
    "num": 771,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Max Quake",
    "pp": 10,
    "priority": 0,
    "flags": {},
    "isMax": true,
    "self": {
      "onHit": "onHit(source) {\n        if (!source.volatiles[\"dynamax\"]) return;\n        for (const pokemon of source.alliesAndSelf()) {\n          this.boost({ spd: 1 }, pokemon);\n        }\n      }"
    },
    "target": "adjacentFoe",
    "type": "Ground",
    "contestType": "Cool"
  },
  "maxrockfall": {
    "id": "maxrockfall",
    "num": 770,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Max Rockfall",
    "pp": 10,
    "priority": 0,
    "flags": {},
    "isMax": true,
    "self": {
      "onHit": "onHit(source) {\n        if (!source.volatiles[\"dynamax\"]) return;\n        this.field.setWeather(\"sandstorm\");\n      }"
    },
    "target": "adjacentFoe",
    "type": "Rock",
    "contestType": "Cool"
  },
  "maxstarfall": {
    "id": "maxstarfall",
    "num": 767,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Max Starfall",
    "pp": 10,
    "priority": 0,
    "flags": {},
    "isMax": true,
    "self": {
      "onHit": "onHit(source) {\n        if (!source.volatiles[\"dynamax\"]) return;\n        this.field.setTerrain(\"mistyterrain\");\n      }"
    },
    "target": "adjacentFoe",
    "type": "Fairy",
    "contestType": "Cool"
  },
  "maxsteelspike": {
    "id": "maxsteelspike",
    "num": 774,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Max Steelspike",
    "pp": 10,
    "priority": 0,
    "flags": {},
    "isMax": true,
    "self": {
      "onHit": "onHit(source) {\n        if (!source.volatiles[\"dynamax\"]) return;\n        for (const pokemon of source.alliesAndSelf()) {\n          this.boost({ def: 1 }, pokemon);\n        }\n      }"
    },
    "target": "adjacentFoe",
    "type": "Steel",
    "contestType": "Cool"
  },
  "maxstrike": {
    "id": "maxstrike",
    "num": 760,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Max Strike",
    "pp": 10,
    "priority": 0,
    "flags": {},
    "isMax": true,
    "self": {
      "onHit": "onHit(source) {\n        if (!source.volatiles[\"dynamax\"]) return;\n        for (const pokemon of source.foes()) {\n          this.boost({ spe: -1 }, pokemon);\n        }\n      }"
    },
    "target": "adjacentFoe",
    "type": "Normal",
    "contestType": "Cool"
  },
  "maxwyrmwind": {
    "id": "maxwyrmwind",
    "num": 768,
    "accuracy": true,
    "basePower": 10,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Max Wyrmwind",
    "pp": 10,
    "priority": 0,
    "flags": {},
    "isMax": true,
    "self": {
      "onHit": "onHit(source) {\n        if (!source.volatiles[\"dynamax\"]) return;\n        for (const pokemon of source.foes()) {\n          this.boost({ atk: -1 }, pokemon);\n        }\n      }"
    },
    "target": "adjacentFoe",
    "type": "Dragon",
    "contestType": "Cool"
  },
  "meanlook": {
    "id": "meanlook",
    "inherit": true,
    "flags": {
      "reflectable": 1,
      "mirror": 1,
      "metronome": 1
    }
  },
  "meditate": {
    "id": "meditate",
    "num": 96,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Meditate",
    "pp": 40,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "boosts": {
      "atk": 1
    },
    "secondary": null,
    "target": "self",
    "type": "Psychic",
    "zMove": {
      "boost": {
        "atk": 1
      }
    },
    "contestType": "Beautiful"
  },
  "mefirst": {
    "id": "mefirst",
    "num": 382,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Me First",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "bypasssub": 1,
      "failencore": 1,
      "failmefirst": 1,
      "nosleeptalk": 1,
      "noassist": 1,
      "failcopycat": 1,
      "failmimic": 1,
      "failinstruct": 1
    },
    "onTryHit": "onTryHit(target, pokemon) {\n      const action = this.queue.willMove(target);\n      if (!action) return false;\n      const move = this.dex.getActiveMove(action.move.id);\n      if (action.zmove || move.isZ || move.isMax) return false;\n      if (target.volatiles[\"mustrecharge\"]) return false;\n      if (move.category === \"Status\" || move.flags[\"failmefirst\"]) return false;\n      pokemon.addVolatile(\"mefirst\");\n      this.actions.useMove(move, pokemon, { target });\n      return null;\n    }",
    "condition": {
      "duration": 1,
      "onBasePowerPriority": 12,
      "onBasePower": "onBasePower(basePower) {\n        return this.chainModify(1.5);\n      }"
    },
    "callsMove": true,
    "secondary": null,
    "target": "adjacentFoe",
    "type": "Normal",
    "zMove": {
      "boost": {
        "spe": 2
      }
    },
    "contestType": "Clever"
  },
  "megadrain": {
    "id": "megadrain",
    "inherit": true,
    "pp": 10
  },
  "megahorn": {
    "id": "megahorn",
    "num": 224,
    "accuracy": 85,
    "basePower": 120,
    "category": "Physical",
    "name": "Megahorn",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Bug",
    "contestType": "Cool"
  },
  "megakick": {
    "id": "megakick",
    "num": 25,
    "accuracy": 75,
    "basePower": 120,
    "category": "Physical",
    "name": "Mega Kick",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Cool"
  },
  "megapunch": {
    "id": "megapunch",
    "num": 5,
    "accuracy": 85,
    "basePower": 80,
    "category": "Physical",
    "name": "Mega Punch",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "punch": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Tough"
  },
  "memento": {
    "id": "memento",
    "inherit": true,
    "accuracy": true
  },
  "menacingmoonrazemaelstrom": {
    "id": "menacingmoonrazemaelstrom",
    "num": 725,
    "accuracy": true,
    "basePower": 200,
    "category": "Special",
    "isNonstandard": "Past",
    "name": "Menacing Moonraze Maelstrom",
    "pp": 1,
    "priority": 0,
    "flags": {},
    "isZ": "lunaliumz",
    "ignoreAbility": true,
    "secondary": null,
    "target": "normal",
    "type": "Ghost",
    "contestType": "Cool"
  },
  "metalburst": {
    "id": "metalburst",
    "num": 368,
    "accuracy": 100,
    "basePower": 0,
    "damageCallback": "damageCallback(pokemon) {\n      const lastDamagedBy = pokemon.getLastDamagedBy(true);\n      if (lastDamagedBy !== void 0) {\n        return lastDamagedBy.damage * 1.5 || 1;\n      }\n      return 0;\n    }",
    "category": "Physical",
    "name": "Metal Burst",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "failmefirst": 1
    },
    "onTry": "onTry(source) {\n      const lastDamagedBy = source.getLastDamagedBy(true);\n      if (!lastDamagedBy?.thisTurn) return false;\n    }",
    "onModifyTarget": "onModifyTarget(targetRelayVar, source, target, move) {\n      const lastDamagedBy = source.getLastDamagedBy(true);\n      if (lastDamagedBy) {\n        targetRelayVar.target = this.getAtSlot(lastDamagedBy.slot);\n      }\n    }",
    "secondary": null,
    "target": "scripted",
    "type": "Steel",
    "contestType": "Cool"
  },
  "metalclaw": {
    "id": "metalclaw",
    "num": 232,
    "accuracy": 95,
    "basePower": 50,
    "category": "Physical",
    "name": "Metal Claw",
    "pp": 35,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 10,
      "self": {
        "boosts": {
          "atk": 1
        }
      }
    },
    "target": "normal",
    "type": "Steel",
    "contestType": "Cool"
  },
  "metalsound": {
    "id": "metalsound",
    "num": 319,
    "accuracy": 85,
    "basePower": 0,
    "category": "Status",
    "name": "Metal Sound",
    "pp": 40,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "sound": 1,
      "bypasssub": 1,
      "allyanim": 1,
      "metronome": 1
    },
    "boosts": {
      "spd": -2
    },
    "secondary": null,
    "target": "normal",
    "type": "Steel",
    "zMove": {
      "boost": {
        "spa": 1
      }
    },
    "contestType": "Clever"
  },
  "meteorassault": {
    "id": "meteorassault",
    "num": 794,
    "accuracy": 100,
    "basePower": 150,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Meteor Assault",
    "pp": 5,
    "priority": 0,
    "flags": {
      "recharge": 1,
      "protect": 1,
      "mirror": 1,
      "failinstruct": 1
    },
    "self": {
      "volatileStatus": "mustrecharge"
    },
    "secondary": null,
    "target": "normal",
    "type": "Fighting"
  },
  "meteorbeam": {
    "id": "meteorbeam",
    "num": 800,
    "accuracy": 90,
    "basePower": 120,
    "category": "Special",
    "name": "Meteor Beam",
    "pp": 10,
    "priority": 0,
    "flags": {
      "charge": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onTryMove": "onTryMove(attacker, defender, move) {\n      if (attacker.removeVolatile(move.id)) {\n        return;\n      }\n      this.add(\"-prepare\", attacker, move.name);\n      this.boost({ spa: 1 }, attacker, attacker, move);\n      if (!this.runEvent(\"ChargeMove\", attacker, defender, move)) {\n        return;\n      }\n      attacker.addVolatile(\"twoturnmove\", defender);\n      return null;\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Rock"
  },
  "meteormash": {
    "id": "meteormash",
    "num": 309,
    "accuracy": 90,
    "basePower": 90,
    "category": "Physical",
    "name": "Meteor Mash",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "punch": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 20,
      "self": {
        "boosts": {
          "atk": 1
        }
      }
    },
    "target": "normal",
    "type": "Steel",
    "contestType": "Cool"
  },
  "metronome": {
    "id": "metronome",
    "inherit": true,
    "flags": {
      "failencore": 1,
      "nosketch": 1
    }
  },
  "mightycleave": {
    "id": "mightycleave",
    "num": 910,
    "accuracy": 100,
    "basePower": 95,
    "category": "Physical",
    "name": "Mighty Cleave",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "mirror": 1,
      "metronome": 1,
      "slicing": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Rock"
  },
  "milkdrink": {
    "id": "milkdrink",
    "num": 208,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Milk Drink",
    "pp": 5,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "heal": 1,
      "metronome": 1
    },
    "heal": [
      1,
      2
    ],
    "secondary": null,
    "target": "self",
    "type": "Normal",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Cute"
  },
  "mimic": {
    "id": "mimic",
    "inherit": true,
    "flags": {
      "protect": 1,
      "bypasssub": 1,
      "allyanim": 1,
      "failencore": 1,
      "noassist": 1,
      "failmimic": 1
    }
  },
  "mindblown": {
    "id": "mindblown",
    "num": 720,
    "accuracy": 100,
    "basePower": 150,
    "category": "Special",
    "isNonstandard": "Past",
    "name": "Mind Blown",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "mindBlownRecoil": true,
    "onAfterMove": "onAfterMove(pokemon, target, move) {\n      if (move.mindBlownRecoil && !move.multihit) {\n        const hpBeforeRecoil = pokemon.hp;\n        this.damage(Math.round(pokemon.maxhp / 2), pokemon, pokemon, this.dex.conditions.get(\"Mind Blown\"), true);\n        if (pokemon.hp <= pokemon.maxhp / 2 && hpBeforeRecoil > pokemon.maxhp / 2) {\n          this.runEvent(\"EmergencyExit\", pokemon, pokemon);\n        }\n      }\n    }",
    "secondary": null,
    "target": "allAdjacent",
    "type": "Fire",
    "contestType": "Cool"
  },
  "mindreader": {
    "id": "mindreader",
    "inherit": true,
    "accuracy": 100
  },
  "minimize": {
    "id": "minimize",
    "num": 107,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Minimize",
    "pp": 10,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "volatileStatus": "minimize",
    "condition": {
      "noCopy": true,
      "onRestart": "() => null",
      "onSourceModifyDamage": "onSourceModifyDamage(damage, source, target, move) {\n        const boostedMoves = [\n          \"stomp\",\n          \"steamroller\",\n          \"bodyslam\",\n          \"flyingpress\",\n          \"dragonrush\",\n          \"heatcrash\",\n          \"heavyslam\",\n          \"maliciousmoonsault\",\n          \"supercellslam\"\n        ];\n        if (boostedMoves.includes(move.id)) {\n          return this.chainModify(2);\n        }\n      }",
      "onAccuracy": "onAccuracy(accuracy, target, source, move) {\n        const boostedMoves = [\n          \"stomp\",\n          \"steamroller\",\n          \"bodyslam\",\n          \"flyingpress\",\n          \"dragonrush\",\n          \"heatcrash\",\n          \"heavyslam\",\n          \"maliciousmoonsault\",\n          \"supercellslam\"\n        ];\n        if (boostedMoves.includes(move.id)) {\n          return true;\n        }\n        return accuracy;\n      }"
    },
    "boosts": {
      "evasion": 2
    },
    "secondary": null,
    "target": "self",
    "type": "Normal",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Cute"
  },
  "miracleeye": {
    "id": "miracleeye",
    "num": 357,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Miracle Eye",
    "pp": 40,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "bypasssub": 1,
      "metronome": 1
    },
    "volatileStatus": "miracleeye",
    "onTryHit": "onTryHit(target) {\n      if (target.volatiles[\"foresight\"]) return false;\n    }",
    "condition": {
      "noCopy": true,
      "onStart": "onStart(pokemon) {\n        this.add(\"-start\", pokemon, \"Miracle Eye\");\n      }",
      "onNegateImmunity": "onNegateImmunity(pokemon, type) {\n        if (pokemon.hasType(\"Dark\") && type === \"Psychic\") return false;\n      }",
      "onModifyBoost": "onModifyBoost(boosts) {\n        if (boosts.evasion && boosts.evasion > 0) {\n          boosts.evasion = 0;\n        }\n      }"
    },
    "secondary": null,
    "target": "normal",
    "type": "Psychic",
    "zMove": {
      "boost": {
        "spa": 1
      }
    },
    "contestType": "Clever"
  },
  "mirrorcoat": {
    "id": "mirrorcoat",
    "inherit": true,
    "condition": {
      "duration": 1,
      "noCopy": true,
      "onStart": "onStart(target, source, move) {\n        this.effectState.slot = null;\n        this.effectState.damage = 0;\n      }",
      "onRedirectTargetPriority": -1,
      "onRedirectTarget": "onRedirectTarget(target, source, source2) {\n        if (source !== this.effectState.target || !this.effectState.slot) return;\n        return this.getAtSlot(this.effectState.slot);\n      }",
      "onDamagePriority": -101,
      "onDamage": "onDamage(damage, target, source, effect) {\n        if (effect.effectType === \"Move\" && !source.isAlly(target) && effect.category === \"Special\" && effect.id !== \"hiddenpower\") {\n          this.effectState.slot = source.getSlot();\n          this.effectState.damage = 2 * damage;\n        }\n      }"
    }
  },
  "mirrormove": {
    "id": "mirrormove",
    "inherit": true,
    "flags": {
      "metronome": 1,
      "failencore": 1,
      "nosleeptalk": 1,
      "noassist": 1
    },
    "onTryHit": "onTryHit() {\n    }",
    "onHit": "onHit(pokemon) {\n      const noMirror = [\n        \"assist\",\n        \"curse\",\n        \"doomdesire\",\n        \"focuspunch\",\n        \"futuresight\",\n        \"magiccoat\",\n        \"metronome\",\n        \"mimic\",\n        \"mirrormove\",\n        \"naturepower\",\n        \"psychup\",\n        \"roleplay\",\n        \"sketch\",\n        \"sleeptalk\",\n        \"spikes\",\n        \"spitup\",\n        \"taunt\",\n        \"teeterdance\",\n        \"transform\"\n      ];\n      const lastAttackedBy = pokemon.getLastAttackedBy();\n      if (!lastAttackedBy?.source.lastMove || !lastAttackedBy.move) {\n        return false;\n      }\n      if (noMirror.includes(lastAttackedBy.move) || !lastAttackedBy.source.hasMove(lastAttackedBy.move)) {\n        return false;\n      }\n      this.actions.useMove(lastAttackedBy.move, pokemon);\n    }",
    "target": "self"
  },
  "mirrorshot": {
    "id": "mirrorshot",
    "num": 429,
    "accuracy": 85,
    "basePower": 65,
    "category": "Special",
    "isNonstandard": "Past",
    "name": "Mirror Shot",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 30,
      "boosts": {
        "accuracy": -1
      }
    },
    "target": "normal",
    "type": "Steel",
    "contestType": "Beautiful"
  },
  "mist": {
    "id": "mist",
    "num": 54,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Mist",
    "pp": 30,
    "priority": 0,
    "flags": {
      "metronome": 1
    },
    "volatileStatus": "mist",
    "condition": {
      "onStart": "onStart(pokemon) {\n        this.add(\"-start\", pokemon, \"Mist\");\n      }",
      "onTryBoost": "onTryBoost(boost, target, source, effect) {\n        if (source && target !== source) {\n          let showMsg = false;\n          let i;\n          for (i in boost) {\n            if (boost[i] < 0) {\n              delete boost[i];\n              showMsg = true;\n            }\n          }\n          if (showMsg && !effect.secondaries) {\n            this.add(\"-activate\", target, \"move: Mist\");\n          }\n        }\n      }"
    },
    "secondary": null,
    "target": "self",
    "type": "Ice"
  },
  "mistball": {
    "id": "mistball",
    "num": 296,
    "accuracy": 100,
    "basePower": 95,
    "category": "Special",
    "name": "Mist Ball",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "bullet": 1
    },
    "secondary": {
      "chance": 50,
      "boosts": {
        "spa": -1
      }
    },
    "target": "normal",
    "type": "Psychic",
    "contestType": "Clever"
  },
  "mistyexplosion": {
    "id": "mistyexplosion",
    "num": 802,
    "accuracy": 100,
    "basePower": 100,
    "category": "Special",
    "name": "Misty Explosion",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "selfdestruct": "always",
    "onBasePower": "onBasePower(basePower, source) {\n      if (this.field.isTerrain(\"mistyterrain\") && source.isGrounded()) {\n        this.debug(\"misty terrain boost\");\n        return this.chainModify(1.5);\n      }\n    }",
    "secondary": null,
    "target": "allAdjacent",
    "type": "Fairy"
  },
  "mistyterrain": {
    "id": "mistyterrain",
    "num": 581,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Misty Terrain",
    "pp": 10,
    "priority": 0,
    "flags": {
      "nonsky": 1,
      "metronome": 1
    },
    "terrain": "mistyterrain",
    "condition": {
      "effectType": "Terrain",
      "duration": 5,
      "durationCallback": "durationCallback(source, effect) {\n        if (source?.hasItem(\"terrainextender\")) {\n          return 8;\n        }\n        return 5;\n      }",
      "onSetStatus": "onSetStatus(status, target, source, effect) {\n        if (!target.isGrounded() || target.isSemiInvulnerable()) return;\n        if (effect && (effect.status || effect.id === \"yawn\")) {\n          this.add(\"-activate\", target, \"move: Misty Terrain\");\n        }\n        return false;\n      }",
      "onTryAddVolatile": "onTryAddVolatile(status, target, source, effect) {\n        if (!target.isGrounded() || target.isSemiInvulnerable()) return;\n        if (status.id === \"confusion\") {\n          if (effect.effectType === \"Move\" && !effect.secondaries) this.add(\"-activate\", target, \"move: Misty Terrain\");\n          return null;\n        }\n      }",
      "onBasePowerPriority": 6,
      "onBasePower": "onBasePower(basePower, attacker, defender, move) {\n        if (move.type === \"Dragon\" && defender.isGrounded() && !defender.isSemiInvulnerable()) {\n          this.debug(\"misty terrain weaken\");\n          return this.chainModify(0.5);\n        }\n      }",
      "onFieldStart": "onFieldStart(field, source, effect) {\n        if (effect?.effectType === \"Ability\") {\n          this.add(\"-fieldstart\", \"move: Misty Terrain\", \"[from] ability: \" + effect.name, `[of] ${source}`);\n        } else {\n          this.add(\"-fieldstart\", \"move: Misty Terrain\");\n        }\n      }",
      "onFieldResidualOrder": 27,
      "onFieldResidualSubOrder": 7,
      "onFieldEnd": "onFieldEnd() {\n        this.add(\"-fieldend\", \"Misty Terrain\");\n      }"
    },
    "secondary": null,
    "target": "all",
    "type": "Fairy",
    "zMove": {
      "boost": {
        "spd": 1
      }
    },
    "contestType": "Beautiful"
  },
  "moonblast": {
    "id": "moonblast",
    "num": 585,
    "accuracy": 100,
    "basePower": 95,
    "category": "Special",
    "name": "Moonblast",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 30,
      "boosts": {
        "spa": -1
      }
    },
    "target": "normal",
    "type": "Fairy",
    "contestType": "Beautiful"
  },
  "moongeistbeam": {
    "id": "moongeistbeam",
    "num": 714,
    "accuracy": 100,
    "basePower": 100,
    "category": "Special",
    "name": "Moongeist Beam",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "ignoreAbility": true,
    "secondary": null,
    "target": "normal",
    "type": "Ghost",
    "contestType": "Cool"
  },
  "moonlight": {
    "id": "moonlight",
    "inherit": true,
    "onHit": "onHit(pokemon) {\n      if (this.field.isWeather([\"sunnyday\", \"desolateland\"])) {\n        this.heal(pokemon.maxhp);\n      } else if (this.field.isWeather([\"raindance\", \"primordialsea\", \"sandstorm\", \"hail\"])) {\n        this.heal(pokemon.baseMaxhp / 4);\n      } else {\n        this.heal(pokemon.baseMaxhp / 2);\n      }\n    }"
  },
  "morningsun": {
    "id": "morningsun",
    "inherit": true,
    "onHit": "onHit(pokemon) {\n      if (this.field.isWeather([\"sunnyday\", \"desolateland\"])) {\n        this.heal(pokemon.maxhp);\n      } else if (this.field.isWeather([\"raindance\", \"primordialsea\", \"sandstorm\", \"hail\"])) {\n        this.heal(pokemon.baseMaxhp / 4);\n      } else {\n        this.heal(pokemon.baseMaxhp / 2);\n      }\n    }"
  },
  "mortalspin": {
    "id": "mortalspin",
    "num": 866,
    "accuracy": 100,
    "basePower": 30,
    "category": "Physical",
    "name": "Mortal Spin",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onAfterHit": "onAfterHit(target, pokemon, move) {\n      if (!move.hasSheerForce) {\n        if (pokemon.hp && pokemon.removeVolatile(\"leechseed\")) {\n          this.add(\"-end\", pokemon, \"Leech Seed\", \"[from] move: Mortal Spin\", `[of] ${pokemon}`);\n        }\n        const sideConditions = [\"spikes\", \"toxicspikes\", \"stealthrock\", \"stickyweb\", \"gmaxsteelsurge\"];\n        for (const condition of sideConditions) {\n          if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {\n            this.add(\"-sideend\", pokemon.side, this.dex.conditions.get(condition).name, \"[from] move: Mortal Spin\", `[of] ${pokemon}`);\n          }\n        }\n        if (pokemon.hp && pokemon.volatiles[\"partiallytrapped\"]) {\n          pokemon.removeVolatile(\"partiallytrapped\");\n        }\n      }\n    }",
    "onAfterSubDamage": "onAfterSubDamage(damage, target, pokemon, move) {\n      if (!move.hasSheerForce) {\n        if (pokemon.hp && pokemon.removeVolatile(\"leechseed\")) {\n          this.add(\"-end\", pokemon, \"Leech Seed\", \"[from] move: Mortal Spin\", `[of] ${pokemon}`);\n        }\n        const sideConditions = [\"spikes\", \"toxicspikes\", \"stealthrock\", \"stickyweb\", \"gmaxsteelsurge\"];\n        for (const condition of sideConditions) {\n          if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {\n            this.add(\"-sideend\", pokemon.side, this.dex.conditions.get(condition).name, \"[from] move: Mortal Spin\", `[of] ${pokemon}`);\n          }\n        }\n        if (pokemon.hp && pokemon.volatiles[\"partiallytrapped\"]) {\n          pokemon.removeVolatile(\"partiallytrapped\");\n        }\n      }\n    }",
    "secondary": {
      "chance": 100,
      "status": "psn"
    },
    "target": "allAdjacentFoes",
    "type": "Poison"
  },
  "mountaingale": {
    "id": "mountaingale",
    "num": 836,
    "accuracy": 85,
    "basePower": 100,
    "category": "Physical",
    "name": "Mountain Gale",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 30,
      "volatileStatus": "flinch"
    },
    "target": "normal",
    "type": "Ice"
  },
  "mudbomb": {
    "id": "mudbomb",
    "num": 426,
    "accuracy": 85,
    "basePower": 65,
    "category": "Special",
    "isNonstandard": "Past",
    "name": "Mud Bomb",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "bullet": 1
    },
    "secondary": {
      "chance": 30,
      "boosts": {
        "accuracy": -1
      }
    },
    "target": "normal",
    "type": "Ground",
    "contestType": "Cute"
  },
  "mudshot": {
    "id": "mudshot",
    "num": 341,
    "accuracy": 95,
    "basePower": 55,
    "category": "Special",
    "name": "Mud Shot",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 100,
      "boosts": {
        "spe": -1
      }
    },
    "target": "normal",
    "type": "Ground",
    "contestType": "Tough"
  },
  "mudslap": {
    "id": "mudslap",
    "num": 189,
    "accuracy": 100,
    "basePower": 20,
    "category": "Special",
    "name": "Mud-Slap",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 100,
      "boosts": {
        "accuracy": -1
      }
    },
    "target": "normal",
    "type": "Ground",
    "contestType": "Cute"
  },
  "mudsport": {
    "id": "mudsport",
    "num": 300,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Mud Sport",
    "pp": 15,
    "priority": 0,
    "flags": {
      "nonsky": 1,
      "metronome": 1
    },
    "pseudoWeather": "mudsport",
    "condition": {
      "duration": 5,
      "onFieldStart": "onFieldStart(field, source) {\n        this.add(\"-fieldstart\", \"move: Mud Sport\", `[of] ${source}`);\n      }",
      "onBasePowerPriority": 1,
      "onBasePower": "onBasePower(basePower, attacker, defender, move) {\n        if (move.type === \"Electric\") {\n          this.debug(\"mud sport weaken\");\n          return this.chainModify([1352, 4096]);\n        }\n      }",
      "onFieldResidualOrder": 27,
      "onFieldResidualSubOrder": 4,
      "onFieldEnd": "onFieldEnd() {\n        this.add(\"-fieldend\", \"move: Mud Sport\");\n      }"
    },
    "secondary": null,
    "target": "all",
    "type": "Ground",
    "zMove": {
      "boost": {
        "spd": 1
      }
    },
    "contestType": "Cute"
  },
  "muddywater": {
    "id": "muddywater",
    "num": 330,
    "accuracy": 85,
    "basePower": 90,
    "category": "Special",
    "name": "Muddy Water",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "nonsky": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 30,
      "boosts": {
        "accuracy": -1
      }
    },
    "target": "allAdjacentFoes",
    "type": "Water",
    "contestType": "Tough"
  },
  "multiattack": {
    "id": "multiattack",
    "num": 718,
    "accuracy": 100,
    "basePower": 120,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Multi-Attack",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onModifyType": "onModifyType(move, pokemon) {\n      if (pokemon.ignoringItem()) return;\n      move.type = this.runEvent(\"Memory\", pokemon, null, move, \"Normal\");\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "zMove": {
      "basePower": 185
    },
    "maxMove": {
      "basePower": 95
    },
    "contestType": "Tough"
  },
  "mysticalfire": {
    "id": "mysticalfire",
    "num": 595,
    "accuracy": 100,
    "basePower": 75,
    "category": "Special",
    "name": "Mystical Fire",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 100,
      "boosts": {
        "spa": -1
      }
    },
    "target": "normal",
    "type": "Fire",
    "contestType": "Beautiful"
  },
  "mysticalpower": {
    "id": "mysticalpower",
    "num": 832,
    "accuracy": 90,
    "basePower": 70,
    "category": "Special",
    "name": "Mystical Power",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 100,
      "self": {
        "boosts": {
          "spa": 1
        }
      }
    },
    "target": "normal",
    "type": "Psychic"
  },
  "nastyplot": {
    "id": "nastyplot",
    "num": 417,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Nasty Plot",
    "pp": 20,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "boosts": {
      "spa": 2
    },
    "secondary": null,
    "target": "self",
    "type": "Dark",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Clever"
  },
  "naturalgift": {
    "id": "naturalgift",
    "num": 363,
    "accuracy": 100,
    "basePower": 0,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Natural Gift",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onModifyType": "onModifyType(move, pokemon) {\n      if (pokemon.ignoringItem()) return;\n      const item = pokemon.getItem();\n      if (!item.naturalGift) return;\n      move.type = item.naturalGift.type;\n    }",
    "onPrepareHit": "onPrepareHit(target, pokemon, move) {\n      if (pokemon.ignoringItem()) return false;\n      const item = pokemon.getItem();\n      if (!item.naturalGift) return false;\n      move.basePower = item.naturalGift.basePower;\n      this.debug(`BP: ${move.basePower}`);\n      pokemon.setItem(\"\");\n      pokemon.lastItem = item.id;\n      pokemon.usedItemThisTurn = true;\n      this.runEvent(\"AfterUseItem\", pokemon, null, null, item);\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "zMove": {
      "basePower": 160
    },
    "maxMove": {
      "basePower": 130
    },
    "contestType": "Clever"
  },
  "naturepower": {
    "id": "naturepower",
    "inherit": true,
    "accuracy": 95,
    "onHit": "onHit(target) {\n      this.actions.useMove(\"swift\", target);\n    }"
  },
  "naturesmadness": {
    "id": "naturesmadness",
    "num": 717,
    "accuracy": 90,
    "basePower": 0,
    "damageCallback": "damageCallback(pokemon, target) {\n      return this.clampIntRange(Math.floor(target.getUndynamaxedHP() / 2), 1);\n    }",
    "category": "Special",
    "isNonstandard": "Past",
    "name": "Nature's Madness",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Fairy",
    "contestType": "Tough"
  },
  "needlearm": {
    "id": "needlearm",
    "inherit": true,
    "basePowerCallback": "basePowerCallback(pokemon, target) {\n      if (target.volatiles[\"minimize\"]) return 120;\n      return 60;\n    }"
  },
  "neverendingnightmare": {
    "id": "neverendingnightmare",
    "num": 636,
    "accuracy": true,
    "basePower": 1,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Never-Ending Nightmare",
    "pp": 1,
    "priority": 0,
    "flags": {},
    "isZ": "ghostiumz",
    "secondary": null,
    "target": "normal",
    "type": "Ghost",
    "contestType": "Cool"
  },
  "nightdaze": {
    "id": "nightdaze",
    "num": 539,
    "accuracy": 95,
    "basePower": 85,
    "category": "Special",
    "name": "Night Daze",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 40,
      "boosts": {
        "accuracy": -1
      }
    },
    "target": "normal",
    "type": "Dark",
    "contestType": "Cool"
  },
  "nightmare": {
    "id": "nightmare",
    "inherit": true,
    "accuracy": true
  },
  "nightshade": {
    "id": "nightshade",
    "num": 101,
    "accuracy": 100,
    "basePower": 0,
    "damage": "level",
    "category": "Special",
    "name": "Night Shade",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Ghost",
    "contestType": "Clever"
  },
  "nightslash": {
    "id": "nightslash",
    "num": 400,
    "accuracy": 100,
    "basePower": 70,
    "category": "Physical",
    "name": "Night Slash",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "slicing": 1
    },
    "critRatio": 2,
    "secondary": null,
    "target": "normal",
    "type": "Dark",
    "contestType": "Cool"
  },
  "nobleroar": {
    "id": "nobleroar",
    "num": 568,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Noble Roar",
    "pp": 30,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "sound": 1,
      "bypasssub": 1,
      "metronome": 1
    },
    "boosts": {
      "atk": -1,
      "spa": -1
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "zMove": {
      "boost": {
        "def": 1
      }
    },
    "contestType": "Tough"
  },
  "noretreat": {
    "id": "noretreat",
    "num": 748,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "No Retreat",
    "pp": 5,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "volatileStatus": "noretreat",
    "onTry": "onTry(source, target, move) {\n      if (source.volatiles[\"noretreat\"]) return false;\n      if (source.volatiles[\"trapped\"]) {\n        delete move.volatileStatus;\n      }\n    }",
    "condition": {
      "onStart": "onStart(pokemon) {\n        this.add(\"-start\", pokemon, \"move: No Retreat\");\n      }",
      "onTrapPokemon": "onTrapPokemon(pokemon) {\n        pokemon.tryTrap();\n      }"
    },
    "boosts": {
      "atk": 1,
      "def": 1,
      "spa": 1,
      "spd": 1,
      "spe": 1
    },
    "secondary": null,
    "target": "self",
    "type": "Fighting"
  },
  "noxioustorque": {
    "id": "noxioustorque",
    "num": 898,
    "accuracy": 100,
    "basePower": 100,
    "category": "Physical",
    "isNonstandard": "Unobtainable",
    "name": "Noxious Torque",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "failencore": 1,
      "failmefirst": 1,
      "nosleeptalk": 1,
      "noassist": 1,
      "failcopycat": 1,
      "failmimic": 1,
      "failinstruct": 1,
      "nosketch": 1
    },
    "secondary": {
      "chance": 30,
      "status": "psn"
    },
    "target": "normal",
    "type": "Poison"
  },
  "nuzzle": {
    "id": "nuzzle",
    "num": 609,
    "accuracy": 100,
    "basePower": 20,
    "category": "Physical",
    "name": "Nuzzle",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 100,
      "status": "par"
    },
    "target": "normal",
    "type": "Electric",
    "contestType": "Cute"
  },
  "oblivionwing": {
    "id": "oblivionwing",
    "num": 613,
    "accuracy": 100,
    "basePower": 80,
    "category": "Special",
    "isNonstandard": "Past",
    "name": "Oblivion Wing",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "distance": 1,
      "heal": 1,
      "metronome": 1
    },
    "drain": [
      3,
      4
    ],
    "secondary": null,
    "target": "any",
    "type": "Flying",
    "contestType": "Cool"
  },
  "obstruct": {
    "id": "obstruct",
    "num": 792,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Obstruct",
    "pp": 10,
    "priority": 4,
    "flags": {
      "failinstruct": 1
    },
    "stallingMove": true,
    "volatileStatus": "obstruct",
    "onPrepareHit": "onPrepareHit(pokemon) {\n      return !!this.queue.willAct() && this.runEvent(\"StallMove\", pokemon);\n    }",
    "onHit": "onHit(pokemon) {\n      pokemon.addVolatile(\"stall\");\n    }",
    "condition": {
      "duration": 1,
      "onStart": "onStart(target) {\n        this.add(\"-singleturn\", target, \"Protect\");\n      }",
      "onTryHitPriority": 3,
      "onTryHit": "onTryHit(target, source, move) {\n        if (!move.flags[\"protect\"] || move.category === \"Status\") {\n          if ([\"gmaxoneblow\", \"gmaxrapidflow\"].includes(move.id)) return;\n          if (move.isZ || move.isMax) target.getMoveHitData(move).zBrokeProtect = true;\n          return;\n        }\n        if (move.smartTarget) {\n          move.smartTarget = false;\n        } else {\n          this.add(\"-activate\", target, \"move: Protect\");\n        }\n        const lockedmove = source.getVolatile(\"lockedmove\");\n        if (lockedmove) {\n          if (source.volatiles[\"lockedmove\"].duration === 2) {\n            delete source.volatiles[\"lockedmove\"];\n          }\n        }\n        if (this.checkMoveMakesContact(move, source, target)) {\n          this.boost({ def: -2 }, source, target, this.dex.getActiveMove(\"Obstruct\"));\n        }\n        return this.NOT_FAIL;\n      }",
      "onHit": "onHit(target, source, move) {\n        if (move.isZOrMaxPowered && this.checkMoveMakesContact(move, source, target)) {\n          this.boost({ def: -2 }, source, target, this.dex.getActiveMove(\"Obstruct\"));\n        }\n      }"
    },
    "secondary": null,
    "target": "self",
    "type": "Dark"
  },
  "oceanicoperetta": {
    "id": "oceanicoperetta",
    "num": 697,
    "accuracy": true,
    "basePower": 195,
    "category": "Special",
    "isNonstandard": "Past",
    "name": "Oceanic Operetta",
    "pp": 1,
    "priority": 0,
    "flags": {},
    "isZ": "primariumz",
    "secondary": null,
    "target": "normal",
    "type": "Water",
    "contestType": "Cool"
  },
  "octazooka": {
    "id": "octazooka",
    "num": 190,
    "accuracy": 85,
    "basePower": 65,
    "category": "Special",
    "isNonstandard": "Past",
    "name": "Octazooka",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "bullet": 1
    },
    "secondary": {
      "chance": 50,
      "boosts": {
        "accuracy": -1
      }
    },
    "target": "normal",
    "type": "Water",
    "contestType": "Tough"
  },
  "octolock": {
    "id": "octolock",
    "num": 753,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Octolock",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onTryImmunity": "onTryImmunity(target) {\n      return this.dex.getImmunity(\"trapped\", target);\n    }",
    "volatileStatus": "octolock",
    "condition": {
      "onStart": "onStart(pokemon, source) {\n        this.add(\"-start\", pokemon, \"move: Octolock\", `[of] ${source}`);\n      }",
      "onResidualOrder": 14,
      "onResidual": "onResidual(pokemon) {\n        const source = this.effectState.source;\n        if (source && (!source.isActive || source.hp <= 0 || !source.activeTurns)) {\n          delete pokemon.volatiles[\"octolock\"];\n          this.add(\"-end\", pokemon, \"Octolock\", \"[partiallytrapped]\", \"[silent]\");\n          return;\n        }\n        this.boost({ def: -1, spd: -1 }, pokemon, source, this.dex.getActiveMove(\"octolock\"));\n      }",
      "onTrapPokemon": "onTrapPokemon(pokemon) {\n        if (this.effectState.source?.isActive) pokemon.tryTrap();\n      }"
    },
    "secondary": null,
    "target": "normal",
    "type": "Fighting"
  },
  "odorsleuth": {
    "id": "odorsleuth",
    "inherit": true,
    "accuracy": 100
  },
  "ominouswind": {
    "id": "ominouswind",
    "num": 466,
    "accuracy": 100,
    "basePower": 60,
    "category": "Special",
    "isNonstandard": "Past",
    "name": "Ominous Wind",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 10,
      "self": {
        "boosts": {
          "atk": 1,
          "def": 1,
          "spa": 1,
          "spd": 1,
          "spe": 1
        }
      }
    },
    "target": "normal",
    "type": "Ghost",
    "contestType": "Beautiful"
  },
  "orderup": {
    "id": "orderup",
    "num": 856,
    "accuracy": 100,
    "basePower": 80,
    "category": "Physical",
    "name": "Order Up",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1
    },
    "onAfterMoveSecondarySelf": "onAfterMoveSecondarySelf(pokemon, target, move) {\n      if (!pokemon.volatiles[\"commanded\"]) return;\n      const tatsugiri = pokemon.volatiles[\"commanded\"].source;\n      if (tatsugiri.baseSpecies.baseSpecies !== \"Tatsugiri\") return;\n      switch (tatsugiri.baseSpecies.forme) {\n        case \"Droopy\":\n          this.boost({ def: 1 }, pokemon, pokemon);\n          break;\n        case \"Stretchy\":\n          this.boost({ spe: 1 }, pokemon, pokemon);\n          break;\n        default:\n          this.boost({ atk: 1 }, pokemon, pokemon);\n          break;\n      }\n    }",
    "secondary": null,
    "hasSheerForce": true,
    "target": "normal",
    "type": "Dragon"
  },
  "originpulse": {
    "id": "originpulse",
    "num": 618,
    "accuracy": 85,
    "basePower": 110,
    "category": "Special",
    "name": "Origin Pulse",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "pulse": 1
    },
    "target": "allAdjacentFoes",
    "type": "Water",
    "contestType": "Beautiful"
  },
  "outrage": {
    "id": "outrage",
    "inherit": true,
    "basePower": 90
  },
  "overdrive": {
    "id": "overdrive",
    "num": 786,
    "accuracy": 100,
    "basePower": 80,
    "category": "Special",
    "name": "Overdrive",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "sound": 1,
      "bypasssub": 1
    },
    "secondary": null,
    "target": "allAdjacentFoes",
    "type": "Electric"
  },
  "overheat": {
    "id": "overheat",
    "inherit": true,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    }
  },
  "painsplit": {
    "id": "painsplit",
    "inherit": true,
    "accuracy": 100
  },
  "paraboliccharge": {
    "id": "paraboliccharge",
    "num": 570,
    "accuracy": 100,
    "basePower": 65,
    "category": "Special",
    "name": "Parabolic Charge",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "heal": 1,
      "metronome": 1
    },
    "drain": [
      1,
      2
    ],
    "secondary": null,
    "target": "allAdjacent",
    "type": "Electric",
    "contestType": "Clever"
  },
  "partingshot": {
    "id": "partingshot",
    "num": 575,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Parting Shot",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "sound": 1,
      "bypasssub": 1,
      "metronome": 1
    },
    "onHit": "onHit(target, source, move) {\n      const success = this.boost({ atk: -1, spa: -1 }, target, source);\n      if (!success && !target.hasAbility(\"mirrorarmor\")) {\n        delete move.selfSwitch;\n      }\n    }",
    "selfSwitch": true,
    "secondary": null,
    "target": "normal",
    "type": "Dark",
    "zMove": {
      "effect": "healreplacement"
    },
    "contestType": "Cool"
  },
  "payback": {
    "id": "payback",
    "num": 371,
    "accuracy": 100,
    "basePower": 50,
    "basePowerCallback": "basePowerCallback(pokemon, target, move) {\n      if (target.newlySwitched || this.queue.willMove(target)) {\n        this.debug(\"Payback NOT boosted\");\n        return move.basePower;\n      }\n      this.debug(\"Payback damage boost\");\n      return move.basePower * 2;\n    }",
    "category": "Physical",
    "name": "Payback",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Dark",
    "contestType": "Tough"
  },
  "payday": {
    "id": "payday",
    "num": 6,
    "accuracy": 100,
    "basePower": 40,
    "category": "Physical",
    "name": "Pay Day",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Clever"
  },
  "peck": {
    "id": "peck",
    "num": 64,
    "accuracy": 100,
    "basePower": 35,
    "category": "Physical",
    "name": "Peck",
    "pp": 35,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "distance": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "any",
    "type": "Flying",
    "contestType": "Cool"
  },
  "perishsong": {
    "id": "perishsong",
    "inherit": true,
    "condition": {
      "duration": 4,
      "onEnd": "onEnd(target) {\n        this.add(\"-start\", target, \"perish0\");\n        target.faint();\n      }",
      "onResidualOrder": 4,
      "onResidual": "onResidual(pokemon) {\n        const duration = pokemon.volatiles[\"perishsong\"].duration;\n        this.add(\"-start\", pokemon, `perish${duration}`);\n      }"
    }
  },
  "petalblizzard": {
    "id": "petalblizzard",
    "num": 572,
    "accuracy": 100,
    "basePower": 90,
    "category": "Physical",
    "name": "Petal Blizzard",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "wind": 1
    },
    "secondary": null,
    "target": "allAdjacent",
    "type": "Grass",
    "contestType": "Beautiful"
  },
  "petaldance": {
    "id": "petaldance",
    "inherit": true,
    "basePower": 70
  },
  "phantomforce": {
    "id": "phantomforce",
    "num": 566,
    "accuracy": 100,
    "basePower": 90,
    "category": "Physical",
    "name": "Phantom Force",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "charge": 1,
      "mirror": 1,
      "metronome": 1,
      "nosleeptalk": 1,
      "noassist": 1,
      "failinstruct": 1
    },
    "breaksProtect": true,
    "onTryMove": "onTryMove(attacker, defender, move) {\n      if (attacker.removeVolatile(move.id)) {\n        return;\n      }\n      this.add(\"-prepare\", attacker, move.name);\n      if (!this.runEvent(\"ChargeMove\", attacker, defender, move)) {\n        return;\n      }\n      attacker.addVolatile(\"twoturnmove\", defender);\n      return null;\n    }",
    "condition": {
      "duration": 2,
      "onInvulnerability": false
    },
    "secondary": null,
    "target": "normal",
    "type": "Ghost",
    "contestType": "Cool"
  },
  "photongeyser": {
    "id": "photongeyser",
    "num": 722,
    "accuracy": 100,
    "basePower": 100,
    "category": "Special",
    "name": "Photon Geyser",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "onModifyMove": "onModifyMove(move, pokemon) {\n      if (pokemon.getStat(\"atk\", false, true) > pokemon.getStat(\"spa\", false, true)) move.category = \"Physical\";\n    }",
    "ignoreAbility": true,
    "secondary": null,
    "target": "normal",
    "type": "Psychic",
    "contestType": "Cool"
  },
  "pikapapow": {
    "id": "pikapapow",
    "num": 732,
    "accuracy": true,
    "basePower": 0,
    "basePowerCallback": "basePowerCallback(pokemon) {\n      const bp = Math.floor(pokemon.happiness * 10 / 25) || 1;\n      this.debug(`BP: ${bp}`);\n      return bp;\n    }",
    "category": "Special",
    "isNonstandard": "LGPE",
    "name": "Pika Papow",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Electric",
    "contestType": "Cute"
  },
  "pinmissile": {
    "id": "pinmissile",
    "num": 42,
    "accuracy": 95,
    "basePower": 25,
    "category": "Physical",
    "name": "Pin Missile",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "multihit": [
      2,
      5
    ],
    "secondary": null,
    "target": "normal",
    "type": "Bug",
    "zMove": {
      "basePower": 140
    },
    "maxMove": {
      "basePower": 130
    },
    "contestType": "Cool"
  },
  "plasmafists": {
    "id": "plasmafists",
    "num": 721,
    "accuracy": 100,
    "basePower": 100,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Plasma Fists",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "punch": 1
    },
    "pseudoWeather": "iondeluge",
    "secondary": null,
    "target": "normal",
    "type": "Electric",
    "contestType": "Cool"
  },
  "playnice": {
    "id": "playnice",
    "num": 589,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Play Nice",
    "pp": 20,
    "priority": 0,
    "flags": {
      "reflectable": 1,
      "mirror": 1,
      "bypasssub": 1,
      "metronome": 1
    },
    "boosts": {
      "atk": -1
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "zMove": {
      "boost": {
        "def": 1
      }
    },
    "contestType": "Cute"
  },
  "playrough": {
    "id": "playrough",
    "num": 583,
    "accuracy": 90,
    "basePower": 90,
    "category": "Physical",
    "name": "Play Rough",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 10,
      "boosts": {
        "atk": -1
      }
    },
    "target": "normal",
    "type": "Fairy",
    "contestType": "Cute"
  },
  "pluck": {
    "id": "pluck",
    "num": 365,
    "accuracy": 100,
    "basePower": 60,
    "category": "Physical",
    "name": "Pluck",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "distance": 1,
      "metronome": 1
    },
    "onHit": "onHit(target, source) {\n      const item = target.getItem();\n      if (source.hp && item.isBerry && target.takeItem(source)) {\n        this.add(\"-enditem\", target, item.name, \"[from] stealeat\", \"[move] Pluck\", `[of] ${source}`);\n        if (this.singleEvent(\"Eat\", item, null, source, null, null)) {\n          this.runEvent(\"EatItem\", source, null, null, item);\n          if (item.id === \"leppaberry\") target.staleness = \"external\";\n        }\n        if (item.onEat) source.ateBerry = true;\n      }\n    }",
    "secondary": null,
    "target": "any",
    "type": "Flying",
    "contestType": "Cute"
  },
  "poisonfang": {
    "id": "poisonfang",
    "num": 305,
    "accuracy": 100,
    "basePower": 50,
    "category": "Physical",
    "name": "Poison Fang",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "bite": 1
    },
    "secondary": {
      "chance": 50,
      "status": "tox"
    },
    "target": "normal",
    "type": "Poison",
    "contestType": "Clever"
  },
  "poisongas": {
    "id": "poisongas",
    "inherit": true,
    "ignoreImmunity": false
  },
  "poisonjab": {
    "id": "poisonjab",
    "num": 398,
    "accuracy": 100,
    "basePower": 80,
    "category": "Physical",
    "name": "Poison Jab",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 30,
      "status": "psn"
    },
    "target": "normal",
    "type": "Poison",
    "contestType": "Tough"
  },
  "poisonpowder": {
    "id": "poisonpowder",
    "inherit": true,
    "ignoreImmunity": false
  },
  "poisonsting": {
    "id": "poisonsting",
    "num": 40,
    "accuracy": 100,
    "basePower": 15,
    "category": "Physical",
    "name": "Poison Sting",
    "pp": 35,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 30,
      "status": "psn"
    },
    "target": "normal",
    "type": "Poison",
    "contestType": "Clever"
  },
  "poisontail": {
    "id": "poisontail",
    "num": 342,
    "accuracy": 100,
    "basePower": 50,
    "category": "Physical",
    "name": "Poison Tail",
    "pp": 25,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "critRatio": 2,
    "secondary": {
      "chance": 10,
      "status": "psn"
    },
    "target": "normal",
    "type": "Poison",
    "contestType": "Clever"
  },
  "pollenpuff": {
    "id": "pollenpuff",
    "num": 676,
    "accuracy": 100,
    "basePower": 90,
    "category": "Special",
    "name": "Pollen Puff",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "allyanim": 1,
      "metronome": 1,
      "bullet": 1
    },
    "onTryHit": "onTryHit(target, source, move) {\n      if (source.isAlly(target)) {\n        move.basePower = 0;\n        move.infiltrates = true;\n      }\n    }",
    "onTryMove": "onTryMove(source, target, move) {\n      if (source.isAlly(target) && source.volatiles[\"healblock\"]) {\n        this.attrLastMove(\"[still]\");\n        this.add(\"cant\", source, \"move: Heal Block\", move);\n        return false;\n      }\n    }",
    "onHit": "onHit(target, source, move) {\n      if (source.isAlly(target)) {\n        if (!this.heal(Math.floor(target.baseMaxhp * 0.5))) {\n          return this.NOT_FAIL;\n        }\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Bug",
    "contestType": "Cute"
  },
  "poltergeist": {
    "id": "poltergeist",
    "num": 809,
    "accuracy": 90,
    "basePower": 110,
    "category": "Physical",
    "name": "Poltergeist",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onTry": "onTry(source, target) {\n      return !!target.item;\n    }",
    "onTryHit": "onTryHit(target, source, move) {\n      this.add(\"-activate\", target, \"move: Poltergeist\", this.dex.items.get(target.item).name);\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Ghost"
  },
  "populationbomb": {
    "id": "populationbomb",
    "num": 860,
    "accuracy": 90,
    "basePower": 20,
    "category": "Physical",
    "name": "Population Bomb",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "slicing": 1
    },
    "multihit": 10,
    "multiaccuracy": true,
    "secondary": null,
    "target": "normal",
    "type": "Normal"
  },
  "pounce": {
    "id": "pounce",
    "num": 884,
    "accuracy": 100,
    "basePower": 50,
    "category": "Physical",
    "name": "Pounce",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1
    },
    "secondary": {
      "chance": 100,
      "boosts": {
        "spe": -1
      }
    },
    "target": "normal",
    "type": "Bug",
    "contestType": "Cute"
  },
  "pound": {
    "id": "pound",
    "num": 1,
    "accuracy": 100,
    "basePower": 40,
    "category": "Physical",
    "name": "Pound",
    "pp": 35,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Tough"
  },
  "powder": {
    "id": "powder",
    "num": 600,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Powder",
    "pp": 20,
    "priority": 1,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "bypasssub": 1,
      "metronome": 1,
      "powder": 1
    },
    "volatileStatus": "powder",
    "condition": {
      "duration": 1,
      "onStart": "onStart(target) {\n        this.add(\"-singleturn\", target, \"Powder\");\n      }",
      "onTryMovePriority": -1,
      "onTryMove": "onTryMove(pokemon, target, move) {\n        if (move.type === \"Fire\") {\n          this.add(\"-activate\", pokemon, \"move: Powder\");\n          this.damage(this.clampIntRange(Math.round(pokemon.maxhp / 4), 1));\n          this.attrLastMove(\"[still]\");\n          return false;\n        }\n      }"
    },
    "secondary": null,
    "target": "normal",
    "type": "Bug",
    "zMove": {
      "boost": {
        "spd": 2
      }
    },
    "contestType": "Clever"
  },
  "powdersnow": {
    "id": "powdersnow",
    "num": 181,
    "accuracy": 100,
    "basePower": 40,
    "category": "Special",
    "name": "Powder Snow",
    "pp": 25,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 10,
      "status": "frz"
    },
    "target": "allAdjacentFoes",
    "type": "Ice",
    "contestType": "Beautiful"
  },
  "powergem": {
    "id": "powergem",
    "num": 408,
    "accuracy": 100,
    "basePower": 80,
    "category": "Special",
    "name": "Power Gem",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Rock",
    "contestType": "Beautiful"
  },
  "powershift": {
    "id": "powershift",
    "num": 829,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Unobtainable",
    "name": "Power Shift",
    "pp": 10,
    "priority": 0,
    "flags": {
      "snatch": 1
    },
    "volatileStatus": "powershift",
    "condition": {
      "onStart": "onStart(pokemon) {\n        this.add(\"-start\", pokemon, \"Power Shift\");\n        const newatk = pokemon.storedStats.def;\n        const newdef = pokemon.storedStats.atk;\n        pokemon.storedStats.atk = newatk;\n        pokemon.storedStats.def = newdef;\n      }",
      "onCopy": "onCopy(pokemon) {\n        const newatk = pokemon.storedStats.def;\n        const newdef = pokemon.storedStats.atk;\n        pokemon.storedStats.atk = newatk;\n        pokemon.storedStats.def = newdef;\n      }",
      "onEnd": "onEnd(pokemon) {\n        this.add(\"-end\", pokemon, \"Power Shift\");\n        const newatk = pokemon.storedStats.def;\n        const newdef = pokemon.storedStats.atk;\n        pokemon.storedStats.atk = newatk;\n        pokemon.storedStats.def = newdef;\n      }",
      "onRestart": "onRestart(pokemon) {\n        pokemon.removeVolatile(\"Power Shift\");\n      }"
    },
    "secondary": null,
    "target": "self",
    "type": "Normal"
  },
  "powersplit": {
    "id": "powersplit",
    "num": 471,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Power Split",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "allyanim": 1,
      "metronome": 1
    },
    "onHit": "onHit(target, source) {\n      const newatk = Math.floor((target.storedStats.atk + source.storedStats.atk) / 2);\n      target.storedStats.atk = newatk;\n      source.storedStats.atk = newatk;\n      const newspa = Math.floor((target.storedStats.spa + source.storedStats.spa) / 2);\n      target.storedStats.spa = newspa;\n      source.storedStats.spa = newspa;\n      this.add(\"-activate\", source, \"move: Power Split\", `[of] ${target}`);\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Psychic",
    "zMove": {
      "boost": {
        "spe": 1
      }
    },
    "contestType": "Clever"
  },
  "powerswap": {
    "id": "powerswap",
    "num": 384,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Power Swap",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "bypasssub": 1,
      "allyanim": 1,
      "metronome": 1
    },
    "onHit": "onHit(target, source) {\n      const targetBoosts = {};\n      const sourceBoosts = {};\n      const atkSpa = [\"atk\", \"spa\"];\n      for (const stat of atkSpa) {\n        targetBoosts[stat] = target.boosts[stat];\n        sourceBoosts[stat] = source.boosts[stat];\n      }\n      source.setBoost(targetBoosts);\n      target.setBoost(sourceBoosts);\n      this.add(\"-swapboost\", source, target, \"atk, spa\", \"[from] move: Power Swap\");\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Psychic",
    "zMove": {
      "boost": {
        "spe": 1
      }
    },
    "contestType": "Clever"
  },
  "powertrick": {
    "id": "powertrick",
    "num": 379,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Power Trick",
    "pp": 10,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "volatileStatus": "powertrick",
    "condition": {
      "onStart": "onStart(pokemon) {\n        this.add(\"-start\", pokemon, \"Power Trick\");\n        const newatk = pokemon.storedStats.def;\n        const newdef = pokemon.storedStats.atk;\n        pokemon.storedStats.atk = newatk;\n        pokemon.storedStats.def = newdef;\n      }",
      "onCopy": "onCopy(pokemon) {\n        const newatk = pokemon.storedStats.def;\n        const newdef = pokemon.storedStats.atk;\n        pokemon.storedStats.atk = newatk;\n        pokemon.storedStats.def = newdef;\n      }",
      "onEnd": "onEnd(pokemon) {\n        this.add(\"-end\", pokemon, \"Power Trick\");\n        const newatk = pokemon.storedStats.def;\n        const newdef = pokemon.storedStats.atk;\n        pokemon.storedStats.atk = newatk;\n        pokemon.storedStats.def = newdef;\n      }",
      "onRestart": "onRestart(pokemon) {\n        pokemon.removeVolatile(\"Power Trick\");\n      }"
    },
    "secondary": null,
    "target": "self",
    "type": "Psychic",
    "zMove": {
      "boost": {
        "atk": 1
      }
    },
    "contestType": "Clever"
  },
  "powertrip": {
    "id": "powertrip",
    "num": 681,
    "accuracy": 100,
    "basePower": 20,
    "basePowerCallback": "basePowerCallback(pokemon, target, move) {\n      const bp = move.basePower + 20 * pokemon.positiveBoosts();\n      this.debug(`BP: ${bp}`);\n      return bp;\n    }",
    "category": "Physical",
    "name": "Power Trip",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Dark",
    "zMove": {
      "basePower": 160
    },
    "maxMove": {
      "basePower": 130
    },
    "contestType": "Clever"
  },
  "poweruppunch": {
    "id": "poweruppunch",
    "num": 612,
    "accuracy": 100,
    "basePower": 40,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Power-Up Punch",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "punch": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 100,
      "self": {
        "boosts": {
          "atk": 1
        }
      }
    },
    "target": "normal",
    "type": "Fighting",
    "contestType": "Tough"
  },
  "powerwhip": {
    "id": "powerwhip",
    "num": 438,
    "accuracy": 85,
    "basePower": 120,
    "category": "Physical",
    "name": "Power Whip",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Grass",
    "contestType": "Tough"
  },
  "precipiceblades": {
    "id": "precipiceblades",
    "num": 619,
    "accuracy": 85,
    "basePower": 120,
    "category": "Physical",
    "name": "Precipice Blades",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "nonsky": 1
    },
    "target": "allAdjacentFoes",
    "type": "Ground",
    "contestType": "Cool"
  },
  "present": {
    "id": "present",
    "num": 217,
    "accuracy": 90,
    "basePower": 0,
    "category": "Physical",
    "name": "Present",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onModifyMove": "onModifyMove(move, pokemon, target) {\n      const rand = this.random(10);\n      if (rand < 2) {\n        move.heal = [1, 4];\n        move.infiltrates = true;\n      } else if (rand < 6) {\n        move.basePower = 40;\n      } else if (rand < 9) {\n        move.basePower = 80;\n      } else {\n        move.basePower = 120;\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Cute"
  },
  "prismaticlaser": {
    "id": "prismaticlaser",
    "num": 711,
    "accuracy": 100,
    "basePower": 160,
    "category": "Special",
    "name": "Prismatic Laser",
    "pp": 10,
    "priority": 0,
    "flags": {
      "recharge": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "self": {
      "volatileStatus": "mustrecharge"
    },
    "secondary": null,
    "target": "normal",
    "type": "Psychic",
    "contestType": "Cool"
  },
  "protect": {
    "id": "protect",
    "inherit": true,
    "priority": 2
  },
  "psybeam": {
    "id": "psybeam",
    "num": 60,
    "accuracy": 100,
    "basePower": 65,
    "category": "Special",
    "name": "Psybeam",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 10,
      "volatileStatus": "confusion"
    },
    "target": "normal",
    "type": "Psychic",
    "contestType": "Beautiful"
  },
  "psyblade": {
    "id": "psyblade",
    "num": 875,
    "accuracy": 100,
    "basePower": 80,
    "category": "Physical",
    "name": "Psyblade",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "slicing": 1
    },
    "secondary": null,
    "onBasePower": "onBasePower(basePower, source) {\n      if (this.field.isTerrain(\"electricterrain\")) {\n        this.debug(\"psyblade electric terrain boost\");\n        return this.chainModify(1.5);\n      }\n    }",
    "target": "normal",
    "type": "Psychic"
  },
  "psychup": {
    "id": "psychup",
    "num": 244,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Psych Up",
    "pp": 10,
    "priority": 0,
    "flags": {
      "bypasssub": 1,
      "allyanim": 1,
      "metronome": 1
    },
    "onHit": "onHit(target, source) {\n      let i;\n      for (i in target.boosts) {\n        source.boosts[i] = target.boosts[i];\n      }\n      const volatilesToCopy = [\"dragoncheer\", \"focusenergy\", \"gmaxchistrike\", \"laserfocus\"];\n      for (const volatile of volatilesToCopy) source.removeVolatile(volatile);\n      for (const volatile of volatilesToCopy) {\n        if (target.volatiles[volatile]) {\n          source.addVolatile(volatile);\n          if (volatile === \"gmaxchistrike\") source.volatiles[volatile].layers = target.volatiles[volatile].layers;\n          if (volatile === \"dragoncheer\") source.volatiles[volatile].hasDragonType = target.volatiles[volatile].hasDragonType;\n        }\n      }\n      this.add(\"-copyboost\", source, target, \"[from] move: Psych Up\");\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "zMove": {
      "effect": "heal"
    },
    "contestType": "Clever"
  },
  "psychic": {
    "id": "psychic",
    "num": 94,
    "accuracy": 100,
    "basePower": 90,
    "category": "Special",
    "name": "Psychic",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 10,
      "boosts": {
        "spd": -1
      }
    },
    "target": "normal",
    "type": "Psychic",
    "contestType": "Clever"
  },
  "psychicfangs": {
    "id": "psychicfangs",
    "num": 706,
    "accuracy": 100,
    "basePower": 85,
    "category": "Physical",
    "name": "Psychic Fangs",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "bite": 1
    },
    "onTryHit": "onTryHit(pokemon) {\n      pokemon.side.removeSideCondition(\"reflect\");\n      pokemon.side.removeSideCondition(\"lightscreen\");\n      pokemon.side.removeSideCondition(\"auroraveil\");\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Psychic",
    "contestType": "Clever"
  },
  "psychicnoise": {
    "id": "psychicnoise",
    "num": 917,
    "accuracy": 100,
    "basePower": 75,
    "category": "Special",
    "name": "Psychic Noise",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "sound": 1,
      "bypasssub": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 100,
      "volatileStatus": "healblock"
    },
    "target": "normal",
    "type": "Psychic"
  },
  "psychicterrain": {
    "id": "psychicterrain",
    "num": 678,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Psychic Terrain",
    "pp": 10,
    "priority": 0,
    "flags": {
      "nonsky": 1,
      "metronome": 1
    },
    "terrain": "psychicterrain",
    "condition": {
      "effectType": "Terrain",
      "duration": 5,
      "durationCallback": "durationCallback(source, effect) {\n        if (source?.hasItem(\"terrainextender\")) {\n          return 8;\n        }\n        return 5;\n      }",
      "onTryHitPriority": 4,
      "onTryHit": "onTryHit(target, source, effect) {\n        if (effect && (effect.priority <= 0.1 || effect.target === \"self\")) {\n          return;\n        }\n        if (target.isSemiInvulnerable() || target.isAlly(source)) return;\n        if (!target.isGrounded()) {\n          const baseMove = this.dex.moves.get(effect.id);\n          if (baseMove.priority > 0) {\n            this.hint(\"Psychic Terrain doesn't affect Pok\\xE9mon immune to Ground.\");\n          }\n          return;\n        }\n        this.add(\"-activate\", target, \"move: Psychic Terrain\");\n        return null;\n      }",
      "onBasePowerPriority": 6,
      "onBasePower": "onBasePower(basePower, attacker, defender, move) {\n        if (move.type === \"Psychic\" && attacker.isGrounded() && !attacker.isSemiInvulnerable()) {\n          this.debug(\"psychic terrain boost\");\n          return this.chainModify([5325, 4096]);\n        }\n      }",
      "onFieldStart": "onFieldStart(field, source, effect) {\n        if (effect?.effectType === \"Ability\") {\n          this.add(\"-fieldstart\", \"move: Psychic Terrain\", \"[from] ability: \" + effect.name, `[of] ${source}`);\n        } else {\n          this.add(\"-fieldstart\", \"move: Psychic Terrain\");\n        }\n      }",
      "onFieldResidualOrder": 27,
      "onFieldResidualSubOrder": 7,
      "onFieldEnd": "onFieldEnd() {\n        this.add(\"-fieldend\", \"move: Psychic Terrain\");\n      }"
    },
    "secondary": null,
    "target": "all",
    "type": "Psychic",
    "zMove": {
      "boost": {
        "spa": 1
      }
    },
    "contestType": "Clever"
  },
  "psychoboost": {
    "id": "psychoboost",
    "num": 354,
    "accuracy": 90,
    "basePower": 140,
    "category": "Special",
    "name": "Psycho Boost",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "self": {
      "boosts": {
        "spa": -2
      }
    },
    "secondary": null,
    "target": "normal",
    "type": "Psychic",
    "contestType": "Clever"
  },
  "psychocut": {
    "id": "psychocut",
    "num": 427,
    "accuracy": 100,
    "basePower": 70,
    "category": "Physical",
    "name": "Psycho Cut",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "slicing": 1
    },
    "critRatio": 2,
    "secondary": null,
    "target": "normal",
    "type": "Psychic",
    "contestType": "Cool"
  },
  "psychoshift": {
    "id": "psychoshift",
    "num": 375,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Psycho Shift",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onTryHit": "onTryHit(target, source, move) {\n      if (!source.status) return false;\n      move.status = source.status;\n    }",
    "self": {
      "onHit": "onHit(pokemon) {\n        pokemon.cureStatus();\n      }"
    },
    "secondary": null,
    "target": "normal",
    "type": "Psychic",
    "zMove": {
      "boost": {
        "spa": 2
      }
    },
    "contestType": "Clever"
  },
  "psyshieldbash": {
    "id": "psyshieldbash",
    "num": 828,
    "accuracy": 90,
    "basePower": 70,
    "category": "Physical",
    "name": "Psyshield Bash",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 100,
      "self": {
        "boosts": {
          "def": 1
        }
      }
    },
    "target": "normal",
    "type": "Psychic"
  },
  "psyshock": {
    "id": "psyshock",
    "num": 473,
    "accuracy": 100,
    "basePower": 80,
    "category": "Special",
    "overrideDefensiveStat": "def",
    "name": "Psyshock",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Psychic",
    "contestType": "Beautiful"
  },
  "psystrike": {
    "id": "psystrike",
    "num": 540,
    "accuracy": 100,
    "basePower": 100,
    "category": "Special",
    "overrideDefensiveStat": "def",
    "name": "Psystrike",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Psychic",
    "contestType": "Cool"
  },
  "psywave": {
    "id": "psywave",
    "inherit": true,
    "damageCallback": "damageCallback(pokemon) {\n      return this.random(1, pokemon.level + Math.floor(pokemon.level / 2));\n    }"
  },
  "pulverizingpancake": {
    "id": "pulverizingpancake",
    "num": 701,
    "accuracy": true,
    "basePower": 210,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Pulverizing Pancake",
    "pp": 1,
    "priority": 0,
    "flags": {
      "contact": 1
    },
    "isZ": "snorliumz",
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Cool"
  },
  "punishment": {
    "id": "punishment",
    "num": 386,
    "accuracy": 100,
    "basePower": 0,
    "basePowerCallback": "basePowerCallback(pokemon, target) {\n      let power = 60 + 20 * target.positiveBoosts();\n      if (power > 200) power = 200;\n      this.debug(`BP: ${power}`);\n      return power;\n    }",
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Punishment",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Dark",
    "zMove": {
      "basePower": 160
    },
    "maxMove": {
      "basePower": 130
    },
    "contestType": "Cool"
  },
  "purify": {
    "id": "purify",
    "num": 685,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Purify",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "heal": 1,
      "metronome": 1
    },
    "onHit": "onHit(target, source) {\n      if (!target.cureStatus()) {\n        this.add(\"-fail\", source);\n        this.attrLastMove(\"[still]\");\n        return this.NOT_FAIL;\n      }\n      this.heal(Math.ceil(source.maxhp * 0.5), source);\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Poison",
    "zMove": {
      "boost": {
        "atk": 1,
        "def": 1,
        "spa": 1,
        "spd": 1,
        "spe": 1
      }
    },
    "contestType": "Beautiful"
  },
  "pursuit": {
    "id": "pursuit",
    "inherit": true,
    "onModifyMove": "onModifyMove() {\n    }",
    "condition": {
      "duration": 1,
      "onBeforeSwitchOut": "onBeforeSwitchOut(pokemon) {\n        this.debug(\"Pursuit start\");\n        let alreadyAdded = false;\n        for (const source of this.effectState.sources) {\n          if (source.speed < pokemon.speed || source.speed === pokemon.speed && this.randomChance(1, 2)) {\n            pokemon.removeVolatile(\"destinybond\");\n          }\n          if (!this.queue.cancelMove(source) || !source.hp) continue;\n          if (!alreadyAdded) {\n            this.add(\"-activate\", pokemon, \"move: Pursuit\");\n            alreadyAdded = true;\n          }\n          if (source.canMegaEvo || source.canUltraBurst) {\n            for (const [actionIndex, action] of this.queue.entries()) {\n              if (action.pokemon === source && action.choice === \"megaEvo\") {\n                this.actions.runMegaEvo(source);\n                this.queue.list.splice(actionIndex, 1);\n                break;\n              }\n            }\n          }\n          this.actions.runMove(\"pursuit\", source, source.getLocOf(pokemon));\n        }\n      }"
    }
  },
  "pyroball": {
    "id": "pyroball",
    "num": 780,
    "accuracy": 90,
    "basePower": 120,
    "category": "Physical",
    "name": "Pyro Ball",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "defrost": 1,
      "bullet": 1
    },
    "secondary": {
      "chance": 10,
      "status": "brn"
    },
    "target": "normal",
    "type": "Fire"
  },
  "quash": {
    "id": "quash",
    "num": 511,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Quash",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "onHit": "onHit(target) {\n      if (this.activePerHalf === 1) return false;\n      const action = this.queue.willMove(target);\n      if (!action) return false;\n      action.order = 201;\n      this.add(\"-activate\", target, \"move: Quash\");\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Dark",
    "zMove": {
      "boost": {
        "spe": 1
      }
    },
    "contestType": "Clever"
  },
  "quickattack": {
    "id": "quickattack",
    "num": 98,
    "accuracy": 100,
    "basePower": 40,
    "category": "Physical",
    "name": "Quick Attack",
    "pp": 30,
    "priority": 1,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Cool"
  },
  "quickguard": {
    "id": "quickguard",
    "num": 501,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Quick Guard",
    "pp": 15,
    "priority": 3,
    "flags": {
      "snatch": 1
    },
    "sideCondition": "quickguard",
    "onTry": "onTry() {\n      return !!this.queue.willAct();\n    }",
    "onHitSide": "onHitSide(side, source) {\n      source.addVolatile(\"stall\");\n    }",
    "condition": {
      "duration": 1,
      "onSideStart": "onSideStart(target, source) {\n        this.add(\"-singleturn\", source, \"Quick Guard\");\n      }",
      "onTryHitPriority": 4,
      "onTryHit": "onTryHit(target, source, move) {\n        if (move.priority <= 0.1) return;\n        if (!move.flags[\"protect\"]) {\n          if ([\"gmaxoneblow\", \"gmaxrapidflow\"].includes(move.id)) return;\n          if (move.isZ || move.isMax) target.getMoveHitData(move).zBrokeProtect = true;\n          return;\n        }\n        this.add(\"-activate\", target, \"move: Quick Guard\");\n        const lockedmove = source.getVolatile(\"lockedmove\");\n        if (lockedmove) {\n          if (source.volatiles[\"lockedmove\"].duration === 2) {\n            delete source.volatiles[\"lockedmove\"];\n          }\n        }\n        return this.NOT_FAIL;\n      }"
    },
    "secondary": null,
    "target": "allySide",
    "type": "Fighting",
    "zMove": {
      "boost": {
        "def": 1
      }
    },
    "contestType": "Cool"
  },
  "quiverdance": {
    "id": "quiverdance",
    "num": 483,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Quiver Dance",
    "pp": 20,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "dance": 1,
      "metronome": 1
    },
    "boosts": {
      "spa": 1,
      "spd": 1,
      "spe": 1
    },
    "secondary": null,
    "target": "self",
    "type": "Bug",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Beautiful"
  },
  "rage": {
    "id": "rage",
    "num": 99,
    "accuracy": 100,
    "basePower": 20,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Rage",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "self": {
      "volatileStatus": "rage"
    },
    "condition": {
      "onStart": "onStart(pokemon) {\n        this.add(\"-singlemove\", pokemon, \"Rage\");\n      }",
      "onHit": "onHit(target, source, move) {\n        if (target !== source && move.category !== \"Status\") {\n          this.boost({ atk: 1 });\n        }\n      }",
      "onBeforeMovePriority": 100,
      "onBeforeMove": "onBeforeMove(pokemon) {\n        this.debug(\"removing Rage before attack\");\n        pokemon.removeVolatile(\"rage\");\n      }"
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Tough"
  },
  "ragefist": {
    "id": "ragefist",
    "num": 889,
    "accuracy": 100,
    "basePower": 50,
    "basePowerCallback": "basePowerCallback(pokemon) {\n      return Math.min(350, 50 + 50 * pokemon.timesAttacked);\n    }",
    "category": "Physical",
    "name": "Rage Fist",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "punch": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Ghost"
  },
  "ragepowder": {
    "id": "ragepowder",
    "num": 476,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Rage Powder",
    "pp": 20,
    "priority": 2,
    "flags": {
      "noassist": 1,
      "failcopycat": 1,
      "powder": 1
    },
    "volatileStatus": "ragepowder",
    "onTry": "onTry(source) {\n      return this.activePerHalf > 1;\n    }",
    "condition": {
      "duration": 1,
      "onStart": "onStart(pokemon) {\n        this.add(\"-singleturn\", pokemon, \"move: Rage Powder\");\n      }",
      "onFoeRedirectTargetPriority": 1,
      "onFoeRedirectTarget": "onFoeRedirectTarget(target, source, source2, move) {\n        const ragePowderUser = this.effectState.target;\n        if (ragePowderUser.isSkyDropped()) return;\n        if (source.runStatusImmunity(\"powder\") && this.validTarget(ragePowderUser, source, move.target)) {\n          if (move.smartTarget) move.smartTarget = false;\n          this.debug(\"Rage Powder redirected target of move\");\n          return ragePowderUser;\n        }\n      }"
    },
    "secondary": null,
    "target": "self",
    "type": "Bug",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Clever"
  },
  "ragingbull": {
    "id": "ragingbull",
    "num": 873,
    "accuracy": 100,
    "basePower": 90,
    "category": "Physical",
    "name": "Raging Bull",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1
    },
    "onTryHit": "onTryHit(pokemon) {\n      pokemon.side.removeSideCondition(\"reflect\");\n      pokemon.side.removeSideCondition(\"lightscreen\");\n      pokemon.side.removeSideCondition(\"auroraveil\");\n    }",
    "onModifyType": "onModifyType(move, pokemon) {\n      switch (pokemon.species.name) {\n        case \"Tauros-Paldea-Combat\":\n          move.type = \"Fighting\";\n          break;\n        case \"Tauros-Paldea-Blaze\":\n          move.type = \"Fire\";\n          break;\n        case \"Tauros-Paldea-Aqua\":\n          move.type = \"Water\";\n          break;\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Normal"
  },
  "ragingfury": {
    "id": "ragingfury",
    "num": 833,
    "accuracy": 100,
    "basePower": 120,
    "category": "Physical",
    "name": "Raging Fury",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "self": {
      "volatileStatus": "lockedmove"
    },
    "onAfterMove": "onAfterMove(pokemon) {\n      if (pokemon.volatiles[\"lockedmove\"]?.duration === 1) {\n        pokemon.removeVolatile(\"lockedmove\");\n      }\n    }",
    "secondary": null,
    "target": "randomNormal",
    "type": "Fire"
  },
  "raindance": {
    "id": "raindance",
    "num": 240,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Rain Dance",
    "pp": 5,
    "priority": 0,
    "flags": {
      "metronome": 1
    },
    "weather": "RainDance",
    "secondary": null,
    "target": "all",
    "type": "Water",
    "zMove": {
      "boost": {
        "spe": 1
      }
    },
    "contestType": "Beautiful"
  },
  "rapidspin": {
    "id": "rapidspin",
    "num": 229,
    "accuracy": 100,
    "basePower": 50,
    "category": "Physical",
    "name": "Rapid Spin",
    "pp": 40,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onAfterHit": "onAfterHit(target, pokemon, move) {\n      if (!move.hasSheerForce) {\n        if (pokemon.hp && pokemon.removeVolatile(\"leechseed\")) {\n          this.add(\"-end\", pokemon, \"Leech Seed\", \"[from] move: Rapid Spin\", `[of] ${pokemon}`);\n        }\n        const sideConditions = [\"spikes\", \"toxicspikes\", \"stealthrock\", \"stickyweb\", \"gmaxsteelsurge\"];\n        for (const condition of sideConditions) {\n          if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {\n            this.add(\"-sideend\", pokemon.side, this.dex.conditions.get(condition).name, \"[from] move: Rapid Spin\", `[of] ${pokemon}`);\n          }\n        }\n        if (pokemon.hp && pokemon.volatiles[\"partiallytrapped\"]) {\n          pokemon.removeVolatile(\"partiallytrapped\");\n        }\n      }\n    }",
    "onAfterSubDamage": "onAfterSubDamage(damage, target, pokemon, move) {\n      if (!move.hasSheerForce) {\n        if (pokemon.hp && pokemon.removeVolatile(\"leechseed\")) {\n          this.add(\"-end\", pokemon, \"Leech Seed\", \"[from] move: Rapid Spin\", `[of] ${pokemon}`);\n        }\n        const sideConditions = [\"spikes\", \"toxicspikes\", \"stealthrock\", \"stickyweb\", \"gmaxsteelsurge\"];\n        for (const condition of sideConditions) {\n          if (pokemon.hp && pokemon.side.removeSideCondition(condition)) {\n            this.add(\"-sideend\", pokemon.side, this.dex.conditions.get(condition).name, \"[from] move: Rapid Spin\", `[of] ${pokemon}`);\n          }\n        }\n        if (pokemon.hp && pokemon.volatiles[\"partiallytrapped\"]) {\n          pokemon.removeVolatile(\"partiallytrapped\");\n        }\n      }\n    }",
    "secondary": {
      "chance": 100,
      "self": {
        "boosts": {
          "spe": 1
        }
      }
    },
    "target": "normal",
    "type": "Normal",
    "contestType": "Cool"
  },
  "razorleaf": {
    "id": "razorleaf",
    "inherit": true,
    "critRatio": 3
  },
  "razorshell": {
    "id": "razorshell",
    "num": 534,
    "accuracy": 95,
    "basePower": 75,
    "category": "Physical",
    "name": "Razor Shell",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "slicing": 1
    },
    "secondary": {
      "chance": 50,
      "boosts": {
        "def": -1
      }
    },
    "target": "normal",
    "type": "Water",
    "contestType": "Cool"
  },
  "razorwind": {
    "id": "razorwind",
    "inherit": true,
    "accuracy": 75,
    "critRatio": 3,
    "onPrepareHit": "onPrepareHit(target, source) {\n      return source.status !== \"slp\";\n    }"
  },
  "recover": {
    "id": "recover",
    "inherit": true,
    "pp": 20
  },
  "recycle": {
    "id": "recycle",
    "num": 278,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Recycle",
    "pp": 10,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "onHit": "onHit(pokemon) {\n      if (pokemon.item || !pokemon.lastItem) return false;\n      const item = pokemon.lastItem;\n      pokemon.lastItem = \"\";\n      this.add(\"-item\", pokemon, this.dex.items.get(item), \"[from] move: Recycle\");\n      pokemon.setItem(item);\n    }",
    "secondary": null,
    "target": "self",
    "type": "Normal",
    "zMove": {
      "boost": {
        "spe": 2
      }
    },
    "contestType": "Clever"
  },
  "reflect": {
    "id": "reflect",
    "inherit": true,
    "condition": {
      "duration": 5,
      "onSideStart": "onSideStart(side) {\n        this.add(\"-sidestart\", side, \"Reflect\");\n      }",
      "onSideResidualOrder": 9,
      "onSideEnd": "onSideEnd(side) {\n        this.add(\"-sideend\", side, \"Reflect\");\n      }"
    }
  },
  "reflecttype": {
    "id": "reflecttype",
    "num": 513,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Reflect Type",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "bypasssub": 1,
      "allyanim": 1,
      "metronome": 1
    },
    "onHit": "onHit(target, source) {\n      if (source.species && (source.species.num === 493 || source.species.num === 773)) return false;\n      if (source.terastallized) return false;\n      const oldApparentType = source.apparentType;\n      let newBaseTypes = target.getTypes(true).filter((type) => type !== \"???\");\n      if (!newBaseTypes.length) {\n        if (target.addedType) {\n          newBaseTypes = [\"Normal\"];\n        } else {\n          return false;\n        }\n      }\n      this.add(\"-start\", source, \"typechange\", \"[from] move: Reflect Type\", `[of] ${target}`);\n      source.setType(newBaseTypes);\n      source.addedType = target.addedType;\n      source.knownType = target.isAlly(source) && target.knownType;\n      if (!source.knownType) source.apparentType = oldApparentType;\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "zMove": {
      "boost": {
        "spa": 1
      }
    },
    "contestType": "Clever"
  },
  "refresh": {
    "id": "refresh",
    "num": 287,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Refresh",
    "pp": 20,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "onHit": "onHit(pokemon) {\n      if ([\"\", \"slp\", \"frz\"].includes(pokemon.status)) return false;\n      pokemon.cureStatus();\n    }",
    "secondary": null,
    "target": "self",
    "type": "Normal",
    "zMove": {
      "effect": "heal"
    },
    "contestType": "Cute"
  },
  "relicsong": {
    "id": "relicsong",
    "num": 547,
    "accuracy": 100,
    "basePower": 75,
    "category": "Special",
    "name": "Relic Song",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "sound": 1,
      "bypasssub": 1
    },
    "secondary": {
      "chance": 10,
      "status": "slp"
    },
    "onHit": "onHit(target, pokemon, move) {\n      if (pokemon.baseSpecies.baseSpecies === \"Meloetta\" && !pokemon.transformed) {\n        move.willChangeForme = true;\n      }\n    }",
    "onAfterMoveSecondarySelf": "onAfterMoveSecondarySelf(pokemon, target, move) {\n      if (move.willChangeForme) {\n        const meloettaForme = pokemon.species.id === \"meloettapirouette\" ? \"\" : \"-Pirouette\";\n        pokemon.formeChange(\"Meloetta\" + meloettaForme, this.effect, false, \"0\", \"[msg]\");\n      }\n    }",
    "target": "allAdjacentFoes",
    "type": "Normal",
    "contestType": "Beautiful"
  },
  "rest": {
    "id": "rest",
    "inherit": true,
    "onTry": "onTry(pokemon) {\n      if (pokemon.hp < pokemon.maxhp) return;\n      this.add(\"-fail\", pokemon);\n      return null;\n    }",
    "onHit": "onHit(target, source, move) {\n      if (target.status !== \"slp\") {\n        if (!target.setStatus(\"slp\", source, move)) return;\n      } else {\n        this.add(\"-status\", target, \"slp\", \"[from] move: Rest\");\n      }\n      target.statusState.time = 3;\n      target.statusState.startTime = 3;\n      target.statusState.source = target;\n      this.heal(target.maxhp);\n    }",
    "secondary": null
  },
  "retaliate": {
    "id": "retaliate",
    "num": 514,
    "accuracy": 100,
    "basePower": 70,
    "category": "Physical",
    "name": "Retaliate",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onBasePower": "onBasePower(basePower, pokemon) {\n      if (pokemon.side.faintedLastTurn) {\n        this.debug(\"Boosted for a faint last turn\");\n        return this.chainModify(2);\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Cool"
  },
  "return": {
    "id": "return",
    "inherit": true,
    "basePowerCallback": "basePowerCallback(pokemon) {\n      return Math.floor(pokemon.happiness * 10 / 25) || null;\n    }"
  },
  "revelationdance": {
    "id": "revelationdance",
    "num": 686,
    "accuracy": 100,
    "basePower": 90,
    "category": "Special",
    "name": "Revelation Dance",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "dance": 1,
      "metronome": 1
    },
    "onModifyType": "onModifyType(move, pokemon) {\n      const types = pokemon.getTypes();\n      let type = types[0];\n      if (type === \"Bird\") type = \"???\";\n      if (type === \"???\" && types[1]) type = types[1];\n      move.type = type;\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Beautiful"
  },
  "revenge": {
    "id": "revenge",
    "num": 279,
    "accuracy": 100,
    "basePower": 60,
    "basePowerCallback": "basePowerCallback(pokemon, target, move) {\n      const damagedByTarget = pokemon.attackedBy.some(\n        (p) => p.source === target && p.damage > 0 && p.thisTurn\n      );\n      if (damagedByTarget) {\n        this.debug(`BP doubled for getting hit by ${target}`);\n        return move.basePower * 2;\n      }\n      return move.basePower;\n    }",
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Revenge",
    "pp": 10,
    "priority": -4,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Fighting",
    "contestType": "Tough"
  },
  "reversal": {
    "id": "reversal",
    "inherit": true,
    "basePowerCallback": "basePowerCallback(pokemon) {\n      const ratio = Math.max(Math.floor(pokemon.hp * 48 / pokemon.maxhp), 1);\n      let bp;\n      if (ratio < 2) {\n        bp = 200;\n      } else if (ratio < 5) {\n        bp = 150;\n      } else if (ratio < 10) {\n        bp = 100;\n      } else if (ratio < 17) {\n        bp = 80;\n      } else if (ratio < 33) {\n        bp = 40;\n      } else {\n        bp = 20;\n      }\n      this.debug(`BP: ${bp}`);\n      return bp;\n    }"
  },
  "revivalblessing": {
    "id": "revivalblessing",
    "num": 863,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Revival Blessing",
    "pp": 1,
    "noPPBoosts": true,
    "priority": 0,
    "flags": {
      "heal": 1,
      "nosketch": 1
    },
    "onTryHit": "onTryHit(source) {\n      if (!source.side.pokemon.filter((ally) => ally.fainted).length) {\n        return false;\n      }\n    }",
    "slotCondition": "revivalblessing",
    "selfSwitch": true,
    "condition": {
      "duration": 1
    },
    "secondary": null,
    "target": "self",
    "type": "Normal"
  },
  "risingvoltage": {
    "id": "risingvoltage",
    "num": 804,
    "accuracy": 100,
    "basePower": 70,
    "basePowerCallback": "basePowerCallback(source, target, move) {\n      if (this.field.isTerrain(\"electricterrain\") && target.isGrounded()) {\n        if (!source.isAlly(target)) this.hint(`${move.name}'s BP doubled on grounded target.`);\n        return move.basePower * 2;\n      }\n      return move.basePower;\n    }",
    "category": "Special",
    "name": "Rising Voltage",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Electric",
    "maxMove": {
      "basePower": 140
    }
  },
  "roar": {
    "id": "roar",
    "inherit": true,
    "onTryHit": "onTryHit() {\n      for (const action of this.queue) {\n        if (action.choice === \"move\" || action.choice === \"switch\") return false;\n      }\n    }",
    "priority": -1
  },
  "roaroftime": {
    "id": "roaroftime",
    "num": 459,
    "accuracy": 90,
    "basePower": 150,
    "category": "Special",
    "name": "Roar of Time",
    "pp": 5,
    "priority": 0,
    "flags": {
      "recharge": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "self": {
      "volatileStatus": "mustrecharge"
    },
    "secondary": null,
    "target": "normal",
    "type": "Dragon",
    "contestType": "Beautiful"
  },
  "rockblast": {
    "id": "rockblast",
    "num": 350,
    "accuracy": 90,
    "basePower": 25,
    "category": "Physical",
    "name": "Rock Blast",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "bullet": 1
    },
    "multihit": [
      2,
      5
    ],
    "secondary": null,
    "target": "normal",
    "type": "Rock",
    "zMove": {
      "basePower": 140
    },
    "maxMove": {
      "basePower": 130
    },
    "contestType": "Tough"
  },
  "rockclimb": {
    "id": "rockclimb",
    "num": 431,
    "accuracy": 85,
    "basePower": 90,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Rock Climb",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 20,
      "volatileStatus": "confusion"
    },
    "target": "normal",
    "type": "Normal",
    "contestType": "Tough"
  },
  "rockpolish": {
    "id": "rockpolish",
    "num": 397,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Rock Polish",
    "pp": 20,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "boosts": {
      "spe": 2
    },
    "secondary": null,
    "target": "self",
    "type": "Rock",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Tough"
  },
  "rockslide": {
    "id": "rockslide",
    "num": 157,
    "accuracy": 90,
    "basePower": 75,
    "category": "Physical",
    "name": "Rock Slide",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 30,
      "volatileStatus": "flinch"
    },
    "target": "allAdjacentFoes",
    "type": "Rock",
    "contestType": "Tough"
  },
  "rocksmash": {
    "id": "rocksmash",
    "inherit": true,
    "basePower": 20
  },
  "rockthrow": {
    "id": "rockthrow",
    "num": 88,
    "accuracy": 90,
    "basePower": 50,
    "category": "Physical",
    "name": "Rock Throw",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Rock",
    "contestType": "Tough"
  },
  "rocktomb": {
    "id": "rocktomb",
    "num": 317,
    "accuracy": 95,
    "basePower": 60,
    "category": "Physical",
    "name": "Rock Tomb",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 100,
      "boosts": {
        "spe": -1
      }
    },
    "target": "normal",
    "type": "Rock",
    "contestType": "Clever"
  },
  "rockwrecker": {
    "id": "rockwrecker",
    "num": 439,
    "accuracy": 90,
    "basePower": 150,
    "category": "Physical",
    "name": "Rock Wrecker",
    "pp": 5,
    "priority": 0,
    "flags": {
      "recharge": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "bullet": 1
    },
    "self": {
      "volatileStatus": "mustrecharge"
    },
    "secondary": null,
    "target": "normal",
    "type": "Rock",
    "contestType": "Tough"
  },
  "roleplay": {
    "id": "roleplay",
    "num": 272,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Role Play",
    "pp": 10,
    "priority": 0,
    "flags": {
      "bypasssub": 1,
      "allyanim": 1,
      "metronome": 1
    },
    "onTryHit": "onTryHit(target, source) {\n      if (target.ability === source.ability) return false;\n      if (target.getAbility().flags[\"failroleplay\"] || source.getAbility().flags[\"cantsuppress\"]) return false;\n    }",
    "onHit": "onHit(target, source) {\n      const oldAbility = source.setAbility(target.ability);\n      if (oldAbility) {\n        this.add(\"-ability\", source, source.getAbility().name, \"[from] move: Role Play\", `[of] ${target}`);\n        return;\n      }\n      return oldAbility;\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Psychic",
    "zMove": {
      "boost": {
        "spe": 1
      }
    },
    "contestType": "Cute"
  },
  "rollingkick": {
    "id": "rollingkick",
    "num": 27,
    "accuracy": 85,
    "basePower": 60,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Rolling Kick",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 30,
      "volatileStatus": "flinch"
    },
    "target": "normal",
    "type": "Fighting",
    "contestType": "Cool"
  },
  "rollout": {
    "id": "rollout",
    "num": 205,
    "accuracy": 90,
    "basePower": 30,
    "basePowerCallback": "basePowerCallback(pokemon, target, move) {\n      let bp = move.basePower;\n      const rolloutData = pokemon.volatiles[\"rollout\"];\n      if (rolloutData?.hitCount) {\n        bp *= 2 ** rolloutData.contactHitCount;\n      }\n      if (rolloutData && pokemon.status !== \"slp\") {\n        rolloutData.hitCount++;\n        rolloutData.contactHitCount++;\n        if (rolloutData.hitCount < 5) {\n          rolloutData.duration = 2;\n        }\n      }\n      if (pokemon.volatiles[\"defensecurl\"]) {\n        bp *= 2;\n      }\n      this.debug(`BP: ${bp}`);\n      return bp;\n    }",
    "category": "Physical",
    "name": "Rollout",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "failinstruct": 1,
      "noparentalbond": 1
    },
    "onModifyMove": "onModifyMove(move, pokemon, target) {\n      if (pokemon.volatiles[\"rollout\"] || pokemon.status === \"slp\" || !target) return;\n      pokemon.addVolatile(\"rollout\");\n      if (move.sourceEffect) pokemon.lastMoveTargetLoc = pokemon.getLocOf(target);\n    }",
    "onAfterMove": "onAfterMove(source, target, move) {\n      const rolloutData = source.volatiles[\"rollout\"];\n      if (rolloutData && rolloutData.hitCount === 5 && rolloutData.contactHitCount < 5) {\n        source.addVolatile(\"rolloutstorage\");\n        source.volatiles[\"rolloutstorage\"].contactHitCount = rolloutData.contactHitCount;\n      }\n    }",
    "condition": {
      "duration": 1,
      "onLockMove": "rollout",
      "onStart": "onStart() {\n        this.effectState.hitCount = 0;\n        this.effectState.contactHitCount = 0;\n      }",
      "onResidual": "onResidual(target) {\n        if (target.lastMove && target.lastMove.id === \"struggle\") {\n          delete target.volatiles[\"rollout\"];\n        }\n      }"
    },
    "secondary": null,
    "target": "normal",
    "type": "Rock",
    "contestType": "Cute"
  },
  "roost": {
    "id": "roost",
    "num": 355,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Roost",
    "pp": 5,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "heal": 1,
      "metronome": 1
    },
    "heal": [
      1,
      2
    ],
    "self": {
      "volatileStatus": "roost"
    },
    "condition": {
      "duration": 1,
      "onResidualOrder": 25,
      "onStart": "onStart(target) {\n        if (target.terastallized) {\n          if (target.hasType(\"Flying\")) {\n            this.add(\"-hint\", \"If a Terastallized Pokemon uses Roost, it remains Flying-type.\");\n          }\n          return false;\n        }\n        this.add(\"-singleturn\", target, \"move: Roost\");\n      }",
      "onTypePriority": -1,
      "onType": "onType(types, pokemon) {\n        this.effectState.typeWas = types;\n        return types.filter((type) => type !== \"Flying\");\n      }"
    },
    "secondary": null,
    "target": "self",
    "type": "Flying",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Clever"
  },
  "rototiller": {
    "id": "rototiller",
    "num": 563,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Rototiller",
    "pp": 10,
    "priority": 0,
    "flags": {
      "distance": 1,
      "nonsky": 1,
      "metronome": 1
    },
    "onHitField": "onHitField(target, source) {\n      const targets = [];\n      let anyAirborne = false;\n      for (const pokemon of this.getAllActive()) {\n        if (!pokemon.runImmunity(\"Ground\")) {\n          this.add(\"-immune\", pokemon);\n          anyAirborne = true;\n          continue;\n        }\n        if (pokemon.hasType(\"Grass\")) {\n          targets.push(pokemon);\n        }\n      }\n      if (!targets.length && !anyAirborne) return false;\n      for (const pokemon of targets) {\n        this.boost({ atk: 1, spa: 1 }, pokemon, source);\n      }\n    }",
    "secondary": null,
    "target": "all",
    "type": "Ground",
    "zMove": {
      "boost": {
        "atk": 1
      }
    },
    "contestType": "Tough"
  },
  "round": {
    "id": "round",
    "num": 496,
    "accuracy": 100,
    "basePower": 60,
    "basePowerCallback": "basePowerCallback(target, source, move) {\n      if (move.sourceEffect === \"round\") {\n        this.debug(\"BP doubled\");\n        return move.basePower * 2;\n      }\n      return move.basePower;\n    }",
    "category": "Special",
    "name": "Round",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "sound": 1,
      "bypasssub": 1,
      "metronome": 1
    },
    "onTry": "onTry(source, target, move) {\n      for (const action of this.queue.list) {\n        if (!action.pokemon || !action.move || action.maxMove || action.zmove) continue;\n        if (action.move.id === \"round\") {\n          this.queue.prioritizeAction(action, move);\n          return;\n        }\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Beautiful"
  },
  "ruination": {
    "id": "ruination",
    "num": 877,
    "accuracy": 90,
    "basePower": 0,
    "damageCallback": "damageCallback(pokemon, target) {\n      return this.clampIntRange(Math.floor(target.getUndynamaxedHP() / 2), 1);\n    }",
    "category": "Special",
    "name": "Ruination",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Dark",
    "contestType": "Tough"
  },
  "sacredfire": {
    "id": "sacredfire",
    "num": 221,
    "accuracy": 95,
    "basePower": 100,
    "category": "Physical",
    "name": "Sacred Fire",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "defrost": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 50,
      "status": "brn"
    },
    "target": "normal",
    "type": "Fire",
    "contestType": "Beautiful"
  },
  "sacredsword": {
    "id": "sacredsword",
    "num": 533,
    "accuracy": 100,
    "basePower": 90,
    "category": "Physical",
    "name": "Sacred Sword",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "slicing": 1
    },
    "ignoreEvasion": true,
    "ignoreDefensive": true,
    "secondary": null,
    "target": "normal",
    "type": "Fighting",
    "contestType": "Cool"
  },
  "safeguard": {
    "id": "safeguard",
    "inherit": true,
    "condition": {
      "duration": 5,
      "durationCallback": "durationCallback(target, source, effect) {\n        if (source?.hasAbility(\"persistent\")) {\n          this.add(\"-activate\", source, \"ability: Persistent\", effect);\n          return 7;\n        }\n        return 5;\n      }",
      "onSetStatus": "onSetStatus(status, target, source, effect) {\n        if (!effect || !source) return;\n        if (effect.id === \"yawn\") return;\n        if (effect.effectType === \"Move\" && effect.infiltrates && !target.isAlly(source)) return;\n        if (target !== source) {\n          this.debug(\"interrupting setStatus\");\n          if (effect.id === \"synchronize\" || effect.effectType === \"Move\" && !effect.secondaries) {\n            this.add(\"-activate\", target, \"move: Safeguard\");\n          }\n          return null;\n        }\n      }",
      "onTryAddVolatile": "onTryAddVolatile(status, target, source, effect) {\n        if (!effect || !source) return;\n        if (effect.effectType === \"Move\" && effect.infiltrates && !target.isAlly(source)) return;\n        if ((status.id === \"confusion\" || status.id === \"yawn\") && target !== source) {\n          if (effect.effectType === \"Move\" && !effect.secondaries) this.add(\"-activate\", target, \"move: Safeguard\");\n          return null;\n        }\n      }",
      "onSideStart": "onSideStart(side) {\n        this.add(\"-sidestart\", side, \"Safeguard\");\n      }",
      "onSideResidualOrder": 8,
      "onSideEnd": "onSideEnd(side) {\n        this.add(\"-sideend\", side, \"Safeguard\");\n      }"
    }
  },
  "saltcure": {
    "id": "saltcure",
    "num": 864,
    "accuracy": 100,
    "basePower": 40,
    "category": "Physical",
    "name": "Salt Cure",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "condition": {
      "noCopy": true,
      "onStart": "onStart(pokemon) {\n        this.add(\"-start\", pokemon, \"Salt Cure\");\n      }",
      "onResidualOrder": 13,
      "onResidual": "onResidual(pokemon) {\n        this.damage(pokemon.baseMaxhp / (pokemon.hasType([\"Water\", \"Steel\"]) ? 4 : 8));\n      }",
      "onEnd": "onEnd(pokemon) {\n        this.add(\"-end\", pokemon, \"Salt Cure\");\n      }"
    },
    "secondary": {
      "chance": 100,
      "volatileStatus": "saltcure"
    },
    "target": "normal",
    "type": "Rock"
  },
  "sandattack": {
    "id": "sandattack",
    "num": 28,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Sand Attack",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "metronome": 1
    },
    "boosts": {
      "accuracy": -1
    },
    "secondary": null,
    "target": "normal",
    "type": "Ground",
    "zMove": {
      "boost": {
        "evasion": 1
      }
    },
    "contestType": "Cute"
  },
  "sandsearstorm": {
    "id": "sandsearstorm",
    "num": 848,
    "accuracy": 80,
    "basePower": 100,
    "category": "Special",
    "name": "Sandsear Storm",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "wind": 1
    },
    "onModifyMove": "onModifyMove(move, pokemon, target) {\n      if (target && [\"raindance\", \"primordialsea\"].includes(target.effectiveWeather())) {\n        move.accuracy = true;\n      }\n    }",
    "secondary": {
      "chance": 20,
      "status": "brn"
    },
    "target": "allAdjacentFoes",
    "type": "Ground"
  },
  "sandstorm": {
    "id": "sandstorm",
    "num": 201,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Sandstorm",
    "pp": 10,
    "priority": 0,
    "flags": {
      "metronome": 1,
      "wind": 1
    },
    "weather": "Sandstorm",
    "secondary": null,
    "target": "all",
    "type": "Rock",
    "zMove": {
      "boost": {
        "spe": 1
      }
    },
    "contestType": "Tough"
  },
  "sandtomb": {
    "id": "sandtomb",
    "num": 328,
    "accuracy": 85,
    "basePower": 35,
    "category": "Physical",
    "name": "Sand Tomb",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "volatileStatus": "partiallytrapped",
    "secondary": null,
    "target": "normal",
    "type": "Ground",
    "contestType": "Clever"
  },
  "sappyseed": {
    "id": "sappyseed",
    "num": 738,
    "accuracy": 90,
    "basePower": 100,
    "category": "Physical",
    "isNonstandard": "LGPE",
    "name": "Sappy Seed",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1
    },
    "onHit": "onHit(target, source) {\n      if (target.hasType(\"Grass\")) return null;\n      target.addVolatile(\"leechseed\", source);\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Grass",
    "contestType": "Clever"
  },
  "savagespinout": {
    "id": "savagespinout",
    "num": 634,
    "accuracy": true,
    "basePower": 1,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Savage Spin-Out",
    "pp": 1,
    "priority": 0,
    "flags": {},
    "isZ": "buginiumz",
    "secondary": null,
    "target": "normal",
    "type": "Bug",
    "contestType": "Cool"
  },
  "scald": {
    "id": "scald",
    "num": 503,
    "accuracy": 100,
    "basePower": 80,
    "category": "Special",
    "name": "Scald",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "defrost": 1,
      "metronome": 1
    },
    "thawsTarget": true,
    "secondary": {
      "chance": 30,
      "status": "brn"
    },
    "target": "normal",
    "type": "Water",
    "contestType": "Tough"
  },
  "scaleshot": {
    "id": "scaleshot",
    "num": 799,
    "accuracy": 90,
    "basePower": 25,
    "category": "Physical",
    "name": "Scale Shot",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "multihit": [
      2,
      5
    ],
    "selfBoost": {
      "boosts": {
        "def": -1,
        "spe": 1
      }
    },
    "secondary": null,
    "target": "normal",
    "type": "Dragon",
    "zMove": {
      "basePower": 140
    },
    "maxMove": {
      "basePower": 130
    }
  },
  "scaryface": {
    "id": "scaryface",
    "num": 184,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Scary Face",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "allyanim": 1,
      "metronome": 1
    },
    "boosts": {
      "spe": -2
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "zMove": {
      "boost": {
        "spe": 1
      }
    },
    "contestType": "Tough"
  },
  "scorchingsands": {
    "id": "scorchingsands",
    "num": 815,
    "accuracy": 100,
    "basePower": 70,
    "category": "Special",
    "name": "Scorching Sands",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "defrost": 1,
      "metronome": 1
    },
    "thawsTarget": true,
    "secondary": {
      "chance": 30,
      "status": "brn"
    },
    "target": "normal",
    "type": "Ground"
  },
  "scratch": {
    "id": "scratch",
    "num": 10,
    "accuracy": 100,
    "basePower": 40,
    "category": "Physical",
    "name": "Scratch",
    "pp": 35,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Tough"
  },
  "screech": {
    "id": "screech",
    "num": 103,
    "accuracy": 85,
    "basePower": 0,
    "category": "Status",
    "name": "Screech",
    "pp": 40,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "sound": 1,
      "bypasssub": 1,
      "allyanim": 1,
      "metronome": 1
    },
    "boosts": {
      "def": -2
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "zMove": {
      "boost": {
        "atk": 1
      }
    },
    "contestType": "Clever"
  },
  "searingshot": {
    "id": "searingshot",
    "num": 545,
    "accuracy": 100,
    "basePower": 100,
    "category": "Special",
    "isNonstandard": "Past",
    "name": "Searing Shot",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "bullet": 1
    },
    "secondary": {
      "chance": 30,
      "status": "brn"
    },
    "target": "allAdjacent",
    "type": "Fire",
    "contestType": "Cool"
  },
  "searingsunrazesmash": {
    "id": "searingsunrazesmash",
    "num": 724,
    "accuracy": true,
    "basePower": 200,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Searing Sunraze Smash",
    "pp": 1,
    "priority": 0,
    "flags": {
      "contact": 1
    },
    "isZ": "solganiumz",
    "ignoreAbility": true,
    "secondary": null,
    "target": "normal",
    "type": "Steel",
    "contestType": "Cool"
  },
  "secretpower": {
    "id": "secretpower",
    "num": 290,
    "accuracy": 100,
    "basePower": 70,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Secret Power",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onModifyMove": "onModifyMove(move, pokemon) {\n      if (this.field.isTerrain(\"\")) return;\n      move.secondaries = [];\n      if (this.field.isTerrain(\"electricterrain\")) {\n        move.secondaries.push({\n          chance: 30,\n          status: \"par\"\n        });\n      } else if (this.field.isTerrain(\"grassyterrain\")) {\n        move.secondaries.push({\n          chance: 30,\n          status: \"slp\"\n        });\n      } else if (this.field.isTerrain(\"mistyterrain\")) {\n        move.secondaries.push({\n          chance: 30,\n          boosts: {\n            spa: -1\n          }\n        });\n      } else if (this.field.isTerrain(\"psychicterrain\")) {\n        move.secondaries.push({\n          chance: 30,\n          boosts: {\n            spe: -1\n          }\n        });\n      }\n    }",
    "secondary": {
      "chance": 30,
      "status": "par"
    },
    "target": "normal",
    "type": "Normal",
    "contestType": "Clever"
  },
  "secretsword": {
    "id": "secretsword",
    "num": 548,
    "accuracy": 100,
    "basePower": 85,
    "category": "Special",
    "overrideDefensiveStat": "def",
    "name": "Secret Sword",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "slicing": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Fighting",
    "contestType": "Beautiful"
  },
  "seedbomb": {
    "id": "seedbomb",
    "num": 402,
    "accuracy": 100,
    "basePower": 80,
    "category": "Physical",
    "name": "Seed Bomb",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "bullet": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Grass",
    "contestType": "Tough"
  },
  "seedflare": {
    "id": "seedflare",
    "num": 465,
    "accuracy": 85,
    "basePower": 120,
    "category": "Special",
    "name": "Seed Flare",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 40,
      "boosts": {
        "spd": -2
      }
    },
    "target": "normal",
    "type": "Grass",
    "contestType": "Beautiful"
  },
  "seismictoss": {
    "id": "seismictoss",
    "num": 69,
    "accuracy": 100,
    "basePower": 0,
    "damage": "level",
    "category": "Physical",
    "name": "Seismic Toss",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "nonsky": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Fighting",
    "maxMove": {
      "basePower": 75
    },
    "contestType": "Tough"
  },
  "selfdestruct": {
    "id": "selfdestruct",
    "inherit": true,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "noparentalbond": 1,
      "nosketch": 1
    }
  },
  "shadowball": {
    "id": "shadowball",
    "num": 247,
    "accuracy": 100,
    "basePower": 80,
    "category": "Special",
    "name": "Shadow Ball",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "bullet": 1
    },
    "secondary": {
      "chance": 20,
      "boosts": {
        "spd": -1
      }
    },
    "target": "normal",
    "type": "Ghost",
    "contestType": "Clever"
  },
  "shadowbone": {
    "id": "shadowbone",
    "num": 708,
    "accuracy": 100,
    "basePower": 85,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Shadow Bone",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 20,
      "boosts": {
        "def": -1
      }
    },
    "target": "normal",
    "type": "Ghost",
    "contestType": "Cool"
  },
  "shadowclaw": {
    "id": "shadowclaw",
    "num": 421,
    "accuracy": 100,
    "basePower": 70,
    "category": "Physical",
    "name": "Shadow Claw",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "critRatio": 2,
    "secondary": null,
    "target": "normal",
    "type": "Ghost",
    "contestType": "Cool"
  },
  "shadowforce": {
    "id": "shadowforce",
    "num": 467,
    "accuracy": 100,
    "basePower": 120,
    "category": "Physical",
    "name": "Shadow Force",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "charge": 1,
      "mirror": 1,
      "metronome": 1,
      "nosleeptalk": 1,
      "noassist": 1,
      "failinstruct": 1
    },
    "breaksProtect": true,
    "onTryMove": "onTryMove(attacker, defender, move) {\n      if (attacker.removeVolatile(move.id)) {\n        return;\n      }\n      this.add(\"-prepare\", attacker, move.name);\n      if (!this.runEvent(\"ChargeMove\", attacker, defender, move)) {\n        return;\n      }\n      attacker.addVolatile(\"twoturnmove\", defender);\n      return null;\n    }",
    "condition": {
      "duration": 2,
      "onInvulnerability": false
    },
    "secondary": null,
    "target": "normal",
    "type": "Ghost",
    "contestType": "Cool"
  },
  "shadowpunch": {
    "id": "shadowpunch",
    "num": 325,
    "accuracy": true,
    "basePower": 60,
    "category": "Physical",
    "name": "Shadow Punch",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "punch": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Ghost",
    "contestType": "Clever"
  },
  "shadowsneak": {
    "id": "shadowsneak",
    "num": 425,
    "accuracy": 100,
    "basePower": 40,
    "category": "Physical",
    "name": "Shadow Sneak",
    "pp": 30,
    "priority": 1,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Ghost",
    "contestType": "Clever"
  },
  "sharpen": {
    "id": "sharpen",
    "num": 159,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Sharpen",
    "pp": 30,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "boosts": {
      "atk": 1
    },
    "secondary": null,
    "target": "self",
    "type": "Normal",
    "zMove": {
      "boost": {
        "atk": 1
      }
    },
    "contestType": "Cute"
  },
  "shatteredpsyche": {
    "id": "shatteredpsyche",
    "num": 648,
    "accuracy": true,
    "basePower": 1,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Shattered Psyche",
    "pp": 1,
    "priority": 0,
    "flags": {},
    "isZ": "psychiumz",
    "secondary": null,
    "target": "normal",
    "type": "Psychic",
    "contestType": "Cool"
  },
  "shedtail": {
    "id": "shedtail",
    "num": 880,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Shed Tail",
    "pp": 10,
    "priority": 0,
    "flags": {},
    "volatileStatus": "substitute",
    "onTryHit": "onTryHit(source) {\n      if (!this.canSwitch(source.side) || source.volatiles[\"commanded\"]) {\n        this.add(\"-fail\", source);\n        return this.NOT_FAIL;\n      }\n      if (source.volatiles[\"substitute\"]) {\n        this.add(\"-fail\", source, \"move: Shed Tail\");\n        return this.NOT_FAIL;\n      }\n      if (source.hp <= Math.ceil(source.maxhp / 2)) {\n        this.add(\"-fail\", source, \"move: Shed Tail\", \"[weak]\");\n        return this.NOT_FAIL;\n      }\n    }",
    "onHit": "onHit(target) {\n      this.directDamage(Math.ceil(target.maxhp / 2));\n    }",
    "self": {
      "onHit": "onHit(source) {\n        source.skipBeforeSwitchOutEventFlag = true;\n      }"
    },
    "selfSwitch": "shedtail",
    "secondary": null,
    "target": "self",
    "type": "Normal",
    "zMove": {
      "effect": "clearnegativeboost"
    }
  },
  "sheercold": {
    "id": "sheercold",
    "num": 329,
    "accuracy": 30,
    "basePower": 0,
    "category": "Special",
    "name": "Sheer Cold",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "ohko": "Ice",
    "target": "normal",
    "type": "Ice",
    "zMove": {
      "basePower": 180
    },
    "maxMove": {
      "basePower": 130
    },
    "contestType": "Beautiful"
  },
  "shellsidearm": {
    "id": "shellsidearm",
    "num": 801,
    "accuracy": 100,
    "basePower": 90,
    "category": "Special",
    "name": "Shell Side Arm",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onPrepareHit": "onPrepareHit(target, source, move) {\n      if (!source.isAlly(target)) {\n        this.attrLastMove(\"[anim] Shell Side Arm \" + move.category);\n      }\n    }",
    "onModifyMove": "onModifyMove(move, pokemon, target) {\n      if (!target) return;\n      const atk = pokemon.getStat(\"atk\", false, true);\n      const spa = pokemon.getStat(\"spa\", false, true);\n      const def = target.getStat(\"def\", false, true);\n      const spd = target.getStat(\"spd\", false, true);\n      const physical = Math.floor(Math.floor(Math.floor(Math.floor(2 * pokemon.level / 5 + 2) * 90 * atk) / def) / 50);\n      const special = Math.floor(Math.floor(Math.floor(Math.floor(2 * pokemon.level / 5 + 2) * 90 * spa) / spd) / 50);\n      if (physical > special || physical === special && this.randomChance(1, 2)) {\n        move.category = \"Physical\";\n        move.flags.contact = 1;\n      }\n    }",
    "onHit": "onHit(target, source, move) {\n      if (!source.isAlly(target)) this.hint(move.category + \" Shell Side Arm\");\n    }",
    "onAfterSubDamage": "onAfterSubDamage(damage, target, source, move) {\n      if (!source.isAlly(target)) this.hint(move.category + \" Shell Side Arm\");\n    }",
    "secondary": {
      "chance": 20,
      "status": "psn"
    },
    "target": "normal",
    "type": "Poison"
  },
  "shellsmash": {
    "id": "shellsmash",
    "num": 504,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Shell Smash",
    "pp": 15,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "boosts": {
      "def": -1,
      "spd": -1,
      "atk": 2,
      "spa": 2,
      "spe": 2
    },
    "secondary": null,
    "target": "self",
    "type": "Normal",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Tough"
  },
  "shelltrap": {
    "id": "shelltrap",
    "num": 704,
    "accuracy": 100,
    "basePower": 150,
    "category": "Special",
    "isNonstandard": "Past",
    "name": "Shell Trap",
    "pp": 5,
    "priority": -3,
    "flags": {
      "protect": 1,
      "failmefirst": 1,
      "nosleeptalk": 1,
      "noassist": 1,
      "failcopycat": 1,
      "failinstruct": 1
    },
    "priorityChargeCallback": "priorityChargeCallback(pokemon) {\n      pokemon.addVolatile(\"shelltrap\");\n    }",
    "onTryMove": "onTryMove(pokemon) {\n      if (!pokemon.volatiles[\"shelltrap\"]?.gotHit) {\n        this.attrLastMove(\"[still]\");\n        this.add(\"cant\", pokemon, \"Shell Trap\", \"Shell Trap\");\n        return null;\n      }\n    }",
    "condition": {
      "duration": 1,
      "onStart": "onStart(pokemon) {\n        this.add(\"-singleturn\", pokemon, \"move: Shell Trap\");\n      }",
      "onHit": "onHit(pokemon, source, move) {\n        if (!pokemon.isAlly(source) && move.category === \"Physical\") {\n          this.effectState.gotHit = true;\n          const action = this.queue.willMove(pokemon);\n          if (action) {\n            this.queue.prioritizeAction(action);\n          }\n        }\n      }"
    },
    "secondary": null,
    "target": "allAdjacentFoes",
    "type": "Fire",
    "contestType": "Tough"
  },
  "shelter": {
    "id": "shelter",
    "num": 842,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Shelter",
    "pp": 10,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "boosts": {
      "def": 2
    },
    "secondary": null,
    "target": "self",
    "type": "Steel"
  },
  "shiftgear": {
    "id": "shiftgear",
    "num": 508,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Shift Gear",
    "pp": 10,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "boosts": {
      "spe": 2,
      "atk": 1
    },
    "secondary": null,
    "target": "self",
    "type": "Steel",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Clever"
  },
  "shockwave": {
    "id": "shockwave",
    "num": 351,
    "accuracy": true,
    "basePower": 60,
    "category": "Special",
    "name": "Shock Wave",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Electric",
    "contestType": "Cool"
  },
  "shoreup": {
    "id": "shoreup",
    "num": 659,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Shore Up",
    "pp": 5,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "heal": 1,
      "metronome": 1
    },
    "onHit": "onHit(pokemon) {\n      let factor = 0.5;\n      if (this.field.isWeather(\"sandstorm\")) {\n        factor = 0.667;\n      }\n      const success = !!this.heal(this.modify(pokemon.maxhp, factor));\n      if (!success) {\n        this.add(\"-fail\", pokemon, \"heal\");\n        return this.NOT_FAIL;\n      }\n      return success;\n    }",
    "secondary": null,
    "target": "self",
    "type": "Ground",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Beautiful"
  },
  "signalbeam": {
    "id": "signalbeam",
    "num": 324,
    "accuracy": 100,
    "basePower": 75,
    "category": "Special",
    "isNonstandard": "Past",
    "name": "Signal Beam",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 10,
      "volatileStatus": "confusion"
    },
    "target": "normal",
    "type": "Bug",
    "contestType": "Beautiful"
  },
  "silktrap": {
    "id": "silktrap",
    "num": 852,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Silk Trap",
    "pp": 10,
    "priority": 4,
    "flags": {},
    "stallingMove": true,
    "volatileStatus": "silktrap",
    "onPrepareHit": "onPrepareHit(pokemon) {\n      return !!this.queue.willAct() && this.runEvent(\"StallMove\", pokemon);\n    }",
    "onHit": "onHit(pokemon) {\n      pokemon.addVolatile(\"stall\");\n    }",
    "condition": {
      "duration": 1,
      "onStart": "onStart(target) {\n        this.add(\"-singleturn\", target, \"Protect\");\n      }",
      "onTryHitPriority": 3,
      "onTryHit": "onTryHit(target, source, move) {\n        if (!move.flags[\"protect\"] || move.category === \"Status\") {\n          if (move.isZ || move.isMax) target.getMoveHitData(move).zBrokeProtect = true;\n          return;\n        }\n        if (move.smartTarget) {\n          move.smartTarget = false;\n        } else {\n          this.add(\"-activate\", target, \"move: Protect\");\n        }\n        const lockedmove = source.getVolatile(\"lockedmove\");\n        if (lockedmove) {\n          if (source.volatiles[\"lockedmove\"].duration === 2) {\n            delete source.volatiles[\"lockedmove\"];\n          }\n        }\n        if (this.checkMoveMakesContact(move, source, target)) {\n          this.boost({ spe: -1 }, source, target, this.dex.getActiveMove(\"Silk Trap\"));\n        }\n        return this.NOT_FAIL;\n      }",
      "onHit": "onHit(target, source, move) {\n        if (move.isZOrMaxPowered && this.checkMoveMakesContact(move, source, target)) {\n          this.boost({ spe: -1 }, source, target, this.dex.getActiveMove(\"Silk Trap\"));\n        }\n      }"
    },
    "target": "self",
    "type": "Bug"
  },
  "silverwind": {
    "id": "silverwind",
    "num": 318,
    "accuracy": 100,
    "basePower": 60,
    "category": "Special",
    "isNonstandard": "Past",
    "name": "Silver Wind",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 10,
      "self": {
        "boosts": {
          "atk": 1,
          "def": 1,
          "spa": 1,
          "spd": 1,
          "spe": 1
        }
      }
    },
    "target": "normal",
    "type": "Bug",
    "contestType": "Beautiful"
  },
  "simplebeam": {
    "id": "simplebeam",
    "num": 493,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Simple Beam",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "allyanim": 1,
      "metronome": 1
    },
    "onTryHit": "onTryHit(target) {\n      if (target.getAbility().flags[\"cantsuppress\"] || target.ability === \"simple\" || target.ability === \"truant\") {\n        return false;\n      }\n    }",
    "onHit": "onHit(pokemon) {\n      const oldAbility = pokemon.setAbility(\"simple\");\n      if (oldAbility) {\n        this.add(\"-ability\", pokemon, \"Simple\", \"[from] move: Simple Beam\");\n        return;\n      }\n      return oldAbility;\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "zMove": {
      "boost": {
        "spa": 1
      }
    },
    "contestType": "Cute"
  },
  "sing": {
    "id": "sing",
    "num": 47,
    "accuracy": 55,
    "basePower": 0,
    "category": "Status",
    "name": "Sing",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "sound": 1,
      "bypasssub": 1,
      "metronome": 1
    },
    "status": "slp",
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "zMove": {
      "boost": {
        "spe": 1
      }
    },
    "contestType": "Cute"
  },
  "sinisterarrowraid": {
    "id": "sinisterarrowraid",
    "num": 695,
    "accuracy": true,
    "basePower": 180,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Sinister Arrow Raid",
    "pp": 1,
    "priority": 0,
    "flags": {},
    "isZ": "decidiumz",
    "secondary": null,
    "target": "normal",
    "type": "Ghost",
    "contestType": "Cool"
  },
  "sizzlyslide": {
    "id": "sizzlyslide",
    "num": 735,
    "accuracy": 100,
    "basePower": 60,
    "category": "Physical",
    "isNonstandard": "LGPE",
    "name": "Sizzly Slide",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "defrost": 1
    },
    "secondary": {
      "chance": 100,
      "status": "brn"
    },
    "target": "normal",
    "type": "Fire",
    "contestType": "Clever"
  },
  "sketch": {
    "id": "sketch",
    "inherit": true,
    "flags": {
      "bypasssub": 1,
      "failencore": 1,
      "noassist": 1,
      "failmimic": 1,
      "nosketch": 1
    }
  },
  "skillswap": {
    "id": "skillswap",
    "num": 285,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Skill Swap",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "bypasssub": 1,
      "allyanim": 1,
      "metronome": 1
    },
    "onTryHit": "onTryHit(target, source) {\n      const targetAbility = target.getAbility();\n      const sourceAbility = source.getAbility();\n      if (sourceAbility.flags[\"failskillswap\"] || targetAbility.flags[\"failskillswap\"] || target.volatiles[\"dynamax\"]) {\n        return false;\n      }\n      const sourceCanBeSet = this.runEvent(\"SetAbility\", source, source, this.effect, targetAbility);\n      if (!sourceCanBeSet) return sourceCanBeSet;\n      const targetCanBeSet = this.runEvent(\"SetAbility\", target, source, this.effect, sourceAbility);\n      if (!targetCanBeSet) return targetCanBeSet;\n    }",
    "onHit": "onHit(target, source, move) {\n      const targetAbility = target.getAbility();\n      const sourceAbility = source.getAbility();\n      if (target.isAlly(source)) {\n        this.add(\"-activate\", source, \"move: Skill Swap\", \"\", \"\", `[of] ${target}`);\n      } else {\n        this.add(\"-activate\", source, \"move: Skill Swap\", targetAbility, sourceAbility, `[of] ${target}`);\n      }\n      this.singleEvent(\"End\", sourceAbility, source.abilityState, source);\n      this.singleEvent(\"End\", targetAbility, target.abilityState, target);\n      source.ability = targetAbility.id;\n      target.ability = sourceAbility.id;\n      source.abilityState = this.initEffectState({ id: this.toID(source.ability), target: source });\n      target.abilityState = this.initEffectState({ id: this.toID(target.ability), target });\n      source.volatileStaleness = void 0;\n      if (!target.isAlly(source)) target.volatileStaleness = \"external\";\n      this.singleEvent(\"Start\", targetAbility, source.abilityState, source);\n      this.singleEvent(\"Start\", sourceAbility, target.abilityState, target);\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Psychic",
    "zMove": {
      "boost": {
        "spe": 1
      }
    },
    "contestType": "Clever"
  },
  "skittersmack": {
    "id": "skittersmack",
    "num": 806,
    "accuracy": 90,
    "basePower": 70,
    "category": "Physical",
    "name": "Skitter Smack",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 100,
      "boosts": {
        "spa": -1
      }
    },
    "target": "normal",
    "type": "Bug"
  },
  "skullbash": {
    "id": "skullbash",
    "inherit": true,
    "onPrepareHit": "onPrepareHit(target, source) {\n      return source.status !== \"slp\";\n    }"
  },
  "skyattack": {
    "id": "skyattack",
    "inherit": true,
    "critRatio": 1,
    "onPrepareHit": "onPrepareHit(target, source) {\n      return source.status !== \"slp\";\n    }",
    "secondary": null
  },
  "skydrop": {
    "id": "skydrop",
    "num": 507,
    "accuracy": 100,
    "basePower": 60,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Sky Drop",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "charge": 1,
      "protect": 1,
      "mirror": 1,
      "gravity": 1,
      "distance": 1,
      "metronome": 1,
      "nosleeptalk": 1,
      "noassist": 1,
      "failinstruct": 1
    },
    "onModifyMove": "onModifyMove(move, source) {\n      if (!source.volatiles[\"skydrop\"]) {\n        move.accuracy = true;\n        delete move.flags[\"contact\"];\n      }\n    }",
    "onMoveFail": "onMoveFail(target, source) {\n      if (source.volatiles[\"twoturnmove\"] && source.volatiles[\"twoturnmove\"].duration === 1) {\n        source.removeVolatile(\"skydrop\");\n        source.removeVolatile(\"twoturnmove\");\n        if (target === this.effectState.target) {\n          this.add(\"-end\", target, \"Sky Drop\", \"[interrupt]\");\n        }\n      }\n    }",
    "onTry": "onTry(source, target) {\n      return !target.fainted;\n    }",
    "onTryHit": "onTryHit(target, source, move) {\n      if (source.removeVolatile(move.id)) {\n        if (target !== source.volatiles[\"twoturnmove\"].source) return false;\n        if (target.hasType(\"Flying\")) {\n          this.add(\"-immune\", target);\n          return null;\n        }\n      } else {\n        if (target.volatiles[\"substitute\"] || target.isAlly(source)) {\n          return false;\n        }\n        if (target.getWeight() >= 2e3) {\n          this.add(\"-fail\", target, \"move: Sky Drop\", \"[heavy]\");\n          return null;\n        }\n        this.add(\"-prepare\", source, move.name, target);\n        source.addVolatile(\"twoturnmove\", target);\n        return null;\n      }\n    }",
    "onHit": "onHit(target, source) {\n      if (target.hp) this.add(\"-end\", target, \"Sky Drop\");\n    }",
    "condition": {
      "duration": 2,
      "onAnyDragOut": "onAnyDragOut(pokemon) {\n        if (pokemon === this.effectState.target || pokemon === this.effectState.source) return false;\n      }",
      "onFoeTrapPokemonPriority": -15,
      "onFoeTrapPokemon": "onFoeTrapPokemon(defender) {\n        if (defender !== this.effectState.source) return;\n        defender.trapped = true;\n      }",
      "onFoeBeforeMovePriority": 12,
      "onFoeBeforeMove": "onFoeBeforeMove(attacker, defender, move) {\n        if (attacker === this.effectState.source) {\n          attacker.activeMoveActions--;\n          this.debug(\"Sky drop nullifying.\");\n          return null;\n        }\n      }",
      "onRedirectTargetPriority": 99,
      "onRedirectTarget": "onRedirectTarget(target, source, source2) {\n        if (source !== this.effectState.target) return;\n        if (this.effectState.source.fainted) return;\n        return this.effectState.source;\n      }",
      "onAnyInvulnerability": "onAnyInvulnerability(target, source, move) {\n        if (target !== this.effectState.target && target !== this.effectState.source) {\n          return;\n        }\n        if (source === this.effectState.target && target === this.effectState.source) {\n          return;\n        }\n        if ([\"gust\", \"twister\", \"skyuppercut\", \"thunder\", \"hurricane\", \"smackdown\", \"thousandarrows\"].includes(move.id)) {\n          return;\n        }\n        return false;\n      }",
      "onAnyBasePower": "onAnyBasePower(basePower, target, source, move) {\n        if (target !== this.effectState.target && target !== this.effectState.source) {\n          return;\n        }\n        if (source === this.effectState.target && target === this.effectState.source) {\n          return;\n        }\n        if (move.id === \"gust\" || move.id === \"twister\") {\n          this.debug(\"BP doubled on midair target\");\n          return this.chainModify(2);\n        }\n      }",
      "onFaint": "onFaint(target) {\n        if (target.volatiles[\"skydrop\"] && target.volatiles[\"twoturnmove\"].source) {\n          this.add(\"-end\", target.volatiles[\"twoturnmove\"].source, \"Sky Drop\", \"[interrupt]\");\n        }\n      }"
    },
    "secondary": null,
    "target": "any",
    "type": "Flying",
    "contestType": "Tough"
  },
  "skyuppercut": {
    "id": "skyuppercut",
    "num": 327,
    "accuracy": 90,
    "basePower": 85,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Sky Uppercut",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "punch": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Fighting",
    "contestType": "Cool"
  },
  "slackoff": {
    "id": "slackoff",
    "num": 303,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Slack Off",
    "pp": 5,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "heal": 1,
      "metronome": 1
    },
    "heal": [
      1,
      2
    ],
    "secondary": null,
    "target": "self",
    "type": "Normal",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Cute"
  },
  "slam": {
    "id": "slam",
    "num": 21,
    "accuracy": 75,
    "basePower": 80,
    "category": "Physical",
    "name": "Slam",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "nonsky": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Tough"
  },
  "slash": {
    "id": "slash",
    "inherit": true,
    "critRatio": 3
  },
  "sleeppowder": {
    "id": "sleeppowder",
    "num": 79,
    "accuracy": 75,
    "basePower": 0,
    "category": "Status",
    "name": "Sleep Powder",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "metronome": 1,
      "powder": 1
    },
    "status": "slp",
    "secondary": null,
    "target": "normal",
    "type": "Grass",
    "zMove": {
      "boost": {
        "spe": 1
      }
    },
    "contestType": "Clever"
  },
  "sleeptalk": {
    "id": "sleeptalk",
    "inherit": true,
    "onHit": "onHit(pokemon) {\n      const moves = [];\n      for (const moveSlot of pokemon.moveSlots) {\n        const moveid = moveSlot.id;\n        const pp = moveSlot.pp;\n        const move = this.dex.moves.get(moveid);\n        if (moveid && !move.flags[\"nosleeptalk\"] && !move.flags[\"charge\"]) {\n          moves.push({ move: moveid, pp });\n        }\n      }\n      if (!moves.length) {\n        return false;\n      }\n      const randomMove = this.sample(moves);\n      if (!randomMove.pp) {\n        this.add(\"cant\", pokemon, \"nopp\", randomMove.move);\n        return;\n      }\n      this.actions.useMove(randomMove.move, pokemon);\n    }"
  },
  "sludge": {
    "id": "sludge",
    "num": 124,
    "accuracy": 100,
    "basePower": 65,
    "category": "Special",
    "name": "Sludge",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 30,
      "status": "psn"
    },
    "target": "normal",
    "type": "Poison",
    "contestType": "Tough"
  },
  "sludgebomb": {
    "id": "sludgebomb",
    "num": 188,
    "accuracy": 100,
    "basePower": 90,
    "category": "Special",
    "name": "Sludge Bomb",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "bullet": 1
    },
    "secondary": {
      "chance": 30,
      "status": "psn"
    },
    "target": "normal",
    "type": "Poison",
    "contestType": "Tough"
  },
  "sludgewave": {
    "id": "sludgewave",
    "num": 482,
    "accuracy": 100,
    "basePower": 95,
    "category": "Special",
    "name": "Sludge Wave",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 10,
      "status": "psn"
    },
    "target": "allAdjacent",
    "type": "Poison",
    "contestType": "Tough"
  },
  "smackdown": {
    "id": "smackdown",
    "num": 479,
    "accuracy": 100,
    "basePower": 50,
    "category": "Physical",
    "name": "Smack Down",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "nonsky": 1,
      "metronome": 1
    },
    "volatileStatus": "smackdown",
    "condition": {
      "noCopy": true,
      "onStart": "onStart(pokemon) {\n        let applies = false;\n        if (pokemon.hasType(\"Flying\") || pokemon.hasAbility(\"levitate\")) applies = true;\n        if (pokemon.hasItem(\"ironball\") || pokemon.volatiles[\"ingrain\"] || this.field.getPseudoWeather(\"gravity\")) applies = false;\n        if (pokemon.removeVolatile(\"fly\") || pokemon.removeVolatile(\"bounce\")) {\n          applies = true;\n          this.queue.cancelMove(pokemon);\n          pokemon.removeVolatile(\"twoturnmove\");\n        }\n        if (pokemon.volatiles[\"magnetrise\"]) {\n          applies = true;\n          delete pokemon.volatiles[\"magnetrise\"];\n        }\n        if (pokemon.volatiles[\"telekinesis\"]) {\n          applies = true;\n          delete pokemon.volatiles[\"telekinesis\"];\n        }\n        if (!applies) return false;\n        this.add(\"-start\", pokemon, \"Smack Down\");\n      }",
      "onRestart": "onRestart(pokemon) {\n        if (pokemon.removeVolatile(\"fly\") || pokemon.removeVolatile(\"bounce\")) {\n          this.queue.cancelMove(pokemon);\n          pokemon.removeVolatile(\"twoturnmove\");\n          this.add(\"-start\", pokemon, \"Smack Down\");\n        }\n      }"
    },
    "secondary": null,
    "target": "normal",
    "type": "Rock",
    "contestType": "Tough"
  },
  "smartstrike": {
    "id": "smartstrike",
    "num": 684,
    "accuracy": true,
    "basePower": 70,
    "category": "Physical",
    "name": "Smart Strike",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Steel",
    "contestType": "Cool"
  },
  "smellingsalts": {
    "id": "smellingsalts",
    "num": 265,
    "accuracy": 100,
    "basePower": 70,
    "basePowerCallback": "basePowerCallback(pokemon, target, move) {\n      if (target.status === \"par\") {\n        this.debug(\"BP doubled on paralyzed target\");\n        return move.basePower * 2;\n      }\n      return move.basePower;\n    }",
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Smelling Salts",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onHit": "onHit(target) {\n      if (target.status === \"par\") target.cureStatus();\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Tough"
  },
  "smog": {
    "id": "smog",
    "num": 123,
    "accuracy": 70,
    "basePower": 30,
    "category": "Special",
    "name": "Smog",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 40,
      "status": "psn"
    },
    "target": "normal",
    "type": "Poison",
    "contestType": "Tough"
  },
  "smokescreen": {
    "id": "smokescreen",
    "num": 108,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Smokescreen",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "metronome": 1
    },
    "boosts": {
      "accuracy": -1
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "zMove": {
      "boost": {
        "evasion": 1
      }
    },
    "contestType": "Clever"
  },
  "snaptrap": {
    "id": "snaptrap",
    "num": 779,
    "accuracy": 100,
    "basePower": 35,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Snap Trap",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1
    },
    "volatileStatus": "partiallytrapped",
    "secondary": null,
    "target": "normal",
    "type": "Grass"
  },
  "snarl": {
    "id": "snarl",
    "num": 555,
    "accuracy": 95,
    "basePower": 55,
    "category": "Special",
    "name": "Snarl",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "sound": 1,
      "bypasssub": 1
    },
    "secondary": {
      "chance": 100,
      "boosts": {
        "spa": -1
      }
    },
    "target": "allAdjacentFoes",
    "type": "Dark",
    "contestType": "Tough"
  },
  "snatch": {
    "id": "snatch",
    "num": 289,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Snatch",
    "pp": 10,
    "priority": 4,
    "flags": {
      "bypasssub": 1,
      "mustpressure": 1,
      "noassist": 1,
      "failcopycat": 1
    },
    "volatileStatus": "snatch",
    "condition": {
      "duration": 1,
      "onStart": "onStart(pokemon) {\n        this.add(\"-singleturn\", pokemon, \"Snatch\");\n      }",
      "onAnyPrepareHitPriority": -1,
      "onAnyPrepareHit": "onAnyPrepareHit(source, target, move) {\n        const snatchUser = this.effectState.source;\n        if (snatchUser.isSkyDropped()) return;\n        if (!move || move.isZ || move.isMax || !move.flags[\"snatch\"] || move.sourceEffect === \"snatch\") {\n          return;\n        }\n        snatchUser.removeVolatile(\"snatch\");\n        this.add(\"-activate\", snatchUser, \"move: Snatch\", `[of] ${source}`);\n        this.actions.useMove(move.id, snatchUser);\n        return null;\n      }"
    },
    "secondary": null,
    "target": "self",
    "type": "Dark",
    "zMove": {
      "boost": {
        "spe": 2
      }
    },
    "contestType": "Clever"
  },
  "snipeshot": {
    "id": "snipeshot",
    "num": 745,
    "accuracy": 100,
    "basePower": 80,
    "category": "Special",
    "name": "Snipe Shot",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "critRatio": 2,
    "tracksTarget": true,
    "secondary": null,
    "target": "normal",
    "type": "Water"
  },
  "snore": {
    "id": "snore",
    "num": 173,
    "accuracy": 100,
    "basePower": 50,
    "category": "Special",
    "name": "Snore",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "sound": 1,
      "bypasssub": 1
    },
    "sleepUsable": true,
    "onTry": "onTry(source) {\n      return source.status === \"slp\" || source.hasAbility(\"comatose\");\n    }",
    "secondary": {
      "chance": 30,
      "volatileStatus": "flinch"
    },
    "target": "normal",
    "type": "Normal",
    "contestType": "Cute"
  },
  "snowscape": {
    "id": "snowscape",
    "num": 883,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Snowscape",
    "pp": 10,
    "priority": 0,
    "flags": {},
    "weather": "snowscape",
    "secondary": null,
    "target": "all",
    "type": "Ice"
  },
  "soak": {
    "id": "soak",
    "num": 487,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Soak",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "allyanim": 1,
      "metronome": 1
    },
    "onHit": "onHit(target) {\n      if (target.getTypes().join() === \"Water\" || !target.setType(\"Water\")) {\n        this.add(\"-fail\", target);\n        return null;\n      }\n      this.add(\"-start\", target, \"typechange\", \"Water\");\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Water",
    "zMove": {
      "boost": {
        "spa": 1
      }
    },
    "contestType": "Cute"
  },
  "softboiled": {
    "id": "softboiled",
    "num": 135,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Soft-Boiled",
    "pp": 5,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "heal": 1,
      "metronome": 1
    },
    "heal": [
      1,
      2
    ],
    "secondary": null,
    "target": "self",
    "type": "Normal",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Cute"
  },
  "solarbeam": {
    "id": "solarbeam",
    "inherit": true,
    "onPrepareHit": "onPrepareHit(target, source) {\n      return source.status !== \"slp\";\n    }",
    "onBasePower": "onBasePower() {\n    }"
  },
  "solarblade": {
    "id": "solarblade",
    "num": 669,
    "accuracy": 100,
    "basePower": 125,
    "category": "Physical",
    "name": "Solar Blade",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "charge": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "nosleeptalk": 1,
      "failinstruct": 1,
      "slicing": 1
    },
    "onTryMove": "onTryMove(attacker, defender, move) {\n      if (attacker.removeVolatile(move.id)) {\n        return;\n      }\n      this.add(\"-prepare\", attacker, move.name);\n      if ([\"sunnyday\", \"desolateland\"].includes(attacker.effectiveWeather())) {\n        this.attrLastMove(\"[still]\");\n        this.addMove(\"-anim\", attacker, move.name, defender);\n        return;\n      }\n      if (!this.runEvent(\"ChargeMove\", attacker, defender, move)) {\n        return;\n      }\n      attacker.addVolatile(\"twoturnmove\", defender);\n      return null;\n    }",
    "onBasePower": "onBasePower(basePower, pokemon, target) {\n      const weakWeathers = [\"raindance\", \"primordialsea\", \"sandstorm\", \"hail\", \"snowscape\"];\n      if (weakWeathers.includes(pokemon.effectiveWeather())) {\n        this.debug(\"weakened by weather\");\n        return this.chainModify(0.5);\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Grass",
    "contestType": "Cool"
  },
  "sonicboom": {
    "id": "sonicboom",
    "num": 49,
    "accuracy": 90,
    "basePower": 0,
    "damage": 20,
    "category": "Special",
    "isNonstandard": "Past",
    "name": "Sonic Boom",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Cool"
  },
  "soulstealing7starstrike": {
    "id": "soulstealing7starstrike",
    "num": 699,
    "accuracy": true,
    "basePower": 195,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Soul-Stealing 7-Star Strike",
    "pp": 1,
    "priority": 0,
    "flags": {
      "contact": 1
    },
    "isZ": "marshadiumz",
    "secondary": null,
    "target": "normal",
    "type": "Ghost",
    "contestType": "Cool"
  },
  "spacialrend": {
    "id": "spacialrend",
    "num": 460,
    "accuracy": 95,
    "basePower": 100,
    "category": "Special",
    "name": "Spacial Rend",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "critRatio": 2,
    "secondary": null,
    "target": "normal",
    "type": "Dragon",
    "contestType": "Beautiful"
  },
  "spark": {
    "id": "spark",
    "num": 209,
    "accuracy": 100,
    "basePower": 65,
    "category": "Physical",
    "name": "Spark",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 30,
      "status": "par"
    },
    "target": "normal",
    "type": "Electric",
    "contestType": "Cool"
  },
  "sparklingaria": {
    "id": "sparklingaria",
    "num": 664,
    "accuracy": 100,
    "basePower": 90,
    "category": "Special",
    "name": "Sparkling Aria",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "sound": 1,
      "bypasssub": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 100,
      "volatileStatus": "sparklingaria"
    },
    "onAfterMove": "onAfterMove(source, target, move) {\n      if (source.fainted || !move.hitTargets || move.hasSheerForce) {\n        for (const pokemon of this.getAllActive()) delete pokemon.volatiles[\"sparklingaria\"];\n        return;\n      }\n      const numberTargets = move.hitTargets.length;\n      for (const pokemon of move.hitTargets) {\n        if (pokemon !== source && pokemon.isActive && (pokemon.removeVolatile(\"sparklingaria\") || numberTargets > 1) && pokemon.status === \"brn\") {\n          pokemon.cureStatus();\n        }\n      }\n    }",
    "target": "allAdjacent",
    "type": "Water",
    "contestType": "Tough"
  },
  "sparklyswirl": {
    "id": "sparklyswirl",
    "num": 740,
    "accuracy": 85,
    "basePower": 120,
    "category": "Special",
    "isNonstandard": "LGPE",
    "name": "Sparkly Swirl",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "self": {
      "onHit": "onHit(pokemon, source, move) {\n        this.add(\"-activate\", source, \"move: Aromatherapy\");\n        for (const ally of source.side.pokemon) {\n          if (ally !== source && (ally.volatiles[\"substitute\"] && !move.infiltrates)) {\n            continue;\n          }\n          ally.cureStatus();\n        }\n      }"
    },
    "secondary": null,
    "target": "normal",
    "type": "Fairy",
    "contestType": "Clever"
  },
  "spectralthief": {
    "id": "spectralthief",
    "num": 712,
    "accuracy": 100,
    "basePower": 90,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Spectral Thief",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "bypasssub": 1
    },
    "stealsBoosts": true,
    "secondary": null,
    "target": "normal",
    "type": "Ghost",
    "contestType": "Cool"
  },
  "speedswap": {
    "id": "speedswap",
    "num": 683,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Speed Swap",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "bypasssub": 1,
      "allyanim": 1,
      "metronome": 1
    },
    "onHit": "onHit(target, source) {\n      const targetSpe = target.storedStats.spe;\n      target.storedStats.spe = source.storedStats.spe;\n      source.storedStats.spe = targetSpe;\n      this.add(\"-activate\", source, \"move: Speed Swap\", `[of] ${target}`);\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Psychic",
    "zMove": {
      "boost": {
        "spe": 1
      }
    },
    "contestType": "Clever"
  },
  "spicyextract": {
    "id": "spicyextract",
    "num": 858,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Spicy Extract",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1
    },
    "boosts": {
      "atk": 2,
      "def": -2
    },
    "secondary": null,
    "target": "normal",
    "type": "Grass"
  },
  "spiderweb": {
    "id": "spiderweb",
    "inherit": true,
    "flags": {
      "reflectable": 1,
      "mirror": 1,
      "metronome": 1
    }
  },
  "spikecannon": {
    "id": "spikecannon",
    "num": 131,
    "accuracy": 100,
    "basePower": 20,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Spike Cannon",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "multihit": [
      2,
      5
    ],
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "maxMove": {
      "basePower": 120
    },
    "contestType": "Cool"
  },
  "spikes": {
    "id": "spikes",
    "inherit": true,
    "condition": {
      "onSideStart": "onSideStart(side) {\n        if (!this.effectState.layers || this.effectState.layers === 0) {\n          this.add(\"-sidestart\", side, \"Spikes\");\n          this.effectState.layers = 1;\n        } else {\n          return false;\n        }\n      }",
      "onSwitchIn": "onSwitchIn(pokemon) {\n        if (!pokemon.runImmunity(\"Ground\")) return;\n        const damageAmounts = [0, 3];\n        this.damage(damageAmounts[this.effectState.layers] * pokemon.maxhp / 24);\n      }"
    }
  },
  "spikyshield": {
    "id": "spikyshield",
    "num": 596,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Spiky Shield",
    "pp": 10,
    "priority": 4,
    "flags": {
      "noassist": 1,
      "failcopycat": 1
    },
    "stallingMove": true,
    "volatileStatus": "spikyshield",
    "onPrepareHit": "onPrepareHit(pokemon) {\n      return !!this.queue.willAct() && this.runEvent(\"StallMove\", pokemon);\n    }",
    "onHit": "onHit(pokemon) {\n      pokemon.addVolatile(\"stall\");\n    }",
    "condition": {
      "duration": 1,
      "onStart": "onStart(target) {\n        this.add(\"-singleturn\", target, \"move: Protect\");\n      }",
      "onTryHitPriority": 3,
      "onTryHit": "onTryHit(target, source, move) {\n        if (!move.flags[\"protect\"]) {\n          if ([\"gmaxoneblow\", \"gmaxrapidflow\"].includes(move.id)) return;\n          if (move.isZ || move.isMax) target.getMoveHitData(move).zBrokeProtect = true;\n          return;\n        }\n        if (move.smartTarget) {\n          move.smartTarget = false;\n        } else {\n          this.add(\"-activate\", target, \"move: Protect\");\n        }\n        const lockedmove = source.getVolatile(\"lockedmove\");\n        if (lockedmove) {\n          if (source.volatiles[\"lockedmove\"].duration === 2) {\n            delete source.volatiles[\"lockedmove\"];\n          }\n        }\n        if (this.checkMoveMakesContact(move, source, target)) {\n          this.damage(source.baseMaxhp / 8, source, target);\n        }\n        return this.NOT_FAIL;\n      }",
      "onHit": "onHit(target, source, move) {\n        if (move.isZOrMaxPowered && this.checkMoveMakesContact(move, source, target)) {\n          this.damage(source.baseMaxhp / 8, source, target);\n        }\n      }"
    },
    "secondary": null,
    "target": "self",
    "type": "Grass",
    "zMove": {
      "boost": {
        "def": 1
      }
    },
    "contestType": "Tough"
  },
  "spinout": {
    "id": "spinout",
    "num": 859,
    "accuracy": 100,
    "basePower": 100,
    "category": "Physical",
    "name": "Spin Out",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "self": {
      "boosts": {
        "spe": -2
      }
    },
    "secondary": null,
    "target": "normal",
    "type": "Steel"
  },
  "spiritbreak": {
    "id": "spiritbreak",
    "num": 789,
    "accuracy": 100,
    "basePower": 75,
    "category": "Physical",
    "name": "Spirit Break",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1
    },
    "secondary": {
      "chance": 100,
      "boosts": {
        "spa": -1
      }
    },
    "target": "normal",
    "type": "Fairy"
  },
  "spiritshackle": {
    "id": "spiritshackle",
    "num": 662,
    "accuracy": 100,
    "basePower": 80,
    "category": "Physical",
    "name": "Spirit Shackle",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 100,
      "onHit": "onHit(target, source, move) {\n        if (source.isActive) target.addVolatile(\"trapped\", source, move, \"trapper\");\n      }"
    },
    "target": "normal",
    "type": "Ghost",
    "contestType": "Tough"
  },
  "spitup": {
    "id": "spitup",
    "num": 255,
    "accuracy": 100,
    "basePower": 0,
    "basePowerCallback": "basePowerCallback(pokemon) {\n      if (!pokemon.volatiles[\"stockpile\"]?.layers) return false;\n      return pokemon.volatiles[\"stockpile\"].layers * 100;\n    }",
    "category": "Special",
    "name": "Spit Up",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "metronome": 1
    },
    "onTry": "onTry(source) {\n      return !!source.volatiles[\"stockpile\"];\n    }",
    "onAfterMove": "onAfterMove(pokemon) {\n      pokemon.removeVolatile(\"stockpile\");\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Tough"
  },
  "spite": {
    "id": "spite",
    "inherit": true,
    "onHit": "onHit(target) {\n      const roll = this.random(2, 6);\n      if (target.lastMove && target.deductPP(target.lastMove.id, roll)) {\n        this.add(\"-activate\", target, \"move: Spite\", target.lastMove.id, roll);\n        return;\n      }\n      return false;\n    }"
  },
  "splash": {
    "id": "splash",
    "num": 150,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Splash",
    "pp": 40,
    "priority": 0,
    "flags": {
      "gravity": 1,
      "metronome": 1
    },
    "onTry": "onTry(source, target, move) {\n      if (this.field.getPseudoWeather(\"Gravity\")) {\n        this.add(\"cant\", source, \"move: Gravity\", move);\n        return null;\n      }\n    }",
    "onTryHit": "onTryHit(target, source) {\n      this.add(\"-nothing\");\n    }",
    "secondary": null,
    "target": "self",
    "type": "Normal",
    "zMove": {
      "boost": {
        "atk": 3
      }
    },
    "contestType": "Cute"
  },
  "splinteredstormshards": {
    "id": "splinteredstormshards",
    "num": 727,
    "accuracy": true,
    "basePower": 190,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Splintered Stormshards",
    "pp": 1,
    "priority": 0,
    "flags": {},
    "onHit": "onHit() {\n      this.field.clearTerrain();\n    }",
    "onAfterSubDamage": "onAfterSubDamage() {\n      this.field.clearTerrain();\n    }",
    "isZ": "lycaniumz",
    "secondary": null,
    "target": "normal",
    "type": "Rock",
    "contestType": "Cool"
  },
  "splishysplash": {
    "id": "splishysplash",
    "num": 730,
    "accuracy": 100,
    "basePower": 90,
    "category": "Special",
    "isNonstandard": "LGPE",
    "name": "Splishy Splash",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "secondary": {
      "chance": 30,
      "status": "par"
    },
    "target": "allAdjacentFoes",
    "type": "Water",
    "contestType": "Cool"
  },
  "spore": {
    "id": "spore",
    "num": 147,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Spore",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "metronome": 1,
      "powder": 1
    },
    "status": "slp",
    "secondary": null,
    "target": "normal",
    "type": "Grass",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Beautiful"
  },
  "spotlight": {
    "id": "spotlight",
    "num": 671,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Spotlight",
    "pp": 15,
    "priority": 3,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "allyanim": 1,
      "noassist": 1,
      "failcopycat": 1
    },
    "volatileStatus": "spotlight",
    "onTryHit": "onTryHit(target) {\n      if (this.activePerHalf === 1) return false;\n    }",
    "condition": {
      "duration": 1,
      "noCopy": true,
      "onStart": "onStart(pokemon) {\n        this.add(\"-singleturn\", pokemon, \"move: Spotlight\");\n      }",
      "onFoeRedirectTargetPriority": 2,
      "onFoeRedirectTarget": "onFoeRedirectTarget(target, source, source2, move) {\n        if (this.validTarget(this.effectState.target, source, move.target)) {\n          this.debug(\"Spotlight redirected target of move\");\n          return this.effectState.target;\n        }\n      }"
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "zMove": {
      "boost": {
        "spd": 1
      }
    },
    "contestType": "Cute"
  },
  "springtidestorm": {
    "id": "springtidestorm",
    "num": 831,
    "accuracy": 80,
    "basePower": 100,
    "category": "Special",
    "name": "Springtide Storm",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "wind": 1
    },
    "secondary": {
      "chance": 30,
      "boosts": {
        "atk": -1
      }
    },
    "target": "allAdjacentFoes",
    "type": "Fairy"
  },
  "stealthrock": {
    "id": "stealthrock",
    "num": 446,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Stealth Rock",
    "pp": 20,
    "priority": 0,
    "flags": {
      "reflectable": 1,
      "metronome": 1,
      "mustpressure": 1
    },
    "sideCondition": "stealthrock",
    "condition": {
      "onSideStart": "onSideStart(side) {\n        this.add(\"-sidestart\", side, \"move: Stealth Rock\");\n      }",
      "onSwitchIn": "onSwitchIn(pokemon) {\n        if (pokemon.hasItem(\"heavydutyboots\")) return;\n        const typeMod = this.clampIntRange(pokemon.runEffectiveness(this.dex.getActiveMove(\"stealthrock\")), -6, 6);\n        this.damage(pokemon.maxhp * 2 ** typeMod / 8);\n      }"
    },
    "secondary": null,
    "target": "foeSide",
    "type": "Rock",
    "zMove": {
      "boost": {
        "def": 1
      }
    },
    "contestType": "Cool"
  },
  "steameruption": {
    "id": "steameruption",
    "num": 592,
    "accuracy": 95,
    "basePower": 110,
    "category": "Special",
    "name": "Steam Eruption",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "defrost": 1
    },
    "thawsTarget": true,
    "secondary": {
      "chance": 30,
      "status": "brn"
    },
    "target": "normal",
    "type": "Water",
    "contestType": "Beautiful"
  },
  "steamroller": {
    "id": "steamroller",
    "num": 537,
    "accuracy": 100,
    "basePower": 65,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Steamroller",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 30,
      "volatileStatus": "flinch"
    },
    "target": "normal",
    "type": "Bug",
    "contestType": "Tough"
  },
  "steelbeam": {
    "id": "steelbeam",
    "num": 796,
    "accuracy": 95,
    "basePower": 140,
    "category": "Special",
    "name": "Steel Beam",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "mindBlownRecoil": true,
    "onAfterMove": "onAfterMove(pokemon, target, move) {\n      if (move.mindBlownRecoil && !move.multihit) {\n        const hpBeforeRecoil = pokemon.hp;\n        this.damage(Math.round(pokemon.maxhp / 2), pokemon, pokemon, this.dex.conditions.get(\"Steel Beam\"), true);\n        if (pokemon.hp <= pokemon.maxhp / 2 && hpBeforeRecoil > pokemon.maxhp / 2) {\n          this.runEvent(\"EmergencyExit\", pokemon, pokemon);\n        }\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Steel"
  },
  "steelroller": {
    "id": "steelroller",
    "num": 798,
    "accuracy": 100,
    "basePower": 130,
    "category": "Physical",
    "name": "Steel Roller",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onTry": "onTry() {\n      return !this.field.isTerrain(\"\");\n    }",
    "onHit": "onHit() {\n      this.field.clearTerrain();\n    }",
    "onAfterSubDamage": "onAfterSubDamage() {\n      this.field.clearTerrain();\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Steel"
  },
  "steelwing": {
    "id": "steelwing",
    "num": 211,
    "accuracy": 90,
    "basePower": 70,
    "category": "Physical",
    "name": "Steel Wing",
    "pp": 25,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 10,
      "self": {
        "boosts": {
          "def": 1
        }
      }
    },
    "target": "normal",
    "type": "Steel",
    "contestType": "Cool"
  },
  "stickyweb": {
    "id": "stickyweb",
    "num": 564,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Sticky Web",
    "pp": 20,
    "priority": 0,
    "flags": {
      "reflectable": 1,
      "metronome": 1
    },
    "sideCondition": "stickyweb",
    "condition": {
      "onSideStart": "onSideStart(side) {\n        this.add(\"-sidestart\", side, \"move: Sticky Web\");\n      }",
      "onSwitchIn": "onSwitchIn(pokemon) {\n        if (!pokemon.isGrounded() || pokemon.hasItem(\"heavydutyboots\")) return;\n        this.add(\"-activate\", pokemon, \"move: Sticky Web\");\n        this.boost({ spe: -1 }, pokemon, pokemon.side.foe.active[0], this.dex.getActiveMove(\"stickyweb\"));\n      }"
    },
    "secondary": null,
    "target": "foeSide",
    "type": "Bug",
    "zMove": {
      "boost": {
        "spe": 1
      }
    },
    "contestType": "Tough"
  },
  "stockpile": {
    "id": "stockpile",
    "inherit": true,
    "pp": 10,
    "condition": {
      "noCopy": true,
      "onStart": "onStart(target) {\n        this.effectState.layers = 1;\n        this.add(\"-start\", target, \"stockpile\" + this.effectState.layers);\n      }",
      "onRestart": "onRestart(target) {\n        if (this.effectState.layers >= 3) return false;\n        this.effectState.layers++;\n        this.add(\"-start\", target, \"stockpile\" + this.effectState.layers);\n      }",
      "onEnd": "onEnd(target) {\n        this.effectState.layers = 0;\n        this.add(\"-end\", target, \"Stockpile\");\n      }"
    }
  },
  "stokedsparksurfer": {
    "id": "stokedsparksurfer",
    "num": 700,
    "accuracy": true,
    "basePower": 175,
    "category": "Special",
    "isNonstandard": "Past",
    "name": "Stoked Sparksurfer",
    "pp": 1,
    "priority": 0,
    "flags": {},
    "isZ": "aloraichiumz",
    "secondary": {
      "chance": 100,
      "status": "par"
    },
    "target": "normal",
    "type": "Electric",
    "contestType": "Cool"
  },
  "stomp": {
    "id": "stomp",
    "num": 23,
    "accuracy": 100,
    "basePower": 65,
    "category": "Physical",
    "name": "Stomp",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "nonsky": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 30,
      "volatileStatus": "flinch"
    },
    "target": "normal",
    "type": "Normal",
    "contestType": "Tough"
  },
  "stompingtantrum": {
    "id": "stompingtantrum",
    "num": 707,
    "accuracy": 100,
    "basePower": 75,
    "basePowerCallback": "basePowerCallback(pokemon, target, move) {\n      if (pokemon.moveLastTurnResult === false) {\n        this.debug(\"doubling Stomping Tantrum BP due to previous move failure\");\n        return move.basePower * 2;\n      }\n      return move.basePower;\n    }",
    "category": "Physical",
    "name": "Stomping Tantrum",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Ground",
    "contestType": "Tough"
  },
  "stoneaxe": {
    "id": "stoneaxe",
    "num": 830,
    "accuracy": 90,
    "basePower": 65,
    "category": "Physical",
    "name": "Stone Axe",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "slicing": 1
    },
    "onAfterHit": "onAfterHit(target, source, move) {\n      if (!move.hasSheerForce && source.hp) {\n        for (const side of source.side.foeSidesWithConditions()) {\n          side.addSideCondition(\"stealthrock\");\n        }\n      }\n    }",
    "onAfterSubDamage": "onAfterSubDamage(damage, target, source, move) {\n      if (!move.hasSheerForce && source.hp) {\n        for (const side of source.side.foeSidesWithConditions()) {\n          side.addSideCondition(\"stealthrock\");\n        }\n      }\n    }",
    "secondary": {},
    "target": "normal",
    "type": "Rock"
  },
  "stoneedge": {
    "id": "stoneedge",
    "num": 444,
    "accuracy": 80,
    "basePower": 100,
    "category": "Physical",
    "name": "Stone Edge",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "critRatio": 2,
    "secondary": null,
    "target": "normal",
    "type": "Rock",
    "contestType": "Tough"
  },
  "storedpower": {
    "id": "storedpower",
    "num": 500,
    "accuracy": 100,
    "basePower": 20,
    "basePowerCallback": "basePowerCallback(pokemon, target, move) {\n      const bp = move.basePower + 20 * pokemon.positiveBoosts();\n      this.debug(`BP: ${bp}`);\n      return bp;\n    }",
    "category": "Special",
    "name": "Stored Power",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Psychic",
    "zMove": {
      "basePower": 160
    },
    "maxMove": {
      "basePower": 130
    },
    "contestType": "Clever"
  },
  "stormthrow": {
    "id": "stormthrow",
    "num": 480,
    "accuracy": 100,
    "basePower": 60,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Storm Throw",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "willCrit": true,
    "secondary": null,
    "target": "normal",
    "type": "Fighting",
    "contestType": "Cool"
  },
  "strangesteam": {
    "id": "strangesteam",
    "num": 790,
    "accuracy": 95,
    "basePower": 90,
    "category": "Special",
    "name": "Strange Steam",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "secondary": {
      "chance": 20,
      "volatileStatus": "confusion"
    },
    "target": "normal",
    "type": "Fairy"
  },
  "strength": {
    "id": "strength",
    "num": 70,
    "accuracy": 100,
    "basePower": 80,
    "category": "Physical",
    "name": "Strength",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Tough"
  },
  "strengthsap": {
    "id": "strengthsap",
    "num": 668,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Strength Sap",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "heal": 1,
      "metronome": 1
    },
    "onHit": "onHit(target, source) {\n      if (target.boosts.atk === -6) return false;\n      const atk = target.getStat(\"atk\", false, true);\n      const success = this.boost({ atk: -1 }, target, source, null, false, true);\n      return !!(this.heal(atk, source, target) || success);\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Grass",
    "zMove": {
      "boost": {
        "def": 1
      }
    },
    "contestType": "Cute"
  },
  "stringshot": {
    "id": "stringshot",
    "num": 81,
    "accuracy": 95,
    "basePower": 0,
    "category": "Status",
    "name": "String Shot",
    "pp": 40,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "metronome": 1
    },
    "boosts": {
      "spe": -2
    },
    "secondary": null,
    "target": "allAdjacentFoes",
    "type": "Bug",
    "zMove": {
      "boost": {
        "spe": 1
      }
    },
    "contestType": "Clever"
  },
  "struggle": {
    "id": "struggle",
    "inherit": true,
    "flags": {
      "contact": 1,
      "protect": 1,
      "noassist": 1,
      "failencore": 1,
      "failmimic": 1,
      "nosketch": 1
    },
    "accuracy": 100,
    "recoil": [
      1,
      4
    ],
    "struggleRecoil": false
  },
  "strugglebug": {
    "id": "strugglebug",
    "num": 522,
    "accuracy": 100,
    "basePower": 50,
    "category": "Special",
    "name": "Struggle Bug",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 100,
      "boosts": {
        "spa": -1
      }
    },
    "target": "allAdjacentFoes",
    "type": "Bug",
    "contestType": "Cute"
  },
  "stuffcheeks": {
    "id": "stuffcheeks",
    "num": 747,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Stuff Cheeks",
    "pp": 10,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "onDisableMove": "onDisableMove(pokemon) {\n      if (!pokemon.getItem().isBerry) pokemon.disableMove(\"stuffcheeks\");\n    }",
    "onTry": "onTry(source) {\n      return source.getItem().isBerry;\n    }",
    "onHit": "onHit(pokemon) {\n      if (!this.boost({ def: 2 })) return null;\n      pokemon.eatItem(true);\n    }",
    "secondary": null,
    "target": "self",
    "type": "Normal"
  },
  "stunspore": {
    "id": "stunspore",
    "num": 78,
    "accuracy": 75,
    "basePower": 0,
    "category": "Status",
    "name": "Stun Spore",
    "pp": 30,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "metronome": 1,
      "powder": 1
    },
    "status": "par",
    "secondary": null,
    "target": "normal",
    "type": "Grass",
    "zMove": {
      "boost": {
        "spd": 1
      }
    },
    "contestType": "Clever"
  },
  "submission": {
    "id": "submission",
    "num": 66,
    "accuracy": 80,
    "basePower": 80,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Submission",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "recoil": [
      1,
      4
    ],
    "secondary": null,
    "target": "normal",
    "type": "Fighting",
    "contestType": "Cool"
  },
  "substitute": {
    "id": "substitute",
    "inherit": true,
    "condition": {
      "onStart": "onStart(target) {\n        this.add(\"-start\", target, \"Substitute\");\n        this.effectState.hp = Math.floor(target.maxhp / 4);\n        delete target.volatiles[\"partiallytrapped\"];\n      }",
      "onTryPrimaryHitPriority": -1,
      "onTryPrimaryHit": "onTryPrimaryHit(target, source, move) {\n        if (move.stallingMove) {\n          this.add(\"-fail\", source);\n          return null;\n        }\n        if (target === source) {\n          this.debug(\"sub bypass: self hit\");\n          return;\n        }\n        if (move.id === \"twineedle\") {\n          move.secondaries = move.secondaries.filter((p) => !p.kingsrock);\n        }\n        if (move.drain) {\n          this.add(\"-miss\", source);\n          this.hint(\"In Gen 2, draining moves always miss against Substitute.\");\n          return null;\n        }\n        if (move.category === \"Status\") {\n          const SubBlocked = [\"leechseed\", \"lockon\", \"mindreader\", \"nightmare\", \"painsplit\", \"sketch\"];\n          if (move.id === \"swagger\") {\n            delete move.volatileStatus;\n          }\n          if (move.status || move.boosts && move.id !== \"swagger\" || move.volatileStatus === \"confusion\" || SubBlocked.includes(move.id)) {\n            this.add(\"-activate\", target, \"Substitute\", \"[block] \" + move.name);\n            return null;\n          }\n          return;\n        }\n        let damage = this.actions.getDamage(source, target, move);\n        if (!damage) {\n          return null;\n        }\n        damage = this.runEvent(\"SubDamage\", target, source, move, damage);\n        if (!damage) {\n          return damage;\n        }\n        if (damage > target.volatiles[\"substitute\"].hp) {\n          damage = target.volatiles[\"substitute\"].hp;\n        }\n        target.volatiles[\"substitute\"].hp -= damage;\n        source.lastDamage = damage;\n        if (target.volatiles[\"substitute\"].hp <= 0) {\n          target.removeVolatile(\"substitute\");\n        } else {\n          this.add(\"-activate\", target, \"Substitute\", \"[damage]\");\n        }\n        if (move.recoil) {\n          this.damage(1, source, target, \"recoil\");\n        }\n        this.runEvent(\"AfterSubDamage\", target, source, move, damage);\n        return this.HIT_SUBSTITUTE;\n      }",
      "onEnd": "onEnd(target) {\n        this.add(\"-end\", target, \"Substitute\");\n      }"
    }
  },
  "subzeroslammer": {
    "id": "subzeroslammer",
    "num": 650,
    "accuracy": true,
    "basePower": 1,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Subzero Slammer",
    "pp": 1,
    "priority": 0,
    "flags": {},
    "isZ": "iciumz",
    "secondary": null,
    "target": "normal",
    "type": "Ice",
    "contestType": "Cool"
  },
  "suckerpunch": {
    "id": "suckerpunch",
    "num": 389,
    "accuracy": 100,
    "basePower": 70,
    "category": "Physical",
    "name": "Sucker Punch",
    "pp": 5,
    "priority": 1,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onTry": "onTry(source, target) {\n      const action = this.queue.willMove(target);\n      const move = action?.choice === \"move\" ? action.move : null;\n      if (!move || move.category === \"Status\" && move.id !== \"mefirst\" || target.volatiles[\"mustrecharge\"]) {\n        return false;\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Dark",
    "contestType": "Clever"
  },
  "sunnyday": {
    "id": "sunnyday",
    "num": 241,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Sunny Day",
    "pp": 5,
    "priority": 0,
    "flags": {
      "metronome": 1
    },
    "weather": "sunnyday",
    "secondary": null,
    "target": "all",
    "type": "Fire",
    "zMove": {
      "boost": {
        "spe": 1
      }
    },
    "contestType": "Beautiful"
  },
  "sunsteelstrike": {
    "id": "sunsteelstrike",
    "num": 713,
    "accuracy": 100,
    "basePower": 100,
    "category": "Physical",
    "name": "Sunsteel Strike",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1
    },
    "ignoreAbility": true,
    "secondary": null,
    "target": "normal",
    "type": "Steel",
    "contestType": "Cool"
  },
  "supercellslam": {
    "id": "supercellslam",
    "num": 916,
    "accuracy": 95,
    "basePower": 100,
    "category": "Physical",
    "name": "Supercell Slam",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "hasCrashDamage": true,
    "onMoveFail": "onMoveFail(target, source, move) {\n      this.damage(source.baseMaxhp / 2, source, source, this.dex.conditions.get(\"Supercell Slam\"));\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Electric"
  },
  "superfang": {
    "id": "superfang",
    "num": 162,
    "accuracy": 90,
    "basePower": 0,
    "damageCallback": "damageCallback(pokemon, target) {\n      return this.clampIntRange(target.getUndynamaxedHP() / 2, 1);\n    }",
    "category": "Physical",
    "name": "Super Fang",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Tough"
  },
  "superpower": {
    "id": "superpower",
    "num": 276,
    "accuracy": 100,
    "basePower": 120,
    "category": "Physical",
    "name": "Superpower",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "self": {
      "boosts": {
        "atk": -1,
        "def": -1
      }
    },
    "secondary": null,
    "target": "normal",
    "type": "Fighting",
    "contestType": "Tough"
  },
  "supersonic": {
    "id": "supersonic",
    "num": 48,
    "accuracy": 55,
    "basePower": 0,
    "category": "Status",
    "name": "Supersonic",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "sound": 1,
      "bypasssub": 1,
      "metronome": 1
    },
    "volatileStatus": "confusion",
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "zMove": {
      "boost": {
        "spe": 1
      }
    },
    "contestType": "Clever"
  },
  "supersonicskystrike": {
    "id": "supersonicskystrike",
    "num": 626,
    "accuracy": true,
    "basePower": 1,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Supersonic Skystrike",
    "pp": 1,
    "priority": 0,
    "flags": {},
    "isZ": "flyiniumz",
    "secondary": null,
    "target": "normal",
    "type": "Flying",
    "contestType": "Cool"
  },
  "surf": {
    "id": "surf",
    "inherit": true,
    "target": "allAdjacentFoes"
  },
  "surgingstrikes": {
    "id": "surgingstrikes",
    "num": 818,
    "accuracy": 100,
    "basePower": 25,
    "category": "Physical",
    "name": "Surging Strikes",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "punch": 1
    },
    "willCrit": true,
    "multihit": 3,
    "secondary": null,
    "target": "normal",
    "type": "Water",
    "zMove": {
      "basePower": 140
    },
    "maxMove": {
      "basePower": 130
    }
  },
  "swagger": {
    "id": "swagger",
    "inherit": true,
    "onTryHit": "onTryHit(target, pokemon) {\n      if (target.boosts.atk >= 6 || target.getStat(\"atk\", false, true) === 999) {\n        this.add(\"-miss\", pokemon);\n        return null;\n      }\n    }"
  },
  "swallow": {
    "id": "swallow",
    "num": 256,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Swallow",
    "pp": 10,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "heal": 1,
      "metronome": 1
    },
    "onTry": "onTry(source, target, move) {\n      if (move.sourceEffect === \"snatch\") return;\n      return !!source.volatiles[\"stockpile\"];\n    }",
    "onHit": "onHit(pokemon) {\n      const layers = pokemon.volatiles[\"stockpile\"]?.layers || 1;\n      const healAmount = [0.25, 0.5, 1];\n      const success = !!this.heal(this.modify(pokemon.maxhp, healAmount[layers - 1]));\n      if (!success) this.add(\"-fail\", pokemon, \"heal\");\n      pokemon.removeVolatile(\"stockpile\");\n      return success || this.NOT_FAIL;\n    }",
    "secondary": null,
    "target": "self",
    "type": "Normal",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Tough"
  },
  "sweetkiss": {
    "id": "sweetkiss",
    "num": 186,
    "accuracy": 75,
    "basePower": 0,
    "category": "Status",
    "name": "Sweet Kiss",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "metronome": 1
    },
    "volatileStatus": "confusion",
    "secondary": null,
    "target": "normal",
    "type": "Fairy",
    "zMove": {
      "boost": {
        "spa": 1
      }
    },
    "contestType": "Cute"
  },
  "sweetscent": {
    "id": "sweetscent",
    "num": 230,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Sweet Scent",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "metronome": 1
    },
    "boosts": {
      "evasion": -2
    },
    "secondary": null,
    "target": "allAdjacentFoes",
    "type": "Normal",
    "zMove": {
      "boost": {
        "accuracy": 1
      }
    },
    "contestType": "Cute"
  },
  "swift": {
    "id": "swift",
    "num": 129,
    "accuracy": true,
    "basePower": 60,
    "category": "Special",
    "name": "Swift",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "allAdjacentFoes",
    "type": "Normal",
    "contestType": "Cool"
  },
  "switcheroo": {
    "id": "switcheroo",
    "num": 415,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Switcheroo",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "allyanim": 1,
      "noassist": 1,
      "failcopycat": 1
    },
    "onTryImmunity": "onTryImmunity(target) {\n      return !target.hasAbility(\"stickyhold\");\n    }",
    "onHit": "onHit(target, source, move) {\n      const yourItem = target.takeItem(source);\n      const myItem = source.takeItem();\n      if (target.item || source.item || !yourItem && !myItem) {\n        if (yourItem) target.item = yourItem.id;\n        if (myItem) source.item = myItem.id;\n        return false;\n      }\n      if (myItem && !this.singleEvent(\"TakeItem\", myItem, source.itemState, target, source, move, myItem) || yourItem && !this.singleEvent(\"TakeItem\", yourItem, target.itemState, source, target, move, yourItem)) {\n        if (yourItem) target.item = yourItem.id;\n        if (myItem) source.item = myItem.id;\n        return false;\n      }\n      this.add(\"-activate\", source, \"move: Trick\", `[of] ${target}`);\n      if (myItem) {\n        target.setItem(myItem);\n        this.add(\"-item\", target, myItem, \"[from] move: Switcheroo\");\n      } else {\n        this.add(\"-enditem\", target, yourItem, \"[silent]\", \"[from] move: Switcheroo\");\n      }\n      if (yourItem) {\n        source.setItem(yourItem);\n        this.add(\"-item\", source, yourItem, \"[from] move: Switcheroo\");\n      } else {\n        this.add(\"-enditem\", source, myItem, \"[silent]\", \"[from] move: Switcheroo\");\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Dark",
    "zMove": {
      "boost": {
        "spe": 2
      }
    },
    "contestType": "Clever"
  },
  "swordsdance": {
    "id": "swordsdance",
    "num": 14,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Swords Dance",
    "pp": 20,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "dance": 1,
      "metronome": 1
    },
    "boosts": {
      "atk": 2
    },
    "secondary": null,
    "target": "self",
    "type": "Normal",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Beautiful"
  },
  "synchronoise": {
    "id": "synchronoise",
    "num": 485,
    "accuracy": 100,
    "basePower": 120,
    "category": "Special",
    "isNonstandard": "Past",
    "name": "Synchronoise",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onTryImmunity": "onTryImmunity(target, source) {\n      return target.hasType(source.getTypes());\n    }",
    "secondary": null,
    "target": "allAdjacent",
    "type": "Psychic",
    "contestType": "Clever"
  },
  "synthesis": {
    "id": "synthesis",
    "inherit": true,
    "onHit": "onHit(pokemon) {\n      if (this.field.isWeather([\"sunnyday\", \"desolateland\"])) {\n        this.heal(pokemon.maxhp);\n      } else if (this.field.isWeather([\"raindance\", \"primordialsea\", \"sandstorm\", \"hail\"])) {\n        this.heal(pokemon.baseMaxhp / 4);\n      } else {\n        this.heal(pokemon.baseMaxhp / 2);\n      }\n    }"
  },
  "syrupbomb": {
    "id": "syrupbomb",
    "num": 903,
    "accuracy": 85,
    "basePower": 60,
    "category": "Special",
    "name": "Syrup Bomb",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "bullet": 1
    },
    "condition": {
      "noCopy": true,
      "duration": 4,
      "onStart": "onStart(pokemon) {\n        this.add(\"-start\", pokemon, \"Syrup Bomb\");\n      }",
      "onUpdate": "onUpdate(pokemon) {\n        if (this.effectState.source && !this.effectState.source.isActive) {\n          pokemon.removeVolatile(\"syrupbomb\");\n        }\n      }",
      "onResidualOrder": 14,
      "onResidual": "onResidual(pokemon) {\n        this.boost({ spe: -1 }, pokemon, this.effectState.source);\n      }",
      "onEnd": "onEnd(pokemon) {\n        this.add(\"-end\", pokemon, \"Syrup Bomb\", \"[silent]\");\n      }"
    },
    "secondary": {
      "chance": 100,
      "volatileStatus": "syrupbomb"
    },
    "target": "normal",
    "type": "Grass"
  },
  "tachyoncutter": {
    "id": "tachyoncutter",
    "num": 911,
    "accuracy": true,
    "basePower": 50,
    "category": "Special",
    "name": "Tachyon Cutter",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "slicing": 1
    },
    "multihit": 2,
    "secondary": null,
    "target": "normal",
    "type": "Steel",
    "zMove": {
      "basePower": 180
    },
    "maxMove": {
      "basePower": 140
    },
    "contestType": "Clever"
  },
  "tackle": {
    "id": "tackle",
    "num": 33,
    "accuracy": 100,
    "basePower": 40,
    "category": "Physical",
    "name": "Tackle",
    "pp": 35,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Tough"
  },
  "tailglow": {
    "id": "tailglow",
    "num": 294,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Tail Glow",
    "pp": 20,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "boosts": {
      "spa": 3
    },
    "secondary": null,
    "target": "self",
    "type": "Bug",
    "zMove": {
      "effect": "clearnegativeboost"
    },
    "contestType": "Beautiful"
  },
  "tailslap": {
    "id": "tailslap",
    "num": 541,
    "accuracy": 85,
    "basePower": 25,
    "category": "Physical",
    "name": "Tail Slap",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "multihit": [
      2,
      5
    ],
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "zMove": {
      "basePower": 140
    },
    "maxMove": {
      "basePower": 130
    },
    "contestType": "Cute"
  },
  "tailwhip": {
    "id": "tailwhip",
    "num": 39,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Tail Whip",
    "pp": 30,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "metronome": 1
    },
    "boosts": {
      "def": -1
    },
    "secondary": null,
    "target": "allAdjacentFoes",
    "type": "Normal",
    "zMove": {
      "boost": {
        "atk": 1
      }
    },
    "contestType": "Cute"
  },
  "tailwind": {
    "id": "tailwind",
    "num": 366,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Tailwind",
    "pp": 15,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1,
      "wind": 1
    },
    "sideCondition": "tailwind",
    "condition": {
      "duration": 4,
      "durationCallback": "durationCallback(target, source, effect) {\n        if (source?.hasAbility(\"persistent\")) {\n          this.add(\"-activate\", source, \"ability: Persistent\", \"[move] Tailwind\");\n          return 6;\n        }\n        return 4;\n      }",
      "onSideStart": "onSideStart(side, source) {\n        if (source?.hasAbility(\"persistent\")) {\n          this.add(\"-sidestart\", side, \"move: Tailwind\", \"[persistent]\");\n        } else {\n          this.add(\"-sidestart\", side, \"move: Tailwind\");\n        }\n      }",
      "onModifySpe": "onModifySpe(spe, pokemon) {\n        return this.chainModify(2);\n      }",
      "onSideResidualOrder": 26,
      "onSideResidualSubOrder": 5,
      "onSideEnd": "onSideEnd(side) {\n        this.add(\"-sideend\", side, \"move: Tailwind\");\n      }"
    },
    "secondary": null,
    "target": "allySide",
    "type": "Flying",
    "zMove": {
      "effect": "crit2"
    },
    "contestType": "Cool"
  },
  "takedown": {
    "id": "takedown",
    "num": 36,
    "accuracy": 85,
    "basePower": 90,
    "category": "Physical",
    "name": "Take Down",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "recoil": [
      1,
      4
    ],
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Tough"
  },
  "takeheart": {
    "id": "takeheart",
    "num": 850,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Take Heart",
    "pp": 15,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "onHit": "onHit(pokemon) {\n      const success = !!this.boost({ spa: 1, spd: 1 });\n      return pokemon.cureStatus() || success;\n    }",
    "secondary": null,
    "target": "self",
    "type": "Psychic"
  },
  "tarshot": {
    "id": "tarshot",
    "num": 749,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Tar Shot",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "metronome": 1
    },
    "volatileStatus": "tarshot",
    "condition": {
      "onStart": "onStart(pokemon) {\n        if (pokemon.terastallized) return false;\n        this.add(\"-start\", pokemon, \"Tar Shot\");\n      }",
      "onEffectivenessPriority": -2,
      "onEffectiveness": "onEffectiveness(typeMod, target, type, move) {\n        if (move.type !== \"Fire\") return;\n        if (!target) return;\n        if (type !== target.getTypes()[0]) return;\n        return typeMod + 1;\n      }"
    },
    "boosts": {
      "spe": -1
    },
    "secondary": null,
    "target": "normal",
    "type": "Rock"
  },
  "taunt": {
    "id": "taunt",
    "inherit": true,
    "flags": {
      "protect": 1,
      "bypasssub": 1,
      "metronome": 1
    },
    "condition": {
      "duration": 2,
      "onStart": "onStart(target) {\n        this.add(\"-start\", target, \"move: Taunt\");\n      }",
      "onResidualOrder": 10,
      "onResidualSubOrder": 15,
      "onEnd": "onEnd(target) {\n        this.add(\"-end\", target, \"move: Taunt\", \"[silent]\");\n      }",
      "onDisableMove": "onDisableMove(pokemon) {\n        for (const moveSlot of pokemon.moveSlots) {\n          if (this.dex.moves.get(moveSlot.move).category === \"Status\") {\n            pokemon.disableMove(moveSlot.id);\n          }\n        }\n      }",
      "onBeforeMove": "onBeforeMove(attacker, defender, move) {\n        if (move.category === \"Status\") {\n          this.add(\"cant\", attacker, \"move: Taunt\", move);\n          return false;\n        }\n      }"
    }
  },
  "tearfullook": {
    "id": "tearfullook",
    "num": 715,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Tearful Look",
    "pp": 20,
    "priority": 0,
    "flags": {
      "reflectable": 1,
      "mirror": 1,
      "metronome": 1
    },
    "boosts": {
      "atk": -1,
      "spa": -1
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "zMove": {
      "boost": {
        "def": 1
      }
    },
    "contestType": "Cute"
  },
  "teatime": {
    "id": "teatime",
    "num": 752,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Teatime",
    "pp": 10,
    "priority": 0,
    "flags": {
      "bypasssub": 1,
      "metronome": 1
    },
    "onHitField": "onHitField(target, source, move) {\n      const targets = [];\n      for (const pokemon of this.getAllActive()) {\n        if (this.runEvent(\"Invulnerability\", pokemon, source, move) === false) {\n          this.add(\"-miss\", source, pokemon);\n        } else if (this.runEvent(\"TryHit\", pokemon, source, move) && pokemon.getItem().isBerry) {\n          targets.push(pokemon);\n        }\n      }\n      this.add(\"-fieldactivate\", \"move: Teatime\");\n      if (!targets.length) {\n        this.add(\"-fail\", source, \"move: Teatime\");\n        this.attrLastMove(\"[still]\");\n        return this.NOT_FAIL;\n      }\n      for (const pokemon of targets) {\n        pokemon.eatItem(true);\n      }\n    }",
    "secondary": null,
    "target": "all",
    "type": "Normal"
  },
  "technoblast": {
    "id": "technoblast",
    "num": 546,
    "accuracy": 100,
    "basePower": 120,
    "category": "Special",
    "isNonstandard": "Past",
    "name": "Techno Blast",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "onModifyType": "onModifyType(move, pokemon) {\n      if (pokemon.ignoringItem()) return;\n      move.type = this.runEvent(\"Drive\", pokemon, null, move, \"Normal\");\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Cool"
  },
  "tectonicrage": {
    "id": "tectonicrage",
    "num": 630,
    "accuracy": true,
    "basePower": 1,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Tectonic Rage",
    "pp": 1,
    "priority": 0,
    "flags": {},
    "isZ": "groundiumz",
    "secondary": null,
    "target": "normal",
    "type": "Ground",
    "contestType": "Cool"
  },
  "teeterdance": {
    "id": "teeterdance",
    "inherit": true,
    "flags": {
      "protect": 1,
      "metronome": 1
    }
  },
  "telekinesis": {
    "id": "telekinesis",
    "num": 477,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Telekinesis",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "gravity": 1,
      "allyanim": 1,
      "metronome": 1
    },
    "volatileStatus": "telekinesis",
    "onTry": "onTry(source, target, move) {\n      if (this.field.getPseudoWeather(\"Gravity\")) {\n        this.attrLastMove(\"[still]\");\n        this.add(\"cant\", source, \"move: Gravity\", move);\n        return null;\n      }\n    }",
    "condition": {
      "duration": 3,
      "onStart": "onStart(target) {\n        if ([\"Diglett\", \"Dugtrio\", \"Palossand\", \"Sandygast\"].includes(target.baseSpecies.baseSpecies) || target.baseSpecies.name === \"Gengar-Mega\") {\n          this.add(\"-immune\", target);\n          return null;\n        }\n        if (target.volatiles[\"smackdown\"] || target.volatiles[\"ingrain\"]) return false;\n        this.add(\"-start\", target, \"Telekinesis\");\n      }",
      "onAccuracyPriority": -1,
      "onAccuracy": "onAccuracy(accuracy, target, source, move) {\n        if (move && !move.ohko) return true;\n      }",
      "onImmunity": "onImmunity(type) {\n        if (type === \"Ground\") return false;\n      }",
      "onUpdate": "onUpdate(pokemon) {\n        if (pokemon.baseSpecies.name === \"Gengar-Mega\") {\n          delete pokemon.volatiles[\"telekinesis\"];\n          this.add(\"-end\", pokemon, \"Telekinesis\", \"[silent]\");\n        }\n      }",
      "onResidualOrder": 19,
      "onEnd": "onEnd(target) {\n        this.add(\"-end\", target, \"Telekinesis\");\n      }"
    },
    "secondary": null,
    "target": "normal",
    "type": "Psychic",
    "zMove": {
      "boost": {
        "spa": 1
      }
    },
    "contestType": "Clever"
  },
  "teleport": {
    "id": "teleport",
    "num": 100,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Teleport",
    "pp": 20,
    "priority": -6,
    "flags": {
      "metronome": 1
    },
    "onTry": "onTry(source) {\n      return !!this.canSwitch(source.side);\n    }",
    "selfSwitch": true,
    "secondary": null,
    "target": "self",
    "type": "Psychic",
    "zMove": {
      "effect": "heal"
    },
    "contestType": "Cool"
  },
  "temperflare": {
    "id": "temperflare",
    "num": 915,
    "accuracy": 100,
    "basePower": 75,
    "basePowerCallback": "basePowerCallback(pokemon, target, move) {\n      if (pokemon.moveLastTurnResult === false) {\n        this.debug(\"doubling Temper Flare BP due to previous move failure\");\n        return move.basePower * 2;\n      }\n      return move.basePower;\n    }",
    "category": "Physical",
    "name": "Temper Flare",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Fire"
  },
  "terablast": {
    "id": "terablast",
    "num": 851,
    "accuracy": 100,
    "basePower": 80,
    "basePowerCallback": "basePowerCallback(pokemon, target, move) {\n      if (pokemon.terastallized === \"Stellar\") {\n        return 100;\n      }\n      return move.basePower;\n    }",
    "category": "Special",
    "name": "Tera Blast",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "mustpressure": 1
    },
    "onPrepareHit": "onPrepareHit(target, source, move) {\n      if (source.terastallized) {\n        this.attrLastMove(\"[anim] Tera Blast \" + source.teraType);\n      }\n    }",
    "onModifyType": "onModifyType(move, pokemon, target) {\n      if (pokemon.terastallized) {\n        move.type = pokemon.teraType;\n      }\n    }",
    "onModifyMove": "onModifyMove(move, pokemon) {\n      if (pokemon.terastallized && pokemon.getStat(\"atk\", false, true) > pokemon.getStat(\"spa\", false, true)) {\n        move.category = \"Physical\";\n      }\n      if (pokemon.terastallized === \"Stellar\") {\n        move.self = { boosts: { atk: -1, spa: -1 } };\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Normal"
  },
  "terastarstorm": {
    "id": "terastarstorm",
    "num": 906,
    "accuracy": 100,
    "basePower": 120,
    "category": "Special",
    "name": "Tera Starstorm",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "noassist": 1,
      "failcopycat": 1,
      "failmimic": 1,
      "nosketch": 1
    },
    "onModifyType": "onModifyType(move, pokemon) {\n      if (pokemon.species.name === \"Terapagos-Stellar\") {\n        move.type = \"Stellar\";\n        if (pokemon.terastallized && pokemon.getStat(\"atk\", false, true) > pokemon.getStat(\"spa\", false, true)) {\n          move.category = \"Physical\";\n        }\n      }\n    }",
    "onModifyMove": "onModifyMove(move, pokemon) {\n      if (pokemon.species.name === \"Terapagos-Stellar\") {\n        move.target = \"allAdjacentFoes\";\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Normal"
  },
  "terrainpulse": {
    "id": "terrainpulse",
    "num": 805,
    "accuracy": 100,
    "basePower": 50,
    "category": "Special",
    "name": "Terrain Pulse",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "pulse": 1
    },
    "onModifyType": "onModifyType(move, pokemon) {\n      if (!pokemon.isGrounded()) return;\n      switch (this.field.terrain) {\n        case \"electricterrain\":\n          move.type = \"Electric\";\n          break;\n        case \"grassyterrain\":\n          move.type = \"Grass\";\n          break;\n        case \"mistyterrain\":\n          move.type = \"Fairy\";\n          break;\n        case \"psychicterrain\":\n          move.type = \"Psychic\";\n          break;\n      }\n    }",
    "onModifyMove": "onModifyMove(move, pokemon) {\n      if (this.field.terrain && pokemon.isGrounded()) {\n        move.basePower *= 2;\n        this.debug(\"BP doubled in Terrain\");\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "zMove": {
      "basePower": 160
    },
    "maxMove": {
      "basePower": 130
    }
  },
  "thief": {
    "id": "thief",
    "inherit": true,
    "onAfterHit": "onAfterHit() {\n    }",
    "secondary": {
      "chance": 100,
      "onHit": "onHit(target, source) {\n        if (source.item || source.volatiles[\"gem\"]) {\n          return;\n        }\n        const yourItem = target.takeItem(source);\n        if (!yourItem) {\n          return;\n        }\n        if (!source.setItem(yourItem)) {\n          target.item = yourItem.id;\n          return;\n        }\n        this.add(\"-item\", source, yourItem, \"[from] move: Thief\", `[of] ${target}`);\n      }"
    }
  },
  "thousandarrows": {
    "id": "thousandarrows",
    "num": 614,
    "accuracy": 100,
    "basePower": 90,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Thousand Arrows",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "nonsky": 1
    },
    "onEffectiveness": "onEffectiveness(typeMod, target, type, move) {\n      if (move.type !== \"Ground\") return;\n      if (!target) return;\n      if (!target.runImmunity(\"Ground\")) {\n        if (target.hasType(\"Flying\")) return 0;\n      }\n    }",
    "volatileStatus": "smackdown",
    "ignoreImmunity": {
      "Ground": true
    },
    "secondary": null,
    "target": "allAdjacentFoes",
    "type": "Ground",
    "zMove": {
      "basePower": 180
    },
    "contestType": "Beautiful"
  },
  "thousandwaves": {
    "id": "thousandwaves",
    "num": 615,
    "accuracy": 100,
    "basePower": 90,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Thousand Waves",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "nonsky": 1
    },
    "onHit": "onHit(target, source, move) {\n      if (source.isActive) target.addVolatile(\"trapped\", source, move, \"trapper\");\n    }",
    "secondary": null,
    "target": "allAdjacentFoes",
    "type": "Ground",
    "contestType": "Tough"
  },
  "thrash": {
    "id": "thrash",
    "inherit": true,
    "onMoveFail": "onMoveFail(target, source, move) {\n      source.addVolatile(\"lockedmove\");\n    }",
    "onAfterMove": "onAfterMove(pokemon) {\n      if (pokemon.volatiles[\"lockedmove\"] && pokemon.volatiles[\"lockedmove\"].duration === 1) {\n        pokemon.removeVolatile(\"lockedmove\");\n      }\n    }"
  },
  "throatchop": {
    "id": "throatchop",
    "num": 675,
    "accuracy": 100,
    "basePower": 80,
    "category": "Physical",
    "name": "Throat Chop",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "condition": {
      "duration": 2,
      "onStart": "onStart(target) {\n        this.add(\"-start\", target, \"Throat Chop\", \"[silent]\");\n      }",
      "onDisableMove": "onDisableMove(pokemon) {\n        for (const moveSlot of pokemon.moveSlots) {\n          if (this.dex.moves.get(moveSlot.id).flags[\"sound\"]) {\n            pokemon.disableMove(moveSlot.id);\n          }\n        }\n      }",
      "onBeforeMovePriority": 6,
      "onBeforeMove": "onBeforeMove(pokemon, target, move) {\n        if (!move.isZ && !move.isMax && move.flags[\"sound\"]) {\n          this.add(\"cant\", pokemon, \"move: Throat Chop\");\n          return false;\n        }\n      }",
      "onModifyMove": "onModifyMove(move, pokemon, target) {\n        if (!move.isZ && !move.isMax && move.flags[\"sound\"]) {\n          this.add(\"cant\", pokemon, \"move: Throat Chop\");\n          return false;\n        }\n      }",
      "onResidualOrder": 22,
      "onEnd": "onEnd(target) {\n        this.add(\"-end\", target, \"Throat Chop\", \"[silent]\");\n      }"
    },
    "secondary": {
      "chance": 100,
      "onHit": "onHit(target) {\n        target.addVolatile(\"throatchop\");\n      }"
    },
    "target": "normal",
    "type": "Dark",
    "contestType": "Clever"
  },
  "thunder": {
    "id": "thunder",
    "num": 87,
    "accuracy": 70,
    "basePower": 110,
    "category": "Special",
    "name": "Thunder",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onModifyMove": "onModifyMove(move, pokemon, target) {\n      switch (target?.effectiveWeather()) {\n        case \"raindance\":\n        case \"primordialsea\":\n          move.accuracy = true;\n          break;\n        case \"sunnyday\":\n        case \"desolateland\":\n          move.accuracy = 50;\n          break;\n      }\n    }",
    "secondary": {
      "chance": 30,
      "status": "par"
    },
    "target": "normal",
    "type": "Electric",
    "contestType": "Cool"
  },
  "thunderbolt": {
    "id": "thunderbolt",
    "num": 85,
    "accuracy": 100,
    "basePower": 90,
    "category": "Special",
    "name": "Thunderbolt",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 10,
      "status": "par"
    },
    "target": "normal",
    "type": "Electric",
    "contestType": "Cool"
  },
  "thundercage": {
    "id": "thundercage",
    "num": 819,
    "accuracy": 90,
    "basePower": 80,
    "category": "Special",
    "name": "Thunder Cage",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "volatileStatus": "partiallytrapped",
    "secondary": null,
    "target": "normal",
    "type": "Electric"
  },
  "thunderclap": {
    "id": "thunderclap",
    "num": 909,
    "accuracy": 100,
    "basePower": 70,
    "category": "Special",
    "name": "Thunderclap",
    "pp": 5,
    "priority": 1,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onTry": "onTry(source, target) {\n      const action = this.queue.willMove(target);\n      const move = action?.choice === \"move\" ? action.move : null;\n      if (!move || move.category === \"Status\" && move.id !== \"mefirst\" || target.volatiles[\"mustrecharge\"]) {\n        return false;\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Electric",
    "contestType": "Clever"
  },
  "thunderfang": {
    "id": "thunderfang",
    "num": 422,
    "accuracy": 95,
    "basePower": 65,
    "category": "Physical",
    "name": "Thunder Fang",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "bite": 1
    },
    "secondaries": [
      {
        "chance": 10,
        "status": "par"
      },
      {
        "chance": 10,
        "volatileStatus": "flinch"
      }
    ],
    "target": "normal",
    "type": "Electric",
    "contestType": "Cool"
  },
  "thunderouskick": {
    "id": "thunderouskick",
    "num": 823,
    "accuracy": 100,
    "basePower": 90,
    "category": "Physical",
    "name": "Thunderous Kick",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1
    },
    "secondary": {
      "chance": 100,
      "boosts": {
        "def": -1
      }
    },
    "target": "normal",
    "type": "Fighting"
  },
  "thunderpunch": {
    "id": "thunderpunch",
    "num": 9,
    "accuracy": 100,
    "basePower": 75,
    "category": "Physical",
    "name": "Thunder Punch",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "punch": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 10,
      "status": "par"
    },
    "target": "normal",
    "type": "Electric",
    "contestType": "Cool"
  },
  "thundershock": {
    "id": "thundershock",
    "num": 84,
    "accuracy": 100,
    "basePower": 40,
    "category": "Special",
    "name": "Thunder Shock",
    "pp": 30,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 10,
      "status": "par"
    },
    "target": "normal",
    "type": "Electric",
    "contestType": "Cool"
  },
  "thunderwave": {
    "id": "thunderwave",
    "num": 86,
    "accuracy": 90,
    "basePower": 0,
    "category": "Status",
    "name": "Thunder Wave",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "metronome": 1
    },
    "status": "par",
    "ignoreImmunity": false,
    "secondary": null,
    "target": "normal",
    "type": "Electric",
    "zMove": {
      "boost": {
        "spd": 1
      }
    },
    "contestType": "Cool"
  },
  "tickle": {
    "id": "tickle",
    "inherit": true,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "bypasssub": 1,
      "metronome": 1
    }
  },
  "tidyup": {
    "id": "tidyup",
    "num": 882,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Tidy Up",
    "pp": 10,
    "priority": 0,
    "flags": {},
    "onHit": "onHit(pokemon) {\n      let success = false;\n      for (const active of this.getAllActive()) {\n        if (active.removeVolatile(\"substitute\")) success = true;\n      }\n      const removeAll = [\"spikes\", \"toxicspikes\", \"stealthrock\", \"stickyweb\", \"gmaxsteelsurge\"];\n      const sides = [pokemon.side, ...pokemon.side.foeSidesWithConditions()];\n      for (const side of sides) {\n        for (const sideCondition of removeAll) {\n          if (side.removeSideCondition(sideCondition)) {\n            this.add(\"-sideend\", side, this.dex.conditions.get(sideCondition).name);\n            success = true;\n          }\n        }\n      }\n      if (success) this.add(\"-activate\", pokemon, \"move: Tidy Up\");\n      return !!this.boost({ atk: 1, spe: 1 }, pokemon, pokemon, null, false, true) || success;\n    }",
    "secondary": null,
    "target": "self",
    "type": "Normal"
  },
  "topsyturvy": {
    "id": "topsyturvy",
    "num": 576,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Topsy-Turvy",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "allyanim": 1,
      "metronome": 1
    },
    "onHit": "onHit(target) {\n      let success = false;\n      let i;\n      for (i in target.boosts) {\n        if (target.boosts[i] === 0) continue;\n        target.boosts[i] = -target.boosts[i];\n        success = true;\n      }\n      if (!success) return false;\n      this.add(\"-invertboost\", target, \"[from] move: Topsy-Turvy\");\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Dark",
    "zMove": {
      "boost": {
        "atk": 1
      }
    },
    "contestType": "Clever"
  },
  "torchsong": {
    "id": "torchsong",
    "num": 871,
    "accuracy": 100,
    "basePower": 80,
    "category": "Special",
    "name": "Torch Song",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "sound": 1,
      "bypasssub": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 100,
      "self": {
        "boosts": {
          "spa": 1
        }
      }
    },
    "target": "normal",
    "type": "Fire",
    "contestType": "Beautiful"
  },
  "torment": {
    "id": "torment",
    "num": 259,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Torment",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "bypasssub": 1,
      "metronome": 1
    },
    "volatileStatus": "torment",
    "condition": {
      "noCopy": true,
      "onStart": "onStart(pokemon, source, effect) {\n        if (pokemon.volatiles[\"dynamax\"]) {\n          delete pokemon.volatiles[\"torment\"];\n          return false;\n        }\n        if (effect?.id === \"gmaxmeltdown\") this.effectState.duration = 3;\n        this.add(\"-start\", pokemon, \"Torment\");\n      }",
      "onEnd": "onEnd(pokemon) {\n        this.add(\"-end\", pokemon, \"Torment\");\n      }",
      "onDisableMove": "onDisableMove(pokemon) {\n        if (pokemon.lastMove && pokemon.lastMove.id !== \"struggle\") pokemon.disableMove(pokemon.lastMove.id);\n      }"
    },
    "secondary": null,
    "target": "normal",
    "type": "Dark",
    "zMove": {
      "boost": {
        "def": 1
      }
    },
    "contestType": "Tough"
  },
  "toxic": {
    "id": "toxic",
    "inherit": true,
    "ignoreImmunity": false
  },
  "toxicspikes": {
    "id": "toxicspikes",
    "num": 390,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Toxic Spikes",
    "pp": 20,
    "priority": 0,
    "flags": {
      "reflectable": 1,
      "nonsky": 1,
      "metronome": 1,
      "mustpressure": 1
    },
    "sideCondition": "toxicspikes",
    "condition": {
      "onSideStart": "onSideStart(side) {\n        this.add(\"-sidestart\", side, \"move: Toxic Spikes\");\n        this.effectState.layers = 1;\n      }",
      "onSideRestart": "onSideRestart(side) {\n        if (this.effectState.layers >= 2) return false;\n        this.add(\"-sidestart\", side, \"move: Toxic Spikes\");\n        this.effectState.layers++;\n      }",
      "onSwitchIn": "onSwitchIn(pokemon) {\n        if (!pokemon.isGrounded()) return;\n        if (pokemon.hasType(\"Poison\")) {\n          this.add(\"-sideend\", pokemon.side, \"move: Toxic Spikes\", `[of] ${pokemon}`);\n          pokemon.side.removeSideCondition(\"toxicspikes\");\n        } else if (pokemon.hasType(\"Steel\") || pokemon.hasItem(\"heavydutyboots\")) {\n        } else if (this.effectState.layers >= 2) {\n          pokemon.trySetStatus(\"tox\", pokemon.side.foe.active[0]);\n        } else {\n          pokemon.trySetStatus(\"psn\", pokemon.side.foe.active[0]);\n        }\n      }"
    },
    "secondary": null,
    "target": "foeSide",
    "type": "Poison",
    "zMove": {
      "boost": {
        "def": 1
      }
    },
    "contestType": "Clever"
  },
  "toxicthread": {
    "id": "toxicthread",
    "num": 672,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Toxic Thread",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "metronome": 1
    },
    "status": "psn",
    "boosts": {
      "spe": -1
    },
    "secondary": null,
    "target": "normal",
    "type": "Poison",
    "zMove": {
      "boost": {
        "spe": 1
      }
    },
    "contestType": "Tough"
  },
  "trailblaze": {
    "id": "trailblaze",
    "num": 885,
    "accuracy": 100,
    "basePower": 50,
    "category": "Physical",
    "name": "Trailblaze",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1
    },
    "secondary": {
      "chance": 100,
      "self": {
        "boosts": {
          "spe": 1
        }
      }
    },
    "target": "normal",
    "type": "Grass",
    "contestType": "Cool"
  },
  "transform": {
    "id": "transform",
    "inherit": true,
    "flags": {
      "bypasssub": 1,
      "metronome": 1,
      "failencore": 1,
      "nosketch": 1
    }
  },
  "triattack": {
    "id": "triattack",
    "inherit": true,
    "onHit": "onHit(target, source, move) {\n      move.statusRoll = [\"par\", \"frz\", \"brn\"][this.random(3)];\n    }",
    "secondary": {
      "chance": 20,
      "onHit": "onHit(target, source, move) {\n        if (move.statusRoll) {\n          target.trySetStatus(move.statusRoll, source);\n        }\n      }"
    }
  },
  "trick": {
    "id": "trick",
    "num": 271,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Trick",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "allyanim": 1,
      "noassist": 1,
      "failcopycat": 1
    },
    "onTryImmunity": "onTryImmunity(target) {\n      return !target.hasAbility(\"stickyhold\");\n    }",
    "onHit": "onHit(target, source, move) {\n      const yourItem = target.takeItem(source);\n      const myItem = source.takeItem();\n      if (target.item || source.item || !yourItem && !myItem) {\n        if (yourItem) target.item = yourItem.id;\n        if (myItem) source.item = myItem.id;\n        return false;\n      }\n      if (myItem && !this.singleEvent(\"TakeItem\", myItem, source.itemState, target, source, move, myItem) || yourItem && !this.singleEvent(\"TakeItem\", yourItem, target.itemState, source, target, move, yourItem)) {\n        if (yourItem) target.item = yourItem.id;\n        if (myItem) source.item = myItem.id;\n        return false;\n      }\n      this.add(\"-activate\", source, \"move: Trick\", `[of] ${target}`);\n      if (myItem) {\n        target.setItem(myItem);\n        this.add(\"-item\", target, myItem, \"[from] move: Trick\");\n      } else {\n        this.add(\"-enditem\", target, yourItem, \"[silent]\", \"[from] move: Trick\");\n      }\n      if (yourItem) {\n        source.setItem(yourItem);\n        this.add(\"-item\", source, yourItem, \"[from] move: Trick\");\n      } else {\n        this.add(\"-enditem\", source, myItem, \"[silent]\", \"[from] move: Trick\");\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Psychic",
    "zMove": {
      "boost": {
        "spe": 2
      }
    },
    "contestType": "Clever"
  },
  "trickortreat": {
    "id": "trickortreat",
    "num": 567,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Trick-or-Treat",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "allyanim": 1,
      "metronome": 1
    },
    "onHit": "onHit(target) {\n      if (target.hasType(\"Ghost\")) return false;\n      if (!target.addType(\"Ghost\")) return false;\n      this.add(\"-start\", target, \"typeadd\", \"Ghost\", \"[from] move: Trick-or-Treat\");\n      if (target.side.active.length === 2 && target.position === 1) {\n        const action = this.queue.willMove(target);\n        if (action && action.move.id === \"curse\") {\n          action.targetLoc = -1;\n        }\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Ghost",
    "zMove": {
      "boost": {
        "atk": 1,
        "def": 1,
        "spa": 1,
        "spd": 1,
        "spe": 1
      }
    },
    "contestType": "Cute"
  },
  "trickroom": {
    "id": "trickroom",
    "num": 433,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Trick Room",
    "pp": 5,
    "priority": -7,
    "flags": {
      "mirror": 1,
      "metronome": 1
    },
    "pseudoWeather": "trickroom",
    "condition": {
      "duration": 5,
      "durationCallback": "durationCallback(source, effect) {\n        if (source?.hasAbility(\"persistent\")) {\n          this.add(\"-activate\", source, \"ability: Persistent\", \"[move] Trick Room\");\n          return 7;\n        }\n        return 5;\n      }",
      "onFieldStart": "onFieldStart(target, source) {\n        if (source?.hasAbility(\"persistent\")) {\n          this.add(\"-fieldstart\", \"move: Trick Room\", `[of] ${source}`, \"[persistent]\");\n        } else {\n          this.add(\"-fieldstart\", \"move: Trick Room\", `[of] ${source}`);\n        }\n      }",
      "onFieldRestart": "onFieldRestart(target, source) {\n        this.field.removePseudoWeather(\"trickroom\");\n      }",
      "onFieldResidualOrder": 27,
      "onFieldResidualSubOrder": 1,
      "onFieldEnd": "onFieldEnd() {\n        this.add(\"-fieldend\", \"move: Trick Room\");\n      }"
    },
    "secondary": null,
    "target": "all",
    "type": "Psychic",
    "zMove": {
      "boost": {
        "accuracy": 1
      }
    },
    "contestType": "Clever"
  },
  "triplearrows": {
    "id": "triplearrows",
    "num": 843,
    "accuracy": 100,
    "basePower": 90,
    "category": "Physical",
    "name": "Triple Arrows",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "critRatio": 2,
    "secondaries": [
      {
        "chance": 50,
        "boosts": {
          "def": -1
        }
      },
      {
        "chance": 30,
        "volatileStatus": "flinch"
      }
    ],
    "target": "normal",
    "type": "Fighting"
  },
  "tripleaxel": {
    "id": "tripleaxel",
    "num": 813,
    "accuracy": 90,
    "basePower": 20,
    "basePowerCallback": "basePowerCallback(pokemon, target, move) {\n      return 20 * move.hit;\n    }",
    "category": "Physical",
    "name": "Triple Axel",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "multihit": 3,
    "multiaccuracy": true,
    "secondary": null,
    "target": "normal",
    "type": "Ice",
    "zMove": {
      "basePower": 120
    },
    "maxMove": {
      "basePower": 140
    }
  },
  "tripledive": {
    "id": "tripledive",
    "num": 865,
    "accuracy": 95,
    "basePower": 30,
    "category": "Physical",
    "name": "Triple Dive",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "multihit": 3,
    "secondary": null,
    "target": "normal",
    "type": "Water"
  },
  "triplekick": {
    "id": "triplekick",
    "inherit": true,
    "multiaccuracy": false,
    "multihit": [
      1,
      3
    ]
  },
  "tropkick": {
    "id": "tropkick",
    "num": 688,
    "accuracy": 100,
    "basePower": 70,
    "category": "Physical",
    "name": "Trop Kick",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 100,
      "boosts": {
        "atk": -1
      }
    },
    "target": "normal",
    "type": "Grass",
    "contestType": "Cute"
  },
  "trumpcard": {
    "id": "trumpcard",
    "num": 376,
    "accuracy": true,
    "basePower": 0,
    "basePowerCallback": "basePowerCallback(source, target, move) {\n      const callerMoveId = move.sourceEffect || move.id;\n      const moveSlot = callerMoveId === \"instruct\" ? source.getMoveData(move.id) : source.getMoveData(callerMoveId);\n      let bp;\n      if (!moveSlot) {\n        bp = 40;\n      } else {\n        switch (moveSlot.pp) {\n          case 0:\n            bp = 200;\n            break;\n          case 1:\n            bp = 80;\n            break;\n          case 2:\n            bp = 60;\n            break;\n          case 3:\n            bp = 50;\n            break;\n          default:\n            bp = 40;\n            break;\n        }\n      }\n      this.debug(`BP: ${bp}`);\n      return bp;\n    }",
    "category": "Special",
    "isNonstandard": "Past",
    "name": "Trump Card",
    "pp": 5,
    "noPPBoosts": true,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "zMove": {
      "basePower": 160
    },
    "maxMove": {
      "basePower": 130
    },
    "contestType": "Cool"
  },
  "twinbeam": {
    "id": "twinbeam",
    "num": 888,
    "accuracy": 100,
    "basePower": 40,
    "category": "Special",
    "name": "Twin Beam",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "multihit": 2,
    "secondary": null,
    "target": "normal",
    "type": "Psychic",
    "contestType": "Cool"
  },
  "twineedle": {
    "id": "twineedle",
    "num": 41,
    "accuracy": 100,
    "basePower": 25,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Twineedle",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "multihit": 2,
    "secondary": {
      "chance": 20,
      "status": "psn"
    },
    "target": "normal",
    "type": "Bug",
    "maxMove": {
      "basePower": 100
    },
    "contestType": "Cool"
  },
  "twinkletackle": {
    "id": "twinkletackle",
    "num": 656,
    "accuracy": true,
    "basePower": 1,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Twinkle Tackle",
    "pp": 1,
    "priority": 0,
    "flags": {},
    "isZ": "fairiumz",
    "secondary": null,
    "target": "normal",
    "type": "Fairy",
    "contestType": "Cool"
  },
  "twister": {
    "id": "twister",
    "num": 239,
    "accuracy": 100,
    "basePower": 40,
    "category": "Special",
    "name": "Twister",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "wind": 1
    },
    "secondary": {
      "chance": 20,
      "volatileStatus": "flinch"
    },
    "target": "allAdjacentFoes",
    "type": "Dragon",
    "contestType": "Cool"
  },
  "uturn": {
    "id": "uturn",
    "num": 369,
    "accuracy": 100,
    "basePower": 70,
    "category": "Physical",
    "name": "U-turn",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "selfSwitch": true,
    "secondary": null,
    "target": "normal",
    "type": "Bug",
    "contestType": "Cute"
  },
  "upperhand": {
    "id": "upperhand",
    "num": 918,
    "accuracy": 100,
    "basePower": 65,
    "category": "Physical",
    "name": "Upper Hand",
    "pp": 15,
    "priority": 3,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onTry": "onTry(source, target) {\n      const action = this.queue.willMove(target);\n      const move = action?.choice === \"move\" ? action.move : null;\n      if (!move || move.priority <= 0.1 || move.category === \"Status\") {\n        return false;\n      }\n    }",
    "secondary": {
      "chance": 100,
      "volatileStatus": "flinch"
    },
    "target": "normal",
    "type": "Fighting"
  },
  "uproar": {
    "id": "uproar",
    "inherit": true,
    "condition": {
      "onStart": "onStart(target) {\n        this.add(\"-start\", target, \"Uproar\");\n        this.effectState.duration = this.random(2, 6);\n      }",
      "onResidual": "onResidual(target) {\n        if (target.volatiles[\"throatchop\"]) {\n          target.removeVolatile(\"uproar\");\n          return;\n        }\n        if (target.lastMove && target.lastMove.id === \"struggle\") {\n          delete target.volatiles[\"uproar\"];\n        }\n        this.add(\"-start\", target, \"Uproar\", \"[upkeep]\");\n      }",
      "onResidualOrder": 10,
      "onResidualSubOrder": 11,
      "onEnd": "onEnd(target) {\n        this.add(\"-end\", target, \"Uproar\");\n      }",
      "onLockMove": "uproar",
      "onAnySetStatus": "onAnySetStatus(status, pokemon) {\n        if (status.id === \"slp\") {\n          if (pokemon === this.effectState.target) {\n            this.add(\"-fail\", pokemon, \"slp\", \"[from] Uproar\", \"[msg]\");\n          } else {\n            this.add(\"-fail\", pokemon, \"slp\", \"[from] Uproar\");\n          }\n          return null;\n        }\n      }"
    }
  },
  "vacuumwave": {
    "id": "vacuumwave",
    "num": 410,
    "accuracy": 100,
    "basePower": 40,
    "category": "Special",
    "name": "Vacuum Wave",
    "pp": 30,
    "priority": 1,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Fighting",
    "contestType": "Cool"
  },
  "vcreate": {
    "id": "vcreate",
    "num": 557,
    "accuracy": 95,
    "basePower": 180,
    "category": "Physical",
    "isNonstandard": "Unobtainable",
    "name": "V-create",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1
    },
    "self": {
      "boosts": {
        "spe": -1,
        "def": -1,
        "spd": -1
      }
    },
    "secondary": null,
    "target": "normal",
    "type": "Fire",
    "zMove": {
      "basePower": 220
    },
    "contestType": "Cool"
  },
  "veeveevolley": {
    "id": "veeveevolley",
    "num": 741,
    "accuracy": true,
    "basePower": 0,
    "basePowerCallback": "basePowerCallback(pokemon) {\n      const bp = Math.floor(pokemon.happiness * 10 / 25) || 1;\n      this.debug(`BP: ${bp}`);\n      return bp;\n    }",
    "category": "Physical",
    "isNonstandard": "LGPE",
    "name": "Veevee Volley",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Cute"
  },
  "venomdrench": {
    "id": "venomdrench",
    "num": 599,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Venom Drench",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onHit": "onHit(target, source, move) {\n      if (target.status === \"psn\" || target.status === \"tox\") {\n        return !!this.boost({ atk: -1, spa: -1, spe: -1 }, target, source, move);\n      }\n      return false;\n    }",
    "secondary": null,
    "target": "allAdjacentFoes",
    "type": "Poison",
    "zMove": {
      "boost": {
        "def": 1
      }
    },
    "contestType": "Clever"
  },
  "venoshock": {
    "id": "venoshock",
    "num": 474,
    "accuracy": 100,
    "basePower": 65,
    "category": "Special",
    "name": "Venoshock",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onBasePower": "onBasePower(basePower, pokemon, target) {\n      if (target.status === \"psn\" || target.status === \"tox\") {\n        return this.chainModify(2);\n      }\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Poison",
    "contestType": "Beautiful"
  },
  "victorydance": {
    "id": "victorydance",
    "num": 837,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Victory Dance",
    "pp": 10,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "dance": 1,
      "metronome": 1
    },
    "boosts": {
      "atk": 1,
      "def": 1,
      "spe": 1
    },
    "secondary": null,
    "target": "self",
    "type": "Fighting"
  },
  "vinewhip": {
    "id": "vinewhip",
    "inherit": true,
    "pp": 10
  },
  "visegrip": {
    "id": "visegrip",
    "num": 11,
    "accuracy": 100,
    "basePower": 55,
    "category": "Physical",
    "name": "Vise Grip",
    "pp": 30,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Tough"
  },
  "vitalthrow": {
    "id": "vitalthrow",
    "num": 233,
    "accuracy": true,
    "basePower": 70,
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Vital Throw",
    "pp": 10,
    "priority": -1,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Fighting",
    "contestType": "Cool"
  },
  "voltswitch": {
    "id": "voltswitch",
    "num": 521,
    "accuracy": 100,
    "basePower": 70,
    "category": "Special",
    "name": "Volt Switch",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "selfSwitch": true,
    "secondary": null,
    "target": "normal",
    "type": "Electric",
    "contestType": "Cool"
  },
  "volttackle": {
    "id": "volttackle",
    "inherit": true,
    "secondary": null
  },
  "wakeupslap": {
    "id": "wakeupslap",
    "num": 358,
    "accuracy": 100,
    "basePower": 70,
    "basePowerCallback": "basePowerCallback(pokemon, target, move) {\n      if (target.status === \"slp\" || target.hasAbility(\"comatose\")) {\n        this.debug(\"BP doubled on sleeping target\");\n        return move.basePower * 2;\n      }\n      return move.basePower;\n    }",
    "category": "Physical",
    "isNonstandard": "Past",
    "name": "Wake-Up Slap",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "onHit": "onHit(target) {\n      if (target.status === \"slp\") target.cureStatus();\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Fighting",
    "contestType": "Tough"
  },
  "waterfall": {
    "id": "waterfall",
    "inherit": true,
    "secondary": null
  },
  "watergun": {
    "id": "watergun",
    "num": 55,
    "accuracy": 100,
    "basePower": 40,
    "category": "Special",
    "name": "Water Gun",
    "pp": 25,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Water",
    "contestType": "Cute"
  },
  "waterpledge": {
    "id": "waterpledge",
    "num": 518,
    "accuracy": 100,
    "basePower": 80,
    "basePowerCallback": "basePowerCallback(target, source, move) {\n      if ([\"firepledge\", \"grasspledge\"].includes(move.sourceEffect)) {\n        this.add(\"-combine\");\n        return 150;\n      }\n      return move.basePower;\n    }",
    "category": "Special",
    "name": "Water Pledge",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "nonsky": 1,
      "metronome": 1,
      "pledgecombo": 1
    },
    "onPrepareHit": "onPrepareHit(target, source, move) {\n      for (const action of this.queue) {\n        if (action.choice !== \"move\") continue;\n        const otherMove = action.move;\n        const otherMoveUser = action.pokemon;\n        if (!otherMove || !action.pokemon || !otherMoveUser.isActive || otherMoveUser.fainted || action.maxMove || action.zmove) {\n          continue;\n        }\n        if (otherMoveUser.isAlly(source) && [\"firepledge\", \"grasspledge\"].includes(otherMove.id)) {\n          this.queue.prioritizeAction(action, move);\n          this.add(\"-waiting\", source, otherMoveUser);\n          return null;\n        }\n      }\n    }",
    "onModifyMove": "onModifyMove(move) {\n      if (move.sourceEffect === \"grasspledge\") {\n        move.type = \"Grass\";\n        move.forceSTAB = true;\n        move.sideCondition = \"grasspledge\";\n      }\n      if (move.sourceEffect === \"firepledge\") {\n        move.type = \"Water\";\n        move.forceSTAB = true;\n        move.self = { sideCondition: \"waterpledge\" };\n      }\n    }",
    "condition": {
      "duration": 4,
      "onSideStart": "onSideStart(targetSide) {\n        this.add(\"-sidestart\", targetSide, \"Water Pledge\");\n      }",
      "onSideResidualOrder": 26,
      "onSideResidualSubOrder": 7,
      "onSideEnd": "onSideEnd(targetSide) {\n        this.add(\"-sideend\", targetSide, \"Water Pledge\");\n      }",
      "onModifyMove": "onModifyMove(move, pokemon) {\n        if (move.secondaries && move.id !== \"secretpower\") {\n          this.debug(\"doubling secondary chance\");\n          for (const secondary of move.secondaries) {\n            if (pokemon.hasAbility(\"serenegrace\") && secondary.volatileStatus === \"flinch\") continue;\n            if (secondary.chance) secondary.chance *= 2;\n          }\n          if (move.self?.chance) move.self.chance *= 2;\n        }\n      }"
    },
    "secondary": null,
    "target": "normal",
    "type": "Water",
    "contestType": "Beautiful"
  },
  "waterpulse": {
    "id": "waterpulse",
    "num": 352,
    "accuracy": 100,
    "basePower": 60,
    "category": "Special",
    "name": "Water Pulse",
    "pp": 20,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "distance": 1,
      "metronome": 1,
      "pulse": 1
    },
    "secondary": {
      "chance": 20,
      "volatileStatus": "confusion"
    },
    "target": "any",
    "type": "Water",
    "contestType": "Beautiful"
  },
  "watershuriken": {
    "id": "watershuriken",
    "num": 594,
    "accuracy": 100,
    "basePower": 15,
    "basePowerCallback": "basePowerCallback(pokemon, target, move) {\n      if (pokemon.species.name === \"Greninja-Ash\" && pokemon.hasAbility(\"battlebond\") && !pokemon.transformed) {\n        return move.basePower + 5;\n      }\n      return move.basePower;\n    }",
    "category": "Special",
    "name": "Water Shuriken",
    "pp": 20,
    "priority": 1,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "multihit": [
      2,
      5
    ],
    "secondary": null,
    "target": "normal",
    "type": "Water",
    "contestType": "Cool"
  },
  "watersport": {
    "id": "watersport",
    "num": 346,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "isNonstandard": "Past",
    "name": "Water Sport",
    "pp": 15,
    "priority": 0,
    "flags": {
      "nonsky": 1,
      "metronome": 1
    },
    "pseudoWeather": "watersport",
    "condition": {
      "duration": 5,
      "onFieldStart": "onFieldStart(field, source) {\n        this.add(\"-fieldstart\", \"move: Water Sport\", `[of] ${source}`);\n      }",
      "onBasePowerPriority": 1,
      "onBasePower": "onBasePower(basePower, attacker, defender, move) {\n        if (move.type === \"Fire\") {\n          this.debug(\"water sport weaken\");\n          return this.chainModify([1352, 4096]);\n        }\n      }",
      "onFieldResidualOrder": 27,
      "onFieldResidualSubOrder": 3,
      "onFieldEnd": "onFieldEnd() {\n        this.add(\"-fieldend\", \"move: Water Sport\");\n      }"
    },
    "secondary": null,
    "target": "all",
    "type": "Water",
    "zMove": {
      "boost": {
        "spd": 1
      }
    },
    "contestType": "Cute"
  },
  "waterspout": {
    "id": "waterspout",
    "num": 323,
    "accuracy": 100,
    "basePower": 150,
    "basePowerCallback": "basePowerCallback(pokemon, target, move) {\n      const bp = move.basePower * pokemon.hp / pokemon.maxhp;\n      this.debug(`BP: ${bp}`);\n      return bp;\n    }",
    "category": "Special",
    "name": "Water Spout",
    "pp": 5,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "allAdjacentFoes",
    "type": "Water",
    "contestType": "Beautiful"
  },
  "wavecrash": {
    "id": "wavecrash",
    "num": 834,
    "accuracy": 100,
    "basePower": 120,
    "category": "Physical",
    "name": "Wave Crash",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "recoil": [
      33,
      100
    ],
    "secondary": null,
    "target": "normal",
    "type": "Water"
  },
  "weatherball": {
    "id": "weatherball",
    "inherit": true,
    "onModifyMove": "onModifyMove(move) {\n      switch (this.field.effectiveWeather()) {\n        case \"sunnyday\":\n          move.type = \"Fire\";\n          move.category = \"Special\";\n          break;\n        case \"raindance\":\n          move.type = \"Water\";\n          move.category = \"Special\";\n          break;\n        case \"sandstorm\":\n          move.type = \"Rock\";\n          break;\n        case \"hail\":\n          move.type = \"Ice\";\n          move.category = \"Special\";\n          break;\n      }\n      if (this.field.effectiveWeather()) move.basePower *= 2;\n    }"
  },
  "whirlpool": {
    "id": "whirlpool",
    "num": 250,
    "accuracy": 85,
    "basePower": 35,
    "category": "Special",
    "name": "Whirlpool",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "volatileStatus": "partiallytrapped",
    "secondary": null,
    "target": "normal",
    "type": "Water",
    "contestType": "Beautiful"
  },
  "whirlwind": {
    "id": "whirlwind",
    "inherit": true,
    "onTryHit": "onTryHit() {\n      for (const action of this.queue) {\n        if (action.choice === \"move\" || action.choice === \"switch\") return false;\n      }\n    }",
    "priority": -1
  },
  "wickedblow": {
    "id": "wickedblow",
    "num": 817,
    "accuracy": 100,
    "basePower": 75,
    "category": "Physical",
    "name": "Wicked Blow",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "punch": 1
    },
    "willCrit": true,
    "secondary": null,
    "target": "normal",
    "type": "Dark"
  },
  "wickedtorque": {
    "id": "wickedtorque",
    "num": 897,
    "accuracy": 100,
    "basePower": 80,
    "category": "Physical",
    "isNonstandard": "Unobtainable",
    "name": "Wicked Torque",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "failencore": 1,
      "failmefirst": 1,
      "nosleeptalk": 1,
      "noassist": 1,
      "failcopycat": 1,
      "failmimic": 1,
      "failinstruct": 1,
      "nosketch": 1
    },
    "secondary": {
      "chance": 10,
      "status": "slp"
    },
    "target": "normal",
    "type": "Dark"
  },
  "wideguard": {
    "id": "wideguard",
    "num": 469,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Wide Guard",
    "pp": 10,
    "priority": 3,
    "flags": {
      "snatch": 1
    },
    "sideCondition": "wideguard",
    "onTry": "onTry() {\n      return !!this.queue.willAct();\n    }",
    "onHitSide": "onHitSide(side, source) {\n      source.addVolatile(\"stall\");\n    }",
    "condition": {
      "duration": 1,
      "onSideStart": "onSideStart(target, source) {\n        this.add(\"-singleturn\", source, \"Wide Guard\");\n      }",
      "onTryHitPriority": 4,
      "onTryHit": "onTryHit(target, source, move) {\n        if (move?.target !== \"allAdjacent\" && move.target !== \"allAdjacentFoes\") {\n          return;\n        }\n        if (move.isZ || move.isMax) {\n          if ([\"gmaxoneblow\", \"gmaxrapidflow\"].includes(move.id)) return;\n          target.getMoveHitData(move).zBrokeProtect = true;\n          return;\n        }\n        this.add(\"-activate\", target, \"move: Wide Guard\");\n        const lockedmove = source.getVolatile(\"lockedmove\");\n        if (lockedmove) {\n          if (source.volatiles[\"lockedmove\"].duration === 2) {\n            delete source.volatiles[\"lockedmove\"];\n          }\n        }\n        return this.NOT_FAIL;\n      }"
    },
    "secondary": null,
    "target": "allySide",
    "type": "Rock",
    "zMove": {
      "boost": {
        "def": 1
      }
    },
    "contestType": "Tough"
  },
  "wildboltstorm": {
    "id": "wildboltstorm",
    "num": 847,
    "accuracy": 80,
    "basePower": 100,
    "category": "Special",
    "name": "Wildbolt Storm",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "wind": 1
    },
    "onModifyMove": "onModifyMove(move, pokemon, target) {\n      if (target && [\"raindance\", \"primordialsea\"].includes(target.effectiveWeather())) {\n        move.accuracy = true;\n      }\n    }",
    "secondary": {
      "chance": 20,
      "status": "par"
    },
    "target": "allAdjacentFoes",
    "type": "Electric"
  },
  "wildcharge": {
    "id": "wildcharge",
    "num": 528,
    "accuracy": 100,
    "basePower": 90,
    "category": "Physical",
    "name": "Wild Charge",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "recoil": [
      1,
      4
    ],
    "secondary": null,
    "target": "normal",
    "type": "Electric",
    "contestType": "Tough"
  },
  "willowisp": {
    "id": "willowisp",
    "num": 261,
    "accuracy": 85,
    "basePower": 0,
    "category": "Status",
    "name": "Will-O-Wisp",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "metronome": 1
    },
    "status": "brn",
    "secondary": null,
    "target": "normal",
    "type": "Fire",
    "zMove": {
      "boost": {
        "atk": 1
      }
    },
    "contestType": "Beautiful"
  },
  "wingattack": {
    "id": "wingattack",
    "num": 17,
    "accuracy": 100,
    "basePower": 60,
    "category": "Physical",
    "name": "Wing Attack",
    "pp": 35,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "distance": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "any",
    "type": "Flying",
    "contestType": "Cool"
  },
  "wish": {
    "id": "wish",
    "num": 273,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Wish",
    "pp": 10,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "heal": 1,
      "metronome": 1
    },
    "slotCondition": "Wish",
    "condition": {
      "onStart": "onStart(pokemon, source) {\n        this.effectState.hp = source.maxhp / 2;\n        this.effectState.startingTurn = this.getOverflowedTurnCount();\n        if (this.effectState.startingTurn === 255) {\n          this.hint(`In Gen 8+, Wish will never resolve when used on the ${this.turn}th turn.`);\n        }\n      }",
      "onResidualOrder": 4,
      "onResidual": "onResidual(target) {\n        if (this.getOverflowedTurnCount() <= this.effectState.startingTurn) return;\n        target.side.removeSlotCondition(this.getAtSlot(this.effectState.sourceSlot), \"wish\");\n      }",
      "onEnd": "onEnd(target) {\n        if (target && !target.fainted) {\n          const damage = this.heal(this.effectState.hp, target, target);\n          if (damage) {\n            this.add(\"-heal\", target, target.getHealth, \"[from] move: Wish\", \"[wisher] \" + this.effectState.source.name);\n          }\n        }\n      }"
    },
    "secondary": null,
    "target": "self",
    "type": "Normal",
    "zMove": {
      "boost": {
        "spd": 1
      }
    },
    "contestType": "Cute"
  },
  "withdraw": {
    "id": "withdraw",
    "num": 110,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Withdraw",
    "pp": 40,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "boosts": {
      "def": 1
    },
    "secondary": null,
    "target": "self",
    "type": "Water",
    "zMove": {
      "boost": {
        "def": 1
      }
    },
    "contestType": "Cute"
  },
  "wonderroom": {
    "id": "wonderroom",
    "num": 472,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Wonder Room",
    "pp": 10,
    "priority": 0,
    "flags": {
      "mirror": 1,
      "metronome": 1
    },
    "pseudoWeather": "wonderroom",
    "condition": {
      "duration": 5,
      "durationCallback": "durationCallback(source, effect) {\n        if (source?.hasAbility(\"persistent\")) {\n          this.add(\"-activate\", source, \"ability: Persistent\", \"[move] Wonder Room\");\n          return 7;\n        }\n        return 5;\n      }",
      "onModifyMove": "onModifyMove(move, source, target) {\n        if (!move.overrideOffensiveStat) return;\n        const statAndBoosts = move.overrideOffensiveStat;\n        if (![\"def\", \"spd\"].includes(statAndBoosts)) return;\n        move.overrideOffensiveStat = statAndBoosts === \"def\" ? \"spd\" : \"def\";\n        this.hint(`${move.name} uses ${statAndBoosts === \"def\" ? \"\" : \"Sp. \"}Def boosts when Wonder Room is active.`);\n      }",
      "onFieldStart": "onFieldStart(field, source) {\n        if (source?.hasAbility(\"persistent\")) {\n          this.add(\"-fieldstart\", \"move: Wonder Room\", `[of] ${source}`, \"[persistent]\");\n        } else {\n          this.add(\"-fieldstart\", \"move: Wonder Room\", `[of] ${source}`);\n        }\n      }",
      "onFieldRestart": "onFieldRestart(target, source) {\n        this.field.removePseudoWeather(\"wonderroom\");\n      }",
      "onFieldResidualOrder": 27,
      "onFieldResidualSubOrder": 5,
      "onFieldEnd": "onFieldEnd() {\n        this.add(\"-fieldend\", \"move: Wonder Room\");\n      }"
    },
    "secondary": null,
    "target": "all",
    "type": "Psychic",
    "zMove": {
      "boost": {
        "spd": 1
      }
    },
    "contestType": "Clever"
  },
  "woodhammer": {
    "id": "woodhammer",
    "num": 452,
    "accuracy": 100,
    "basePower": 120,
    "category": "Physical",
    "name": "Wood Hammer",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "recoil": [
      33,
      100
    ],
    "secondary": null,
    "target": "normal",
    "type": "Grass",
    "contestType": "Tough"
  },
  "workup": {
    "id": "workup",
    "num": 526,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Work Up",
    "pp": 30,
    "priority": 0,
    "flags": {
      "snatch": 1,
      "metronome": 1
    },
    "boosts": {
      "atk": 1,
      "spa": 1
    },
    "secondary": null,
    "target": "self",
    "type": "Normal",
    "zMove": {
      "boost": {
        "atk": 1
      }
    },
    "contestType": "Tough"
  },
  "worryseed": {
    "id": "worryseed",
    "num": 388,
    "accuracy": 100,
    "basePower": 0,
    "category": "Status",
    "name": "Worry Seed",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "allyanim": 1,
      "metronome": 1
    },
    "onTryImmunity": "onTryImmunity(target) {\n      if (target.ability === \"truant\" || target.ability === \"insomnia\") {\n        return false;\n      }\n    }",
    "onTryHit": "onTryHit(target) {\n      if (target.getAbility().flags[\"cantsuppress\"]) {\n        return false;\n      }\n    }",
    "onHit": "onHit(pokemon) {\n      const oldAbility = pokemon.setAbility(\"insomnia\");\n      if (oldAbility) {\n        this.add(\"-ability\", pokemon, \"Insomnia\", \"[from] move: Worry Seed\");\n        if (pokemon.status === \"slp\") {\n          pokemon.cureStatus();\n        }\n        return;\n      }\n      return oldAbility;\n    }",
    "secondary": null,
    "target": "normal",
    "type": "Grass",
    "zMove": {
      "boost": {
        "spe": 1
      }
    },
    "contestType": "Clever"
  },
  "wrap": {
    "id": "wrap",
    "num": 35,
    "accuracy": 90,
    "basePower": 15,
    "category": "Physical",
    "name": "Wrap",
    "pp": 20,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "volatileStatus": "partiallytrapped",
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "contestType": "Tough"
  },
  "wringout": {
    "id": "wringout",
    "num": 378,
    "accuracy": 100,
    "basePower": 0,
    "basePowerCallback": "basePowerCallback(pokemon, target, move) {\n      const hp = target.hp;\n      const maxHP = target.maxhp;\n      const bp = Math.floor(Math.floor((120 * (100 * Math.floor(hp * 4096 / maxHP)) + 2048 - 1) / 4096) / 100) || 1;\n      this.debug(`BP for ${hp}/${maxHP} HP: ${bp}`);\n      return bp;\n    }",
    "category": "Special",
    "isNonstandard": "Past",
    "name": "Wring Out",
    "pp": 5,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "zMove": {
      "basePower": 190
    },
    "maxMove": {
      "basePower": 140
    },
    "contestType": "Tough"
  },
  "xscissor": {
    "id": "xscissor",
    "num": 404,
    "accuracy": 100,
    "basePower": 80,
    "category": "Physical",
    "name": "X-Scissor",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1,
      "slicing": 1
    },
    "secondary": null,
    "target": "normal",
    "type": "Bug",
    "contestType": "Cool"
  },
  "yawn": {
    "id": "yawn",
    "num": 281,
    "accuracy": true,
    "basePower": 0,
    "category": "Status",
    "name": "Yawn",
    "pp": 10,
    "priority": 0,
    "flags": {
      "protect": 1,
      "reflectable": 1,
      "mirror": 1,
      "metronome": 1
    },
    "volatileStatus": "yawn",
    "onTryHit": "onTryHit(target) {\n      if (target.status || !target.runStatusImmunity(\"slp\")) {\n        return false;\n      }\n    }",
    "condition": {
      "noCopy": true,
      "duration": 2,
      "onStart": "onStart(target, source) {\n        this.add(\"-start\", target, \"move: Yawn\", `[of] ${source}`);\n      }",
      "onResidualOrder": 23,
      "onEnd": "onEnd(target) {\n        this.add(\"-end\", target, \"move: Yawn\", \"[silent]\");\n        target.trySetStatus(\"slp\", this.effectState.source);\n      }"
    },
    "secondary": null,
    "target": "normal",
    "type": "Normal",
    "zMove": {
      "boost": {
        "spe": 1
      }
    },
    "contestType": "Cute"
  },
  "zapcannon": {
    "id": "zapcannon",
    "inherit": true,
    "basePower": 100
  },
  "zenheadbutt": {
    "id": "zenheadbutt",
    "num": 428,
    "accuracy": 90,
    "basePower": 80,
    "category": "Physical",
    "name": "Zen Headbutt",
    "pp": 15,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 20,
      "volatileStatus": "flinch"
    },
    "target": "normal",
    "type": "Psychic",
    "contestType": "Clever"
  },
  "zingzap": {
    "id": "zingzap",
    "num": 716,
    "accuracy": 100,
    "basePower": 80,
    "category": "Physical",
    "name": "Zing Zap",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1,
      "metronome": 1
    },
    "secondary": {
      "chance": 30,
      "volatileStatus": "flinch"
    },
    "target": "normal",
    "type": "Electric",
    "contestType": "Cool"
  },
  "zippyzap": {
    "id": "zippyzap",
    "num": 729,
    "accuracy": 100,
    "basePower": 80,
    "category": "Physical",
    "isNonstandard": "LGPE",
    "name": "Zippy Zap",
    "pp": 10,
    "priority": 2,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1
    },
    "secondary": {
      "chance": 100,
      "self": {
        "boosts": {
          "evasion": 1
        }
      }
    },
    "target": "normal",
    "type": "Electric",
    "contestType": "Cool"
  },
  "paleowave": {
    "id": "paleowave",
    "num": 0,
    "accuracy": 100,
    "basePower": 85,
    "category": "Special",
    "isNonstandard": "CAP",
    "name": "Paleo Wave",
    "pp": 15,
    "priority": 0,
    "flags": {
      "protect": 1,
      "mirror": 1
    },
    "secondary": {
      "chance": 20,
      "boosts": {
        "atk": -1
      }
    },
    "target": "normal",
    "type": "Rock",
    "contestType": "Beautiful"
  },
  "shadowstrike": {
    "id": "shadowstrike",
    "num": 0,
    "accuracy": 95,
    "basePower": 80,
    "category": "Physical",
    "isNonstandard": "CAP",
    "name": "Shadow Strike",
    "pp": 10,
    "priority": 0,
    "flags": {
      "contact": 1,
      "protect": 1,
      "mirror": 1
    },
    "secondary": {
      "chance": 50,
      "boosts": {
        "def": -1
      }
    },
    "target": "normal",
    "type": "Ghost",
    "contestType": "Clever"
  }
}
